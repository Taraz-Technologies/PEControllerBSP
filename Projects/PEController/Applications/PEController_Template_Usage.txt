/** @addtogroup ApplicationExamples Application Examples
 * @{
 */

/** @defgroup PEController_Template PEController Template Project
 * @brief This project presents an empty project with all peripheral configured for quick project creation
 * @{
 */



/** @defgroup CM4toCm7Integration Dual Core Operation
 * @details
 The PEController has two cores that need to work together, so they have to share information and memory. 
 In the "shared_memory.c" file, there is a variable called <b>sharedData</b> which holds the data that both cores need to share. 
 This data is stored in SRAM4 so that both cores can access it. 
 The shared data includes things like the ADC settings, ADC results, and other important control information. 
 By using this shared data variable, the system can control its different states effectively.
 * @{
 */ 
/**
 * @}
 */



/** @defgroup ADCUsage ADC Operation
 * @details
 The CM7 core controls the ADC acquisition process. 
 The sampling rate of the ADC is determined by either <b>MONITORING_FREQUENCY_Hz</b> or <b>CONTROL_FREQUENCY_Hz</b>, which are specified in "user_config.h".
 The choice between these frequencies depends on whether the system is in control mode or monitoring mode.
<br> 
 To calculate basic statistics for each channel, such as RMS, Average, Peak to Peak, minimum, and maximum values, the CM4 core is utilized. 
 These computations are performed within the defined signal frequency range.
<br>
 Furthermore, the sensitivity and offsets can be adjusted and will retain their values even after a power reset.
<br>
<br>
The callback function defined in <b>adc_cont_config_t</b> is used to inform the controller whenever new results are avilable.
User should make sure that all interrupts in the systems should have priority lower than 0 to ensure uninterrupted ADC conversions.
<br>
<br>
The measurements can be viewed using the intelliSENS software also. To purchase the license for USB Acquisition contact sales@taraztechnologies.com.
Once enabled, you set <b>ENABLE_INTELLISENS</b> in "user_config.h" to enable the functionality.
 * @{
 */ 
 /**
 * @}
 */
 
 
/** @defgroup PWMUsage PWM Usage
 * @details
The IO and PWM channels are controlled by the CM7 core as the CM7 core is responsible for all control related requirements.
<br>
<br>
The available PWMs can be controlled using pecontroller_pwm.c drivers. The list of available PWMs is as follows
PWM No  | Operation as individual channel | Operation as Inverted Pair | Timer Unit
------- | ------------------------------- | -------------------------- | ----------
1, 2	| Both Simultaneously			  | Yes						   | HRTIM1-A
3, 4	| Both Simultaneously			  | Yes						   | HRTIM1-B
5, 6	| Both Simultaneously			  | Yes						   | HRTIM1-C
7, 8	| Both Simultaneously			  | Yes						   | HRTIM1-D
9, 10	| Both Simultaneously			  | Yes						   | HRTIM1-E
11, 12	| One at a time			  		  | Yes						   | TIM1
13, 14	| One at a time			  		  | Yes						   | TIM1
15, 16	| One at a time			  		  | Yes						   | TIM1 
@note All PWMs associated to a unique Timer Unit will have same characteristics. e.g. PWM 11 and 16 will have same alignment, period and deadtime characteristics
 * @{
 */
 /**
 * @}
 */
 
 
 
/** @defgroup DiplayUsage Display Operation
 * @details
The CM4 core handles the display functionality of the system. 
It provides a straightforward main screen that consistently presents measurement statistics for each channel on the left side. 
On the right side, there is a customizable area reserved for controls specific to the application being used.
<br>
Within the application area, the variables to be monitored are displayed at the top, while the variables to be controlled are displayed at the bottom. 
Users have the flexibility to personalize the application display area by modifying the "screen_main_app.h" file.
<br>
To list the control variables, you can utilize the <b>controlConfs</b> array, and for the monitoring variables, you can use the <b>monitorConfs</b> array.
 * @{
 */  
 /**
 * @}
 */

/** @defgroup InterprocessorCommUsage Interprocessor Communication
 * @brief Controls the communication between the CM4 and CM7 processors.
 * @details 
 * The CM4-CM7 communication provided is divided into two portions
 * -# <b>Data Buffers:</b> These are defined in @ref interprocessor_data_buffs_t and are shared between both cores.
 * Both cores can access these shared registers because they are in a shared accessible space.
 * Users can store parameters meant to be shared between both cores, such as current power or current,
 * in these data buffers
 * -# <b>Messaging from CM4 to CM7:</b> This is controlled using @ref interprocessor_msg_t.
 * These messages are used to update settings and parameter values in the CM7 core.
 * These values cannot be directly updated in the registers because they are critical for the
 * control system and cannot be changed without a specific control sequence from the CM7 core.
 * @{
 */ 
 /**
 * @}
 */
 
 
/** @defgroup NewProject New Project Creation
 * @details
To make a new project for personal development follow the following steps
1. Create a copy of the template folder "PEController_Template" in location Projects/PEController/Applications
2. Rename the copied folder to a custom name such as "TestProject"
3. Open Notepad++
4. Select find in files and select Projects/PEController/Applications/TestProject as directory 
5. Replace all instances of "PEController_Template" with "TestProject"
6. Rename the following files
	- PEController_Template.ioc to TestProject.ioc in Projects/PEController/Applications/TestProject
	- PEController_Template_CM7.launch to TestProject_CM7.launch in Projects/PEController/Applications/TestProject/CM7
	- PEController_Template_CM4.launch to TestProject_CM4.launch in Projects/PEController/Applications/TestProject/CM4
7. Open the .project file for editing
 * @{
 */ 
 /**
 * @}
 */
 
 /**
 * @}
 */
 /**
 * @}
 */

