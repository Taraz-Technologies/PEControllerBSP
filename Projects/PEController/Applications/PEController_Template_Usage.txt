/** @addtogroup ApplicationExamples Application Examples
 * @{
 */

/** @defgroup PEController_Template PEController Template Project
 * @brief This project presents an empty project with all peripheral configured for quick project creation
 * @{
 */

/** @defgroup CM4toCm7Integration Dual Core Operation
 * @details
The PEController is a dual core system, therefore some synchronization and memory sharing between both cores is essential.
The <b>sharedData</b> variable in "shared_memory.c" contains the data to be shared between both cores. 
This data can be used to communicate the ADC configuration and result related information between both cores
 * @{
 */ 
/**
 * @}
 */

/** @defgroup ADCUsage ADC Operation
 * @details
The ADC acquisiton is controlled by the CM4 core. 
After clock intializations by CM7 core, CM7 assigns the sampling interval for ADC unit using the 
<b>periodUs</b> member of <b>m7Tom4</b> member of <b>sharedData</b> variable available in "shared_memory.c".
Currently period is populated in this variable from the "user_config.h" file.
<br>
<br>
A default measurement structure of each PELab configuration is currently loaded into "adc_config.h" which can be used for the PELabs.
Incase the PEController is used as a stand-alone product, the measurement value will be displayed in the range -10 to 10, 
Otherwise the range can be controlled by the CURRENT_SENSITIVITY_mVA variable in the user_config.h
<br>
<br>
After a new conversion is completed the <b>sts</b> flag of <b>m7Tom4</b> of <b>sharedData</b> will inform the CM7. 
The CM7 core can then acquire the new measurement values from the location <b>lastDataPointer</b>
<br>
<br>
The measurements can be viewed using the intelliSENS software also. To purchase the license for USB Acquisition contact sales@taraztechnologies.com
 * @{
 */ 
 /**
 * @}
 */
/** @defgroup PWMUsage PWM Usage
 * @details
The IO and PWM channels are controlled by the CM7 core as the CM7 core is responsible for all control related requirements.
<br>
<br>
The available PWMs can be controlled using pecontroller_pwm.c drivers. The list of available PWMs is as follows
PWM No  | Operation as individual channel | Operation as Inverted Pair | Timer Unit
------- | ------------------------------- | -------------------------- | ----------
1, 2	| Both Simultaneously			  | Yes						   | HRTIM1-A
3, 4	| Both Simultaneously			  | Yes						   | HRTIM1-B
5, 6	| Both Simultaneously			  | Yes						   | HRTIM1-C
7, 8	| Both Simultaneously			  | Yes						   | HRTIM1-D
9, 10	| Both Simultaneously			  | Yes						   | HRTIM1-E
11, 12	| One at a time			  		  | Yes						   | TIM1
13, 14	| One at a time			  		  | Yes						   | TIM1
15, 16	| One at a time			  		  | Yes						   | TIM1 
@note All PWMs associated to a unique Timer Unit will have same characteristics. e.g. 11 and 16 will have same alignment, period and deadtime characteristics
 * @{
 */
 /**
 * @}
 */
/** @defgroup NewProject New Project Creation
 * @details
To make a new project for personal development follow the following steps
1. Create a copy of the template folder "PEController_Template" in location Projects/PEController/Applications
2. Rename the copied folder to a custom name such as "TestProject"
3. Open Notepad++
4. Select find in files and select Projects/PEController/Applications/TestProject as directory 
5. Replace all instances of "PEController_Template" with "TestProject"
6. Rename the following files
	- PEController_Template.ioc to TestProject.ioc in Projects/PEController/Applications/TestProject
	- PEController_Template_CM7.launch to TestProject_CM7.launch in Projects/PEController/Applications/TestProject/CM7
	- PEController_Template_CM4.launch to TestProject_CM4.launch in Projects/PEController/Applications/TestProject/CM4
7. Open the .project file for editing
 * @{
 */ 
 /**
 * @}
 */
 
 /**
 * @}
 */
 /**
 * @}
 */

