
PELab_OpenLoopVFD_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004980  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bb814  08104c18  08104c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081c042c  081c042c  000d042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081c0430  081c0430  000d0430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  10000000  081c0434  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002e4  1000001c  081c0450  000e001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000300  081c0450  000e0300  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000e001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fc2d  00000000  00000000  000e004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003490  00000000  00000000  000ffc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001290  00000000  00000000  00103110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001150  00000000  00000000  001043a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003952e  00000000  00000000  001054f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016b5e  00000000  00000000  0013ea1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017c830  00000000  00000000  0015557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  002d1dac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e28  00000000  00000000  002d1e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000001c 	.word	0x1000001c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08104c00 	.word	0x08104c00

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000020 	.word	0x10000020
 81002d4:	08104c00 	.word	0x08104c00

081002d8 <MAX11046App_Processing>:
@brief Processes the adc data acquired from the adc 
@details this function will call the control system module for evaluation
@param *u16Results- pointer to the values acquired
*/
void MAX11046App_Processing(uint16_t* u16Results)
{
 81002d8:	b580      	push	{r7, lr}
 81002da:	b086      	sub	sp, #24
 81002dc:	af00      	add	r7, sp, #0
 81002de:	6078      	str	r0, [r7, #4]
	float* fResults = (float*)&adcVals;
 81002e0:	4b1d      	ldr	r3, [pc, #116]	; (8100358 <MAX11046App_Processing+0x80>)
 81002e2:	613b      	str	r3, [r7, #16]
	adcRawVals = u16Results;
 81002e4:	4a1d      	ldr	r2, [pc, #116]	; (810035c <MAX11046App_Processing+0x84>)
 81002e6:	687b      	ldr	r3, [r7, #4]
 81002e8:	6013      	str	r3, [r2, #0]
	float* adcOffsets = (float*)&offsets;
 81002ea:	4b1d      	ldr	r3, [pc, #116]	; (8100360 <MAX11046App_Processing+0x88>)
 81002ec:	60fb      	str	r3, [r7, #12]
	float* adcMults = (float*)&mults;
 81002ee:	4b1d      	ldr	r3, [pc, #116]	; (8100364 <MAX11046App_Processing+0x8c>)
 81002f0:	60bb      	str	r3, [r7, #8]
	
	/* convert the values */
	int i = 15;
 81002f2:	230f      	movs	r3, #15
 81002f4:	617b      	str	r3, [r7, #20]
	do
	{
		fResults[i] = (u16Results[i] - adcOffsets[i]) * adcMults[i];
 81002f6:	697b      	ldr	r3, [r7, #20]
 81002f8:	005b      	lsls	r3, r3, #1
 81002fa:	687a      	ldr	r2, [r7, #4]
 81002fc:	4413      	add	r3, r2
 81002fe:	881b      	ldrh	r3, [r3, #0]
 8100300:	ee07 3a90 	vmov	s15, r3
 8100304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8100308:	697b      	ldr	r3, [r7, #20]
 810030a:	009b      	lsls	r3, r3, #2
 810030c:	68fa      	ldr	r2, [r7, #12]
 810030e:	4413      	add	r3, r2
 8100310:	edd3 7a00 	vldr	s15, [r3]
 8100314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8100318:	697b      	ldr	r3, [r7, #20]
 810031a:	009b      	lsls	r3, r3, #2
 810031c:	68ba      	ldr	r2, [r7, #8]
 810031e:	4413      	add	r3, r2
 8100320:	edd3 7a00 	vldr	s15, [r3]
 8100324:	697b      	ldr	r3, [r7, #20]
 8100326:	009b      	lsls	r3, r3, #2
 8100328:	693a      	ldr	r2, [r7, #16]
 810032a:	4413      	add	r3, r2
 810032c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100330:	edc3 7a00 	vstr	s15, [r3]
	} while(i--);
 8100334:	697b      	ldr	r3, [r7, #20]
 8100336:	1e5a      	subs	r2, r3, #1
 8100338:	617a      	str	r2, [r7, #20]
 810033a:	2b00      	cmp	r3, #0
 810033c:	d1db      	bne.n	81002f6 <MAX11046App_Processing+0x1e>
	
	/* call user defined function for control system evaluation */
	if(callback)
 810033e:	4b0a      	ldr	r3, [pc, #40]	; (8100368 <MAX11046App_Processing+0x90>)
 8100340:	681b      	ldr	r3, [r3, #0]
 8100342:	2b00      	cmp	r3, #0
 8100344:	d003      	beq.n	810034e <MAX11046App_Processing+0x76>
		callback(&adcVals);
 8100346:	4b08      	ldr	r3, [pc, #32]	; (8100368 <MAX11046App_Processing+0x90>)
 8100348:	681b      	ldr	r3, [r3, #0]
 810034a:	4803      	ldr	r0, [pc, #12]	; (8100358 <MAX11046App_Processing+0x80>)
 810034c:	4798      	blx	r3
}
 810034e:	bf00      	nop
 8100350:	3718      	adds	r7, #24
 8100352:	46bd      	mov	sp, r7
 8100354:	bd80      	pop	{r7, pc}
 8100356:	bf00      	nop
 8100358:	100000c0 	.word	0x100000c0
 810035c:	10000100 	.word	0x10000100
 8100360:	1000003c 	.word	0x1000003c
 8100364:	1000007c 	.word	0x1000007c
 8100368:	10000038 	.word	0x10000038

0810036c <MAX11046App_Init>:
@brief Initialize the module for external ADC measurements
@param periodUs- period in Us for the continuous conversion mode
@param dataCallback- callback for the data processing
*/
void MAX11046App_Init(uint32_t periodUs, adcMeauresDataCallback dataCallback)
{
 810036c:	b580      	push	{r7, lr}
 810036e:	b088      	sub	sp, #32
 8100370:	af00      	add	r7, sp, #0
 8100372:	6078      	str	r0, [r7, #4]
 8100374:	6039      	str	r1, [r7, #0]
	adc_acq_mode_t mode = ADC_MODE_CONT;
 8100376:	2301      	movs	r3, #1
 8100378:	76fb      	strb	r3, [r7, #27]
	
	if(periodUs > MAX_PERIOD_US)
 810037a:	687b      	ldr	r3, [r7, #4]
 810037c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8100380:	d903      	bls.n	810038a <MAX11046App_Init+0x1e>
		periodUs = MAX_PERIOD_US;
 8100382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100386:	607b      	str	r3, [r7, #4]
 8100388:	e004      	b.n	8100394 <MAX11046App_Init+0x28>
	else if (periodUs < MIN_PERIOD_US)
 810038a:	687b      	ldr	r3, [r7, #4]
 810038c:	2b04      	cmp	r3, #4
 810038e:	d801      	bhi.n	8100394 <MAX11046App_Init+0x28>
		periodUs = MIN_PERIOD_US;
 8100390:	2305      	movs	r3, #5
 8100392:	607b      	str	r3, [r7, #4]
	
	adc_cont_config_t config = { 
 8100394:	687b      	ldr	r3, [r7, #4]
 8100396:	60bb      	str	r3, [r7, #8]
 8100398:	4b27      	ldr	r3, [pc, #156]	; (8100438 <MAX11046App_Init+0xcc>)
 810039a:	60fb      	str	r3, [r7, #12]
		.conversionCycleTimeUs = periodUs, 
		.callback = MAX11046App_Processing };
	
	float* adcOffsets = (float*)&offsets;
 810039c:	4b27      	ldr	r3, [pc, #156]	; (810043c <MAX11046App_Init+0xd0>)
 810039e:	617b      	str	r3, [r7, #20]
	float* adcMults = (float*)&mults;
 81003a0:	4b27      	ldr	r3, [pc, #156]	; (8100440 <MAX11046App_Init+0xd4>)
 81003a2:	613b      	str	r3, [r7, #16]
	
	/* set the offsets and multipliers according to the connections */
	for	(int i = 0; i < 16; i++)
 81003a4:	2300      	movs	r3, #0
 81003a6:	61fb      	str	r3, [r7, #28]
 81003a8:	e010      	b.n	81003cc <MAX11046App_Init+0x60>
	{
		adcOffsets[i] = 32768;
 81003aa:	69fb      	ldr	r3, [r7, #28]
 81003ac:	009b      	lsls	r3, r3, #2
 81003ae:	697a      	ldr	r2, [r7, #20]
 81003b0:	4413      	add	r3, r2
 81003b2:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 81003b6:	601a      	str	r2, [r3, #0]
		adcMults[i] = 1;
 81003b8:	69fb      	ldr	r3, [r7, #28]
 81003ba:	009b      	lsls	r3, r3, #2
 81003bc:	693a      	ldr	r2, [r7, #16]
 81003be:	4413      	add	r3, r2
 81003c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 81003c4:	601a      	str	r2, [r3, #0]
	for	(int i = 0; i < 16; i++)
 81003c6:	69fb      	ldr	r3, [r7, #28]
 81003c8:	3301      	adds	r3, #1
 81003ca:	61fb      	str	r3, [r7, #28]
 81003cc:	69fb      	ldr	r3, [r7, #28]
 81003ce:	2b0f      	cmp	r3, #15
 81003d0:	ddeb      	ble.n	81003aa <MAX11046App_Init+0x3e>
	}
	
	mults.Ih1 = 50.0f / 32768;
 81003d2:	4b1b      	ldr	r3, [pc, #108]	; (8100440 <MAX11046App_Init+0xd4>)
 81003d4:	4a1b      	ldr	r2, [pc, #108]	; (8100444 <MAX11046App_Init+0xd8>)
 81003d6:	601a      	str	r2, [r3, #0]
	mults.Ih2 = 50.0f / 32768;
 81003d8:	4b19      	ldr	r3, [pc, #100]	; (8100440 <MAX11046App_Init+0xd4>)
 81003da:	4a1a      	ldr	r2, [pc, #104]	; (8100444 <MAX11046App_Init+0xd8>)
 81003dc:	605a      	str	r2, [r3, #4]
	mults.Ih3 = 50.0f / 32768;
 81003de:	4b18      	ldr	r3, [pc, #96]	; (8100440 <MAX11046App_Init+0xd4>)
 81003e0:	4a18      	ldr	r2, [pc, #96]	; (8100444 <MAX11046App_Init+0xd8>)
 81003e2:	609a      	str	r2, [r3, #8]
	mults.Ie1 = 50.0f / 32768;
 81003e4:	4b16      	ldr	r3, [pc, #88]	; (8100440 <MAX11046App_Init+0xd4>)
 81003e6:	4a17      	ldr	r2, [pc, #92]	; (8100444 <MAX11046App_Init+0xd8>)
 81003e8:	60da      	str	r2, [r3, #12]
	mults.Ie2 = 50.0f / 32768;
 81003ea:	4b15      	ldr	r3, [pc, #84]	; (8100440 <MAX11046App_Init+0xd4>)
 81003ec:	4a15      	ldr	r2, [pc, #84]	; (8100444 <MAX11046App_Init+0xd8>)
 81003ee:	611a      	str	r2, [r3, #16]
	mults.Ie3 = 50.0f / 32768;
 81003f0:	4b13      	ldr	r3, [pc, #76]	; (8100440 <MAX11046App_Init+0xd4>)
 81003f2:	4a14      	ldr	r2, [pc, #80]	; (8100444 <MAX11046App_Init+0xd8>)
 81003f4:	615a      	str	r2, [r3, #20]
	
	mults.Vdc1 = 1000.0f / 32768;
 81003f6:	4b12      	ldr	r3, [pc, #72]	; (8100440 <MAX11046App_Init+0xd4>)
 81003f8:	4a13      	ldr	r2, [pc, #76]	; (8100448 <MAX11046App_Init+0xdc>)
 81003fa:	621a      	str	r2, [r3, #32]
	mults.V1 = 1000.0f / 32768;
 81003fc:	4b10      	ldr	r3, [pc, #64]	; (8100440 <MAX11046App_Init+0xd4>)
 81003fe:	4a12      	ldr	r2, [pc, #72]	; (8100448 <MAX11046App_Init+0xdc>)
 8100400:	625a      	str	r2, [r3, #36]	; 0x24
	mults.V2 = 1000.0f / 32768;
 8100402:	4b0f      	ldr	r3, [pc, #60]	; (8100440 <MAX11046App_Init+0xd4>)
 8100404:	4a10      	ldr	r2, [pc, #64]	; (8100448 <MAX11046App_Init+0xdc>)
 8100406:	629a      	str	r2, [r3, #40]	; 0x28
	mults.Vdc2 = 1000.0f / 32768;
 8100408:	4b0d      	ldr	r3, [pc, #52]	; (8100440 <MAX11046App_Init+0xd4>)
 810040a:	4a0f      	ldr	r2, [pc, #60]	; (8100448 <MAX11046App_Init+0xdc>)
 810040c:	62da      	str	r2, [r3, #44]	; 0x2c
	mults.V3 = 1000.0f / 32768;
 810040e:	4b0c      	ldr	r3, [pc, #48]	; (8100440 <MAX11046App_Init+0xd4>)
 8100410:	4a0d      	ldr	r2, [pc, #52]	; (8100448 <MAX11046App_Init+0xdc>)
 8100412:	631a      	str	r2, [r3, #48]	; 0x30
	mults.V4 = 1000.0f / 32768;
 8100414:	4b0a      	ldr	r3, [pc, #40]	; (8100440 <MAX11046App_Init+0xd4>)
 8100416:	4a0c      	ldr	r2, [pc, #48]	; (8100448 <MAX11046App_Init+0xdc>)
 8100418:	635a      	str	r2, [r3, #52]	; 0x34
		
	callback = dataCallback;
 810041a:	4a0c      	ldr	r2, [pc, #48]	; (810044c <MAX11046App_Init+0xe0>)
 810041c:	683b      	ldr	r3, [r7, #0]
 810041e:	6013      	str	r3, [r2, #0]
	Raw_Max11046_Init(mode, &config);
 8100420:	f107 0208 	add.w	r2, r7, #8
 8100424:	7efb      	ldrb	r3, [r7, #27]
 8100426:	4611      	mov	r1, r2
 8100428:	4618      	mov	r0, r3
 810042a:	f000 f8fd 	bl	8100628 <Raw_Max11046_Init>
}
 810042e:	bf00      	nop
 8100430:	3720      	adds	r7, #32
 8100432:	46bd      	mov	sp, r7
 8100434:	bd80      	pop	{r7, pc}
 8100436:	bf00      	nop
 8100438:	081002d9 	.word	0x081002d9
 810043c:	1000003c 	.word	0x1000003c
 8100440:	1000007c 	.word	0x1000007c
 8100444:	3ac80000 	.word	0x3ac80000
 8100448:	3cfa0000 	.word	0x3cfa0000
 810044c:	10000038 	.word	0x10000038

08100450 <MAX11046App_Run>:

/*! @brief start the measurements related to MAX11046 */
void MAX11046App_Run(void)
{
 8100450:	b580      	push	{r7, lr}
 8100452:	af00      	add	r7, sp, #0
	Raw_Max11046_Run();
 8100454:	f000 f986 	bl	8100764 <Raw_Max11046_Run>
}
 8100458:	bf00      	nop
 810045a:	bd80      	pop	{r7, pc}

0810045c <AcquireAllMeasurements>:
	}	while (--i);
	csGPIO->BSRR = csPin;
}

static inline void AcquireAllMeasurements(uint16_t* dataPtr)
{
 810045c:	b480      	push	{r7}
 810045e:	b085      	sub	sp, #20
 8100460:	af00      	add	r7, sp, #0
 8100462:	6078      	str	r0, [r7, #4]
	int i = 8;
 8100464:	2308      	movs	r3, #8
 8100466:	60fb      	str	r3, [r7, #12]
	maxCS1_GPIO_Port->BSRR = (uint32_t)maxCS1_Pin << 16U;
 8100468:	4b1f      	ldr	r3, [pc, #124]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 810046a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 810046e:	619a      	str	r2, [r3, #24]
	do
	{
		maxRead_GPIO_Port->BSRR = (uint32_t)maxRead_Pin << 16U;
 8100470:	4b1e      	ldr	r3, [pc, #120]	; (81004ec <AcquireAllMeasurements+0x90>)
 8100472:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8100476:	619a      	str	r2, [r3, #24]
		*dataPtr++ = (uint16_t)MAX_11046_GPIO->IDR;
 8100478:	4b1d      	ldr	r3, [pc, #116]	; (81004f0 <AcquireAllMeasurements+0x94>)
 810047a:	6919      	ldr	r1, [r3, #16]
 810047c:	687b      	ldr	r3, [r7, #4]
 810047e:	1c9a      	adds	r2, r3, #2
 8100480:	607a      	str	r2, [r7, #4]
 8100482:	b28a      	uxth	r2, r1
 8100484:	801a      	strh	r2, [r3, #0]
		maxRead_GPIO_Port->BSRR = maxRead_Pin;		
 8100486:	4b19      	ldr	r3, [pc, #100]	; (81004ec <AcquireAllMeasurements+0x90>)
 8100488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810048c:	619a      	str	r2, [r3, #24]
	}	while (--i);
 810048e:	68fb      	ldr	r3, [r7, #12]
 8100490:	3b01      	subs	r3, #1
 8100492:	60fb      	str	r3, [r7, #12]
 8100494:	68fb      	ldr	r3, [r7, #12]
 8100496:	2b00      	cmp	r3, #0
 8100498:	d1ea      	bne.n	8100470 <AcquireAllMeasurements+0x14>
	maxCS1_GPIO_Port->BSRR = maxCS1_Pin;
 810049a:	4b13      	ldr	r3, [pc, #76]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 810049c:	2204      	movs	r2, #4
 810049e:	619a      	str	r2, [r3, #24]
	i = 8;
 81004a0:	2308      	movs	r3, #8
 81004a2:	60fb      	str	r3, [r7, #12]
	maxCS2_GPIO_Port->BSRR = (uint32_t)maxCS2_Pin << 16U;
 81004a4:	4b10      	ldr	r3, [pc, #64]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 81004a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81004aa:	619a      	str	r2, [r3, #24]
	do
	{
		maxRead_GPIO_Port->BSRR = (uint32_t)maxRead_Pin << 16U;
 81004ac:	4b0f      	ldr	r3, [pc, #60]	; (81004ec <AcquireAllMeasurements+0x90>)
 81004ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 81004b2:	619a      	str	r2, [r3, #24]
		*dataPtr++ = (uint16_t)MAX_11046_GPIO->IDR;
 81004b4:	4b0e      	ldr	r3, [pc, #56]	; (81004f0 <AcquireAllMeasurements+0x94>)
 81004b6:	6919      	ldr	r1, [r3, #16]
 81004b8:	687b      	ldr	r3, [r7, #4]
 81004ba:	1c9a      	adds	r2, r3, #2
 81004bc:	607a      	str	r2, [r7, #4]
 81004be:	b28a      	uxth	r2, r1
 81004c0:	801a      	strh	r2, [r3, #0]
		maxRead_GPIO_Port->BSRR = maxRead_Pin;		
 81004c2:	4b0a      	ldr	r3, [pc, #40]	; (81004ec <AcquireAllMeasurements+0x90>)
 81004c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81004c8:	619a      	str	r2, [r3, #24]
	}	while (--i);
 81004ca:	68fb      	ldr	r3, [r7, #12]
 81004cc:	3b01      	subs	r3, #1
 81004ce:	60fb      	str	r3, [r7, #12]
 81004d0:	68fb      	ldr	r3, [r7, #12]
 81004d2:	2b00      	cmp	r3, #0
 81004d4:	d1ea      	bne.n	81004ac <AcquireAllMeasurements+0x50>
	maxCS2_GPIO_Port->BSRR = maxCS2_Pin;
 81004d6:	4b04      	ldr	r3, [pc, #16]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 81004d8:	2208      	movs	r2, #8
 81004da:	619a      	str	r2, [r3, #24]
}
 81004dc:	bf00      	nop
 81004de:	3714      	adds	r7, #20
 81004e0:	46bd      	mov	sp, r7
 81004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e6:	4770      	bx	lr
 81004e8:	58021000 	.word	0x58021000
 81004ec:	58020800 	.word	0x58020800
 81004f0:	58021400 	.word	0x58021400

081004f4 <ReadResults>:

/*! @brief Get the data results */
static inline void ReadResults(void)
{
 81004f4:	b580      	push	{r7, lr}
 81004f6:	af00      	add	r7, sp, #0
	AcquireAllMeasurements(u16Data);
 81004f8:	4802      	ldr	r0, [pc, #8]	; (8100504 <ReadResults+0x10>)
 81004fa:	f7ff ffaf 	bl	810045c <AcquireAllMeasurements>
//	AcquireMeasurements(maxCS2_GPIO_Port, maxCS2_Pin, u16Data + 8);
//	AcquireMeasurements(maxCS1_GPIO_Port, maxCS1_Pin, u16Data);
}
 81004fe:	bf00      	nop
 8100500:	bd80      	pop	{r7, pc}
 8100502:	bf00      	nop
 8100504:	10000150 	.word	0x10000150

08100508 <Raw_Max11046_DeInit>:


/*! @brief Deinitialize the max 11046 module */
void Raw_Max11046_DeInit(void)
{
 8100508:	b580      	push	{r7, lr}
 810050a:	af00      	add	r7, sp, #0
	// clear the flag, then enable neg edge interrupt, then assign callback to relevant port pin
	HAL_GPIO_DeInit(maxBusy1_GPIO_Port,maxBusy1_Pin);
 810050c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100510:	480d      	ldr	r0, [pc, #52]	; (8100548 <Raw_Max11046_DeInit+0x40>)
 8100512:	f001 fb63 	bl	8101bdc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(maxBusy2_GPIO_Port,maxBusy2_Pin);
 8100516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810051a:	480b      	ldr	r0, [pc, #44]	; (8100548 <Raw_Max11046_DeInit+0x40>)
 810051c:	f001 fb5e 	bl	8101bdc <HAL_GPIO_DeInit>
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy1_Pin);
 8100520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8100528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy2_Pin);
 810052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	
	HAL_TIM_PWM_DeInit(&maxTimerHandle);
 8100538:	4804      	ldr	r0, [pc, #16]	; (810054c <Raw_Max11046_DeInit+0x44>)
 810053a:	f003 fbd7 	bl	8103cec <HAL_TIM_PWM_DeInit>
	moduleActive = false;
 810053e:	4b04      	ldr	r3, [pc, #16]	; (8100550 <Raw_Max11046_DeInit+0x48>)
 8100540:	2200      	movs	r2, #0
 8100542:	701a      	strb	r2, [r3, #0]
} 
 8100544:	bf00      	nop
 8100546:	bd80      	pop	{r7, pc}
 8100548:	58020800 	.word	0x58020800
 810054c:	10000104 	.word	0x10000104
 8100550:	100000bc 	.word	0x100000bc

08100554 <Timer_Config>:

static void Timer_Config(void)
{
 8100554:	b580      	push	{r7, lr}
 8100556:	b088      	sub	sp, #32
 8100558:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */
  TIM_OC_InitTypeDef sConfigOC = {0};
 810055a:	1d3b      	adds	r3, r7, #4
 810055c:	2200      	movs	r2, #0
 810055e:	601a      	str	r2, [r3, #0]
 8100560:	605a      	str	r2, [r3, #4]
 8100562:	609a      	str	r2, [r3, #8]
 8100564:	60da      	str	r2, [r3, #12]
 8100566:	611a      	str	r2, [r3, #16]
 8100568:	615a      	str	r2, [r3, #20]
 810056a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  maxTimerHandle.Instance = TIM12;
 810056c:	4b2a      	ldr	r3, [pc, #168]	; (8100618 <Timer_Config+0xc4>)
 810056e:	4a2b      	ldr	r2, [pc, #172]	; (810061c <Timer_Config+0xc8>)
 8100570:	601a      	str	r2, [r3, #0]
  maxTimerHandle.Init.Prescaler = 0;
 8100572:	4b29      	ldr	r3, [pc, #164]	; (8100618 <Timer_Config+0xc4>)
 8100574:	2200      	movs	r2, #0
 8100576:	605a      	str	r2, [r3, #4]
  maxTimerHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100578:	4b27      	ldr	r3, [pc, #156]	; (8100618 <Timer_Config+0xc4>)
 810057a:	2200      	movs	r2, #0
 810057c:	609a      	str	r2, [r3, #8]
  maxTimerHandle.Init.Period = (uint16_t)(240 * adcContConfig.conversionCycleTimeUs);		// --todo-- configure 240 seperately
 810057e:	4b28      	ldr	r3, [pc, #160]	; (8100620 <Timer_Config+0xcc>)
 8100580:	681b      	ldr	r3, [r3, #0]
 8100582:	b29b      	uxth	r3, r3
 8100584:	461a      	mov	r2, r3
 8100586:	0112      	lsls	r2, r2, #4
 8100588:	1ad3      	subs	r3, r2, r3
 810058a:	011b      	lsls	r3, r3, #4
 810058c:	b29b      	uxth	r3, r3
 810058e:	461a      	mov	r2, r3
 8100590:	4b21      	ldr	r3, [pc, #132]	; (8100618 <Timer_Config+0xc4>)
 8100592:	60da      	str	r2, [r3, #12]
  maxTimerHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100594:	4b20      	ldr	r3, [pc, #128]	; (8100618 <Timer_Config+0xc4>)
 8100596:	2200      	movs	r2, #0
 8100598:	611a      	str	r2, [r3, #16]
  maxTimerHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 810059a:	4b1f      	ldr	r3, [pc, #124]	; (8100618 <Timer_Config+0xc4>)
 810059c:	2280      	movs	r2, #128	; 0x80
 810059e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&maxTimerHandle) != HAL_OK)
 81005a0:	481d      	ldr	r0, [pc, #116]	; (8100618 <Timer_Config+0xc4>)
 81005a2:	f003 fb4c 	bl	8103c3e <HAL_TIM_PWM_Init>
 81005a6:	4603      	mov	r3, r0
 81005a8:	2b00      	cmp	r3, #0
 81005aa:	d001      	beq.n	81005b0 <Timer_Config+0x5c>
  {
    Error_Handler();
 81005ac:	f000 fc7c 	bl	8100ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81005b0:	2360      	movs	r3, #96	; 0x60
 81005b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = TIMER_PULSE;
 81005b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 81005b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 81005ba:	2302      	movs	r3, #2
 81005bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81005be:	2300      	movs	r3, #0
 81005c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&maxTimerHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81005c2:	1d3b      	adds	r3, r7, #4
 81005c4:	2200      	movs	r2, #0
 81005c6:	4619      	mov	r1, r3
 81005c8:	4813      	ldr	r0, [pc, #76]	; (8100618 <Timer_Config+0xc4>)
 81005ca:	f003 fdc3 	bl	8104154 <HAL_TIM_PWM_ConfigChannel>
 81005ce:	4603      	mov	r3, r0
 81005d0:	2b00      	cmp	r3, #0
 81005d2:	d001      	beq.n	81005d8 <Timer_Config+0x84>
  {
    Error_Handler();
 81005d4:	f000 fc68 	bl	8100ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&maxTimerHandle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81005d8:	1d3b      	adds	r3, r7, #4
 81005da:	2204      	movs	r2, #4
 81005dc:	4619      	mov	r1, r3
 81005de:	480e      	ldr	r0, [pc, #56]	; (8100618 <Timer_Config+0xc4>)
 81005e0:	f003 fdb8 	bl	8104154 <HAL_TIM_PWM_ConfigChannel>
 81005e4:	4603      	mov	r3, r0
 81005e6:	2b00      	cmp	r3, #0
 81005e8:	d001      	beq.n	81005ee <Timer_Config+0x9a>
  {
    Error_Handler();
 81005ea:	f000 fc5d 	bl	8100ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&maxTimerHandle);
 81005ee:	480a      	ldr	r0, [pc, #40]	; (8100618 <Timer_Config+0xc4>)
 81005f0:	f000 fe70 	bl	81012d4 <HAL_TIM_MspPostInit>
	
	MAX_11046_TIMER->CCR1 = MAX_11046_TIMER->CCR2 = TIMER_PULSE;
 81005f4:	4a09      	ldr	r2, [pc, #36]	; (810061c <Timer_Config+0xc8>)
 81005f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 81005fa:	6393      	str	r3, [r2, #56]	; 0x38
 81005fc:	4a07      	ldr	r2, [pc, #28]	; (810061c <Timer_Config+0xc8>)
 81005fe:	6353      	str	r3, [r2, #52]	; 0x34
	if(acqType == ADC_MODE_SINGLE)
 8100600:	4b08      	ldr	r3, [pc, #32]	; (8100624 <Timer_Config+0xd0>)
 8100602:	781b      	ldrb	r3, [r3, #0]
 8100604:	2b00      	cmp	r3, #0
 8100606:	d103      	bne.n	8100610 <Timer_Config+0xbc>
		HAL_TIM_OnePulse_Init(&maxTimerHandle, TIM_OPMODE_SINGLE);
 8100608:	2108      	movs	r1, #8
 810060a:	4803      	ldr	r0, [pc, #12]	; (8100618 <Timer_Config+0xc4>)
 810060c:	f003 fcd2 	bl	8103fb4 <HAL_TIM_OnePulse_Init>
}
 8100610:	bf00      	nop
 8100612:	3720      	adds	r7, #32
 8100614:	46bd      	mov	sp, r7
 8100616:	bd80      	pop	{r7, pc}
 8100618:	10000104 	.word	0x10000104
 810061c:	40001800 	.word	0x40001800
 8100620:	10000000 	.word	0x10000000
 8100624:	10000008 	.word	0x10000008

08100628 <Raw_Max11046_Init>:
@brief Initializes the raw max11046 module 
@param type- ADC_MODE_SINGLE or ADC_MODE_CONT for single or continuous conversions respectively
@param *contConfig- adc_cont_config_t contains the continuous transfer configuration
*/
void Raw_Max11046_Init(adc_acq_mode_t type, adc_cont_config_t* contConfig)
{
 8100628:	b580      	push	{r7, lr}
 810062a:	b088      	sub	sp, #32
 810062c:	af00      	add	r7, sp, #0
 810062e:	4603      	mov	r3, r0
 8100630:	6039      	str	r1, [r7, #0]
 8100632:	71fb      	strb	r3, [r7, #7]
	// DeInitialize if already initialized
	if(moduleActive)
 8100634:	4b43      	ldr	r3, [pc, #268]	; (8100744 <Raw_Max11046_Init+0x11c>)
 8100636:	781b      	ldrb	r3, [r3, #0]
 8100638:	b2db      	uxtb	r3, r3
 810063a:	2b00      	cmp	r3, #0
 810063c:	d001      	beq.n	8100642 <Raw_Max11046_Init+0x1a>
		Raw_Max11046_DeInit();
 810063e:	f7ff ff63 	bl	8100508 <Raw_Max11046_DeInit>
	
	acqType = type;
 8100642:	4a41      	ldr	r2, [pc, #260]	; (8100748 <Raw_Max11046_Init+0x120>)
 8100644:	79fb      	ldrb	r3, [r7, #7]
 8100646:	7013      	strb	r3, [r2, #0]
	adcContConfig.conversionCycleTimeUs = contConfig->conversionCycleTimeUs;
 8100648:	683b      	ldr	r3, [r7, #0]
 810064a:	681b      	ldr	r3, [r3, #0]
 810064c:	4a3f      	ldr	r2, [pc, #252]	; (810074c <Raw_Max11046_Init+0x124>)
 810064e:	6013      	str	r3, [r2, #0]
	adcContConfig.callback = contConfig->callback; 
 8100650:	683b      	ldr	r3, [r7, #0]
 8100652:	685b      	ldr	r3, [r3, #4]
 8100654:	4a3d      	ldr	r2, [pc, #244]	; (810074c <Raw_Max11046_Init+0x124>)
 8100656:	6053      	str	r3, [r2, #4]
	
	/*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, maxCS1_Pin|maxCS2_Pin, GPIO_PIN_SET);
 8100658:	2201      	movs	r2, #1
 810065a:	210c      	movs	r1, #12
 810065c:	483c      	ldr	r0, [pc, #240]	; (8100750 <Raw_Max11046_Init+0x128>)
 810065e:	f001 fbdf 	bl	8101e20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, maxWrite_Pin|LCD_Disp_Pin, GPIO_PIN_SET);
 8100662:	2201      	movs	r2, #1
 8100664:	f44f 7182 	mov.w	r1, #260	; 0x104
 8100668:	483a      	ldr	r0, [pc, #232]	; (8100754 <Raw_Max11046_Init+0x12c>)
 810066a:	f001 fbd9 	bl	8101e20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(maxRead_GPIO_Port, maxRead_Pin, GPIO_PIN_SET);
 810066e:	2201      	movs	r2, #1
 8100670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100674:	4838      	ldr	r0, [pc, #224]	; (8100758 <Raw_Max11046_Init+0x130>)
 8100676:	f001 fbd3 	bl	8101e20 <HAL_GPIO_WritePin>
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 810067a:	f107 030c 	add.w	r3, r7, #12
 810067e:	2200      	movs	r2, #0
 8100680:	601a      	str	r2, [r3, #0]
 8100682:	605a      	str	r2, [r3, #4]
 8100684:	609a      	str	r2, [r3, #8]
 8100686:	60da      	str	r2, [r3, #12]
 8100688:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pins : maxCS1_Pin maxCS2_Pin */
  GPIO_InitStruct.Pin = maxCS1_Pin|maxCS2_Pin;
 810068a:	230c      	movs	r3, #12
 810068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810068e:	2301      	movs	r3, #1
 8100690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100692:	2300      	movs	r3, #0
 8100694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100696:	2302      	movs	r3, #2
 8100698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810069a:	f107 030c 	add.w	r3, r7, #12
 810069e:	4619      	mov	r1, r3
 81006a0:	482b      	ldr	r0, [pc, #172]	; (8100750 <Raw_Max11046_Init+0x128>)
 81006a2:	f001 f8eb 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pins : maxWrite_Pin LCD_Disp_Pin */
  GPIO_InitStruct.Pin = maxWrite_Pin;
 81006a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 81006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006ac:	2301      	movs	r3, #1
 81006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006b0:	2300      	movs	r3, #0
 81006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006b4:	2300      	movs	r3, #0
 81006b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81006b8:	f107 030c 	add.w	r3, r7, #12
 81006bc:	4619      	mov	r1, r3
 81006be:	4825      	ldr	r0, [pc, #148]	; (8100754 <Raw_Max11046_Init+0x12c>)
 81006c0:	f001 f8dc 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : maxRead_Pin */
  GPIO_InitStruct.Pin = maxRead_Pin;
 81006c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81006c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006ca:	2301      	movs	r3, #1
 81006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ce:	2300      	movs	r3, #0
 81006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81006d2:	2303      	movs	r3, #3
 81006d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(maxRead_GPIO_Port, &GPIO_InitStruct);
 81006d6:	f107 030c 	add.w	r3, r7, #12
 81006da:	4619      	mov	r1, r3
 81006dc:	481e      	ldr	r0, [pc, #120]	; (8100758 <Raw_Max11046_Init+0x130>)
 81006de:	f001 f8cd 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy1_Pin */
  GPIO_InitStruct.Pin = maxBusy1_Pin;
 81006e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81006e8:	4b1c      	ldr	r3, [pc, #112]	; (810075c <Raw_Max11046_Init+0x134>)
 81006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ec:	2300      	movs	r3, #0
 81006ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(maxBusy1_GPIO_Port, &GPIO_InitStruct);
 81006f0:	f107 030c 	add.w	r3, r7, #12
 81006f4:	4619      	mov	r1, r3
 81006f6:	4818      	ldr	r0, [pc, #96]	; (8100758 <Raw_Max11046_Init+0x130>)
 81006f8:	f001 f8c0 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy2_Pin */
  GPIO_InitStruct.Pin = maxBusy2_Pin;
 81006fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8100700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100702:	4b16      	ldr	r3, [pc, #88]	; (810075c <Raw_Max11046_Init+0x134>)
 8100704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100706:	2300      	movs	r3, #0
 8100708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(maxBusy2_GPIO_Port, &GPIO_InitStruct);
 810070a:	f107 030c 	add.w	r3, r7, #12
 810070e:	4619      	mov	r1, r3
 8100710:	4811      	ldr	r0, [pc, #68]	; (8100758 <Raw_Max11046_Init+0x130>)
 8100712:	f001 f8b3 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pins : maxD0_Pin maxD1_Pin maxD2_Pin maxD3_Pin
                           maxD4_Pin maxD5_Pin maxD6_Pin maxD7_Pin
                           maxD8_Pin maxD9_Pin maxD10_Pin maxD11_Pin
                           maxD12_Pin maxD13_Pin maxD14_Pin maxD15_Pin */
  GPIO_InitStruct.Pin = maxD0_Pin|maxD1_Pin|maxD2_Pin|maxD3_Pin
 8100716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810071a:	60fb      	str	r3, [r7, #12]
                          |maxD4_Pin|maxD5_Pin|maxD6_Pin|maxD7_Pin
                          |maxD8_Pin|maxD9_Pin|maxD10_Pin|maxD11_Pin
                          |maxD12_Pin|maxD13_Pin|maxD14_Pin|maxD15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810071c:	2300      	movs	r3, #0
 810071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100720:	2300      	movs	r3, #0
 8100722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100724:	f107 030c 	add.w	r3, r7, #12
 8100728:	4619      	mov	r1, r3
 810072a:	480d      	ldr	r0, [pc, #52]	; (8100760 <Raw_Max11046_Init+0x138>)
 810072c:	f001 f8a6 	bl	810187c <HAL_GPIO_Init>
	
	Timer_Config();
 8100730:	f7ff ff10 	bl	8100554 <Timer_Config>
	
	moduleActive = true;
 8100734:	4b03      	ldr	r3, [pc, #12]	; (8100744 <Raw_Max11046_Init+0x11c>)
 8100736:	2201      	movs	r2, #1
 8100738:	701a      	strb	r2, [r3, #0]
}
 810073a:	bf00      	nop
 810073c:	3720      	adds	r7, #32
 810073e:	46bd      	mov	sp, r7
 8100740:	bd80      	pop	{r7, pc}
 8100742:	bf00      	nop
 8100744:	100000bc 	.word	0x100000bc
 8100748:	10000008 	.word	0x10000008
 810074c:	10000000 	.word	0x10000000
 8100750:	58021000 	.word	0x58021000
 8100754:	58022000 	.word	0x58022000
 8100758:	58020800 	.word	0x58020800
 810075c:	11210000 	.word	0x11210000
 8100760:	58021400 	.word	0x58021400

08100764 <Raw_Max11046_Run>:
@details For single conversion mode performs and provides the results in a blocking way.
For continuous conversion mode starts the conversions, after each conversion adc_cont_config_t.callback will be called
@returns uint16_t*- For single conversion mode returns the pointer to the eight acquired values. Returns NULL for continuous conversion mode
*/
uint16_t* Raw_Max11046_Run(void)
{
 8100764:	b580      	push	{r7, lr}
 8100766:	af00      	add	r7, sp, #0
		/* EXTI interrupt init*/
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy1_Pin);
 8100768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810076c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8100770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy2_Pin);
 8100774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100778:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 810077c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	 HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8100780:	2200      	movs	r2, #0
 8100782:	2101      	movs	r1, #1
 8100784:	2028      	movs	r0, #40	; 0x28
 8100786:	f001 f830 	bl	81017ea <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 810078a:	2028      	movs	r0, #40	; 0x28
 810078c:	f001 f847 	bl	810181e <HAL_NVIC_EnableIRQ>
	
	if(acqType == ADC_MODE_SINGLE)
 8100790:	4b0e      	ldr	r3, [pc, #56]	; (81007cc <Raw_Max11046_Run+0x68>)
 8100792:	781b      	ldrb	r3, [r3, #0]
 8100794:	2b00      	cmp	r3, #0
 8100796:	d10e      	bne.n	81007b6 <Raw_Max11046_Run+0x52>
	{
		// wait for the pending operations to end
		while(HAL_GPIO_ReadPin(maxBusy1_GPIO_Port,maxBusy1_Pin));
 8100798:	bf00      	nop
 810079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810079e:	480c      	ldr	r0, [pc, #48]	; (81007d0 <Raw_Max11046_Run+0x6c>)
 81007a0:	f001 fb26 	bl	8101df0 <HAL_GPIO_ReadPin>
 81007a4:	4603      	mov	r3, r0
 81007a6:	2b00      	cmp	r3, #0
 81007a8:	d1f7      	bne.n	810079a <Raw_Max11046_Run+0x36>
	
		HAL_TIM_OnePulse_Start(&maxTimerHandle,TIM_OPMODE_SINGLE);
 81007aa:	2108      	movs	r1, #8
 81007ac:	4809      	ldr	r0, [pc, #36]	; (81007d4 <Raw_Max11046_Run+0x70>)
 81007ae:	f003 fc5b 	bl	8104068 <HAL_TIM_OnePulse_Start>
//		ResPending = true;
//		while(ResPending);
		return u16Data;
 81007b2:	4b09      	ldr	r3, [pc, #36]	; (81007d8 <Raw_Max11046_Run+0x74>)
 81007b4:	e008      	b.n	81007c8 <Raw_Max11046_Run+0x64>
	}
	else
	{
		// enable pwm to produce continuous data
		HAL_TIM_PWM_Start(&maxTimerHandle,TIM_CHANNEL_1);
 81007b6:	2100      	movs	r1, #0
 81007b8:	4806      	ldr	r0, [pc, #24]	; (81007d4 <Raw_Max11046_Run+0x70>)
 81007ba:	f003 faf3 	bl	8103da4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&maxTimerHandle,TIM_CHANNEL_2);
 81007be:	2104      	movs	r1, #4
 81007c0:	4804      	ldr	r0, [pc, #16]	; (81007d4 <Raw_Max11046_Run+0x70>)
 81007c2:	f003 faef 	bl	8103da4 <HAL_TIM_PWM_Start>
		return NULL;
 81007c6:	2300      	movs	r3, #0
	}
}
 81007c8:	4618      	mov	r0, r3
 81007ca:	bd80      	pop	{r7, pc}
 81007cc:	10000008 	.word	0x10000008
 81007d0:	58020800 	.word	0x58020800
 81007d4:	10000104 	.word	0x10000104
 81007d8:	10000150 	.word	0x10000150

081007dc <HAL_GPIO_EXTI_Callback>:
//	MAX_11046_TIMER->CCR1 = MAX_11046_TIMER->CCR2 = TIMER_PULSE;
//	
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 81007dc:	b580      	push	{r7, lr}
 81007de:	b082      	sub	sp, #8
 81007e0:	af00      	add	r7, sp, #0
 81007e2:	4603      	mov	r3, r0
 81007e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == maxBusy1_Pin)
 81007e6:	88fb      	ldrh	r3, [r7, #6]
 81007e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81007ec:	d109      	bne.n	8100802 <HAL_GPIO_EXTI_Callback+0x26>
	{
		ReadResults();
 81007ee:	f7ff fe81 	bl	81004f4 <ReadResults>
		if(adcContConfig.callback)
 81007f2:	4b06      	ldr	r3, [pc, #24]	; (810080c <HAL_GPIO_EXTI_Callback+0x30>)
 81007f4:	685b      	ldr	r3, [r3, #4]
 81007f6:	2b00      	cmp	r3, #0
 81007f8:	d003      	beq.n	8100802 <HAL_GPIO_EXTI_Callback+0x26>
			adcContConfig.callback(u16Data);
 81007fa:	4b04      	ldr	r3, [pc, #16]	; (810080c <HAL_GPIO_EXTI_Callback+0x30>)
 81007fc:	685b      	ldr	r3, [r3, #4]
 81007fe:	4804      	ldr	r0, [pc, #16]	; (8100810 <HAL_GPIO_EXTI_Callback+0x34>)
 8100800:	4798      	blx	r3
	}
}
 8100802:	bf00      	nop
 8100804:	3708      	adds	r7, #8
 8100806:	46bd      	mov	sp, r7
 8100808:	bd80      	pop	{r7, pc}
 810080a:	bf00      	nop
 810080c:	10000000 	.word	0x10000000
 8100810:	10000150 	.word	0x10000150

08100814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100814:	b480      	push	{r7}
 8100816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100818:	4b0b      	ldr	r3, [pc, #44]	; (8100848 <SystemInit+0x34>)
 810081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810081e:	4a0a      	ldr	r2, [pc, #40]	; (8100848 <SystemInit+0x34>)
 8100820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100828:	4b07      	ldr	r3, [pc, #28]	; (8100848 <SystemInit+0x34>)
 810082a:	691b      	ldr	r3, [r3, #16]
 810082c:	4a06      	ldr	r2, [pc, #24]	; (8100848 <SystemInit+0x34>)
 810082e:	f043 0310 	orr.w	r3, r3, #16
 8100832:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100834:	4b04      	ldr	r3, [pc, #16]	; (8100848 <SystemInit+0x34>)
 8100836:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810083a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810083c:	bf00      	nop
 810083e:	46bd      	mov	sp, r7
 8100840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100844:	4770      	bx	lr
 8100846:	bf00      	nop
 8100848:	e000ed00 	.word	0xe000ed00

0810084c <DataProcessingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DataProcessingCallback(adc_measures_t* result)
{
 810084c:	b580      	push	{r7, lr}
 810084e:	b084      	sub	sp, #16
 8100850:	af00      	add	r7, sp, #0
 8100852:	6078      	str	r0, [r7, #4]
	volatile m4_to_m7_data_t* data = &sharedData->m4Tom7;
 8100854:	4b11      	ldr	r3, [pc, #68]	; (810089c <DataProcessingCallback+0x50>)
 8100856:	681b      	ldr	r3, [r3, #0]
 8100858:	60fb      	str	r3, [r7, #12]
	int index = (data->recordIndex + 1) & (MEASURE_SAVE_COUNT - 1);
 810085a:	68fb      	ldr	r3, [r7, #12]
 810085c:	685b      	ldr	r3, [r3, #4]
 810085e:	3301      	adds	r3, #1
 8100860:	f003 031f 	and.w	r3, r3, #31
 8100864:	60bb      	str	r3, [r7, #8]
	memcpy((void*)&(data->dataRecord[index]), result, sizeof(adc_measures_t));
 8100866:	68bb      	ldr	r3, [r7, #8]
 8100868:	019b      	lsls	r3, r3, #6
 810086a:	3348      	adds	r3, #72	; 0x48
 810086c:	68fa      	ldr	r2, [r7, #12]
 810086e:	4413      	add	r3, r2
 8100870:	3304      	adds	r3, #4
 8100872:	2240      	movs	r2, #64	; 0x40
 8100874:	6879      	ldr	r1, [r7, #4]
 8100876:	4618      	mov	r0, r3
 8100878:	f004 f9ac 	bl	8104bd4 <memcpy>
	data->recordIndex = index;
 810087c:	68fb      	ldr	r3, [r7, #12]
 810087e:	68ba      	ldr	r2, [r7, #8]
 8100880:	605a      	str	r2, [r3, #4]
	data->lastDataPointer = &data->dataRecord[index];
 8100882:	68bb      	ldr	r3, [r7, #8]
 8100884:	019b      	lsls	r3, r3, #6
 8100886:	3348      	adds	r3, #72	; 0x48
 8100888:	68fa      	ldr	r2, [r7, #12]
 810088a:	4413      	add	r3, r2
 810088c:	1d1a      	adds	r2, r3, #4
 810088e:	68fb      	ldr	r3, [r7, #12]
 8100890:	609a      	str	r2, [r3, #8]
}
 8100892:	bf00      	nop
 8100894:	3710      	adds	r7, #16
 8100896:	46bd      	mov	sp, r7
 8100898:	bd80      	pop	{r7, pc}
 810089a:	bf00      	nop
 810089c:	08104c18 	.word	0x08104c18

081008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81008a0:	b580      	push	{r7, lr}
 81008a2:	b082      	sub	sp, #8
 81008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset((void*)&(sharedData->m4Tom7), 0, sizeof(m4_to_m7_data_t));
 81008a6:	4b2c      	ldr	r3, [pc, #176]	; (8100958 <main+0xb8>)
 81008a8:	681b      	ldr	r3, [r3, #0]
 81008aa:	f640 024c 	movw	r2, #2124	; 0x84c
 81008ae:	2100      	movs	r1, #0
 81008b0:	4618      	mov	r0, r3
 81008b2:	f004 f99d 	bl	8104bf0 <memset>
	sharedData->m4Tom7.lastDataPointer = sharedData->m4Tom7.dataRecord;
 81008b6:	4b28      	ldr	r3, [pc, #160]	; (8100958 <main+0xb8>)
 81008b8:	681a      	ldr	r2, [r3, #0]
 81008ba:	4b27      	ldr	r3, [pc, #156]	; (8100958 <main+0xb8>)
 81008bc:	681b      	ldr	r3, [r3, #0]
 81008be:	324c      	adds	r2, #76	; 0x4c
 81008c0:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81008c2:	4b26      	ldr	r3, [pc, #152]	; (810095c <main+0xbc>)
 81008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008c8:	4a24      	ldr	r2, [pc, #144]	; (810095c <main+0xbc>)
 81008ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008d2:	4b22      	ldr	r3, [pc, #136]	; (810095c <main+0xbc>)
 81008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81008dc:	607b      	str	r3, [r7, #4]
 81008de:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81008e0:	2001      	movs	r0, #1
 81008e2:	f001 fad1 	bl	8101e88 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81008e6:	f001 ff27 	bl	8102738 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81008ea:	2201      	movs	r2, #1
 81008ec:	2102      	movs	r1, #2
 81008ee:	2000      	movs	r0, #0
 81008f0:	f001 fea8 	bl	8102644 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81008f4:	4b1a      	ldr	r3, [pc, #104]	; (8100960 <main+0xc0>)
 81008f6:	681b      	ldr	r3, [r3, #0]
 81008f8:	091b      	lsrs	r3, r3, #4
 81008fa:	f003 030f 	and.w	r3, r3, #15
 81008fe:	2b07      	cmp	r3, #7
 8100900:	d108      	bne.n	8100914 <main+0x74>
 8100902:	4b18      	ldr	r3, [pc, #96]	; (8100964 <main+0xc4>)
 8100904:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100908:	4a16      	ldr	r2, [pc, #88]	; (8100964 <main+0xc4>)
 810090a:	f043 0301 	orr.w	r3, r3, #1
 810090e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100912:	e007      	b.n	8100924 <main+0x84>
 8100914:	4b13      	ldr	r3, [pc, #76]	; (8100964 <main+0xc4>)
 8100916:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810091a:	4a12      	ldr	r2, [pc, #72]	; (8100964 <main+0xc4>)
 810091c:	f043 0301 	orr.w	r3, r3, #1
 8100920:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100924:	f000 fdd2 	bl	81014cc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100928:	f000 f98c 	bl	8100c44 <MX_GPIO_Init>
  MX_LTDC_Init();
 810092c:	f000 f860 	bl	81009f0 <MX_LTDC_Init>
  MX_TIM17_Init();
 8100930:	f000 f90e 	bl	8100b50 <MX_TIM17_Init>
  MX_I2C2_Init();
 8100934:	f000 f81c 	bl	8100970 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);			// LCD PWM channel
 8100938:	2100      	movs	r1, #0
 810093a:	480b      	ldr	r0, [pc, #44]	; (8100968 <main+0xc8>)
 810093c:	f003 fa32 	bl	8103da4 <HAL_TIM_PWM_Start>
  MAX11046App_Init(sharedData->m7Tom4.periodUs, DataProcessingCallback);	// Measurements @ 200KHz
 8100940:	4b05      	ldr	r3, [pc, #20]	; (8100958 <main+0xb8>)
 8100942:	681b      	ldr	r3, [r3, #0]
 8100944:	f8d3 3850 	ldr.w	r3, [r3, #2128]	; 0x850
 8100948:	4908      	ldr	r1, [pc, #32]	; (810096c <main+0xcc>)
 810094a:	4618      	mov	r0, r3
 810094c:	f7ff fd0e 	bl	810036c <MAX11046App_Init>
  MAX11046App_Run();
 8100950:	f7ff fd7e 	bl	8100450 <MAX11046App_Run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100954:	e7fe      	b.n	8100954 <main+0xb4>
 8100956:	bf00      	nop
 8100958:	08104c18 	.word	0x08104c18
 810095c:	58024400 	.word	0x58024400
 8100960:	e000ed00 	.word	0xe000ed00
 8100964:	58026400 	.word	0x58026400
 8100968:	100001bc 	.word	0x100001bc
 810096c:	0810084d 	.word	0x0810084d

08100970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100970:	b580      	push	{r7, lr}
 8100972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100974:	4b1b      	ldr	r3, [pc, #108]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100976:	4a1c      	ldr	r2, [pc, #112]	; (81009e8 <MX_I2C2_Init+0x78>)
 8100978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 810097a:	4b1a      	ldr	r3, [pc, #104]	; (81009e4 <MX_I2C2_Init+0x74>)
 810097c:	4a1b      	ldr	r2, [pc, #108]	; (81009ec <MX_I2C2_Init+0x7c>)
 810097e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100980:	4b18      	ldr	r3, [pc, #96]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100982:	2200      	movs	r2, #0
 8100984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100986:	4b17      	ldr	r3, [pc, #92]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100988:	2201      	movs	r2, #1
 810098a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810098c:	4b15      	ldr	r3, [pc, #84]	; (81009e4 <MX_I2C2_Init+0x74>)
 810098e:	2200      	movs	r2, #0
 8100990:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100992:	4b14      	ldr	r3, [pc, #80]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100994:	2200      	movs	r2, #0
 8100996:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100998:	4b12      	ldr	r3, [pc, #72]	; (81009e4 <MX_I2C2_Init+0x74>)
 810099a:	2200      	movs	r2, #0
 810099c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810099e:	4b11      	ldr	r3, [pc, #68]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009a0:	2200      	movs	r2, #0
 81009a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81009a4:	4b0f      	ldr	r3, [pc, #60]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009a6:	2200      	movs	r2, #0
 81009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81009aa:	480e      	ldr	r0, [pc, #56]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009ac:	f001 fa7e 	bl	8101eac <HAL_I2C_Init>
 81009b0:	4603      	mov	r3, r0
 81009b2:	2b00      	cmp	r3, #0
 81009b4:	d001      	beq.n	81009ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81009b6:	f000 fa77 	bl	8100ea8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81009ba:	2100      	movs	r1, #0
 81009bc:	4809      	ldr	r0, [pc, #36]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009be:	f001 fb04 	bl	8101fca <HAL_I2CEx_ConfigAnalogFilter>
 81009c2:	4603      	mov	r3, r0
 81009c4:	2b00      	cmp	r3, #0
 81009c6:	d001      	beq.n	81009cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81009c8:	f000 fa6e 	bl	8100ea8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81009cc:	2100      	movs	r1, #0
 81009ce:	4805      	ldr	r0, [pc, #20]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009d0:	f001 fb46 	bl	8102060 <HAL_I2CEx_ConfigDigitalFilter>
 81009d4:	4603      	mov	r3, r0
 81009d6:	2b00      	cmp	r3, #0
 81009d8:	d001      	beq.n	81009de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81009da:	f000 fa65 	bl	8100ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81009de:	bf00      	nop
 81009e0:	bd80      	pop	{r7, pc}
 81009e2:	bf00      	nop
 81009e4:	10000170 	.word	0x10000170
 81009e8:	40005800 	.word	0x40005800
 81009ec:	307075b1 	.word	0x307075b1

081009f0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 81009f0:	b580      	push	{r7, lr}
 81009f2:	b08e      	sub	sp, #56	; 0x38
 81009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 81009f6:	1d3b      	adds	r3, r7, #4
 81009f8:	2234      	movs	r2, #52	; 0x34
 81009fa:	2100      	movs	r1, #0
 81009fc:	4618      	mov	r0, r3
 81009fe:	f004 f8f7 	bl	8104bf0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8100a02:	4b50      	ldr	r3, [pc, #320]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a04:	4a50      	ldr	r2, [pc, #320]	; (8100b48 <MX_LTDC_Init+0x158>)
 8100a06:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8100a08:	4b4e      	ldr	r3, [pc, #312]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a0a:	2200      	movs	r2, #0
 8100a0c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8100a0e:	4b4d      	ldr	r3, [pc, #308]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a10:	2200      	movs	r2, #0
 8100a12:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8100a14:	4b4b      	ldr	r3, [pc, #300]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a16:	2200      	movs	r2, #0
 8100a18:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8100a1a:	4b4a      	ldr	r3, [pc, #296]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a1c:	2200      	movs	r2, #0
 8100a1e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 19;
 8100a20:	4b48      	ldr	r3, [pc, #288]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a22:	2213      	movs	r2, #19
 8100a24:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8100a26:	4b47      	ldr	r3, [pc, #284]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a28:	2209      	movs	r2, #9
 8100a2a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 65;
 8100a2c:	4b45      	ldr	r3, [pc, #276]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a2e:	2241      	movs	r2, #65	; 0x41
 8100a30:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 32;
 8100a32:	4b44      	ldr	r3, [pc, #272]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a34:	2220      	movs	r2, #32
 8100a36:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 865;
 8100a38:	4b42      	ldr	r3, [pc, #264]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a3a:	f240 3261 	movw	r2, #865	; 0x361
 8100a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8100a40:	4b40      	ldr	r3, [pc, #256]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8100a46:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1075;
 8100a48:	4b3e      	ldr	r3, [pc, #248]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a4a:	f240 4233 	movw	r2, #1075	; 0x433
 8100a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 534;
 8100a50:	4b3c      	ldr	r3, [pc, #240]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a52:	f240 2216 	movw	r2, #534	; 0x216
 8100a56:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8100a58:	4b3a      	ldr	r3, [pc, #232]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a5a:	2200      	movs	r2, #0
 8100a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8100a60:	4b38      	ldr	r3, [pc, #224]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a62:	22ff      	movs	r2, #255	; 0xff
 8100a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8100a68:	4b36      	ldr	r3, [pc, #216]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a6a:	2200      	movs	r2, #0
 8100a6c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8100a70:	4834      	ldr	r0, [pc, #208]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100a72:	f001 fb41 	bl	81020f8 <HAL_LTDC_Init>
 8100a76:	4603      	mov	r3, r0
 8100a78:	2b00      	cmp	r3, #0
 8100a7a:	d001      	beq.n	8100a80 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8100a7c:	f000 fa14 	bl	8100ea8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8100a80:	2300      	movs	r3, #0
 8100a82:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8100a84:	2300      	movs	r3, #0
 8100a86:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8100a88:	2300      	movs	r3, #0
 8100a8a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 8100a8c:	2300      	movs	r3, #0
 8100a8e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8100a90:	2301      	movs	r3, #1
 8100a92:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8100a94:	2300      	movs	r3, #0
 8100a96:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8100a98:	2300      	movs	r3, #0
 8100a9a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8100a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100aa0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8100aa2:	2305      	movs	r3, #5
 8100aa4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8100aa6:	2300      	movs	r3, #0
 8100aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8100aaa:	2300      	movs	r3, #0
 8100aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8100aae:	2300      	movs	r3, #0
 8100ab0:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8100ab2:	2300      	movs	r3, #0
 8100ab4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8100ab8:	2300      	movs	r3, #0
 8100aba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8100abe:	2300      	movs	r3, #0
 8100ac0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8100ac4:	1d3b      	adds	r3, r7, #4
 8100ac6:	2200      	movs	r2, #0
 8100ac8:	4619      	mov	r1, r3
 8100aca:	481e      	ldr	r0, [pc, #120]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100acc:	f001 fbe4 	bl	8102298 <HAL_LTDC_ConfigLayer>
 8100ad0:	4603      	mov	r3, r0
 8100ad2:	2b00      	cmp	r3, #0
 8100ad4:	d001      	beq.n	8100ada <MX_LTDC_Init+0xea>
  {
    Error_Handler();
 8100ad6:	f000 f9e7 	bl	8100ea8 <Error_Handler>
    /* In this case all the active display area is used to display a picture then :
       Horizontal start = horizontal synchronization + Horizontal back porch = 43
       Vertical start   = vertical synchronization + vertical back porch     = 12
       Horizontal stop = Horizontal start + window width -1 = 43 + 480 -1
       Vertical stop   = Vertical start + window height -1  = 12 + 272 -1      */
    pLayerCfg.WindowX0 = 0;
 8100ada:	2300      	movs	r3, #0
 8100adc:	607b      	str	r3, [r7, #4]
    pLayerCfg.WindowX1 = 800;
 8100ade:	f44f 7348 	mov.w	r3, #800	; 0x320
 8100ae2:	60bb      	str	r3, [r7, #8]
    pLayerCfg.WindowY0 = 0;
 8100ae4:	2300      	movs	r3, #0
 8100ae6:	60fb      	str	r3, [r7, #12]
    pLayerCfg.WindowY1 = 320;
 8100ae8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8100aec:	613b      	str	r3, [r7, #16]

    /* Pixel Format configuration*/
    pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8100aee:	2301      	movs	r3, #1
 8100af0:	617b      	str	r3, [r7, #20]

    /* Start Address configuration : frame buffer is located at FLASH memory */
    pLayerCfg.FBStartAdress = (uint32_t)&image_lcd;
 8100af2:	4b16      	ldr	r3, [pc, #88]	; (8100b4c <MX_LTDC_Init+0x15c>)
 8100af4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Alpha constant (255 == totally opaque) */
    pLayerCfg.Alpha = 255;
 8100af6:	23ff      	movs	r3, #255	; 0xff
 8100af8:	61bb      	str	r3, [r7, #24]

    /* Default Color configuration (configure A,R,G,B component values) : no background color */
    pLayerCfg.Alpha0 = 255; /* fully transparent */
 8100afa:	23ff      	movs	r3, #255	; 0xff
 8100afc:	61fb      	str	r3, [r7, #28]
    pLayerCfg.Backcolor.Blue = 255;
 8100afe:	23ff      	movs	r3, #255	; 0xff
 8100b00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    pLayerCfg.Backcolor.Green = 255;
 8100b04:	23ff      	movs	r3, #255	; 0xff
 8100b06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    pLayerCfg.Backcolor.Red = 255;
 8100b0a:	23ff      	movs	r3, #255	; 0xff
 8100b0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Configure blending factors */
    pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8100b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100b14:	623b      	str	r3, [r7, #32]
    pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8100b16:	2305      	movs	r3, #5
 8100b18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Configure the number of lines and number of pixels per line */
    pLayerCfg.ImageWidth  = 800;
 8100b1a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8100b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pLayerCfg.ImageHeight = 320;
 8100b20:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8100b24:	633b      	str	r3, [r7, #48]	; 0x30
  	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8100b26:	1d3b      	adds	r3, r7, #4
 8100b28:	2200      	movs	r2, #0
 8100b2a:	4619      	mov	r1, r3
 8100b2c:	4805      	ldr	r0, [pc, #20]	; (8100b44 <MX_LTDC_Init+0x154>)
 8100b2e:	f001 fbb3 	bl	8102298 <HAL_LTDC_ConfigLayer>
 8100b32:	4603      	mov	r3, r0
 8100b34:	2b00      	cmp	r3, #0
 8100b36:	d001      	beq.n	8100b3c <MX_LTDC_Init+0x14c>
    {
      Error_Handler();
 8100b38:	f000 f9b6 	bl	8100ea8 <Error_Handler>
    }

  /* USER CODE END LTDC_Init 2 */

}
 8100b3c:	bf00      	nop
 8100b3e:	3738      	adds	r7, #56	; 0x38
 8100b40:	46bd      	mov	sp, r7
 8100b42:	bd80      	pop	{r7, pc}
 8100b44:	10000208 	.word	0x10000208
 8100b48:	50001000 	.word	0x50001000
 8100b4c:	08104c2c 	.word	0x08104c2c

08100b50 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8100b50:	b580      	push	{r7, lr}
 8100b52:	b092      	sub	sp, #72	; 0x48
 8100b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8100b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100b5a:	2200      	movs	r2, #0
 8100b5c:	601a      	str	r2, [r3, #0]
 8100b5e:	605a      	str	r2, [r3, #4]
 8100b60:	609a      	str	r2, [r3, #8]
 8100b62:	60da      	str	r2, [r3, #12]
 8100b64:	611a      	str	r2, [r3, #16]
 8100b66:	615a      	str	r2, [r3, #20]
 8100b68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100b6a:	463b      	mov	r3, r7
 8100b6c:	222c      	movs	r2, #44	; 0x2c
 8100b6e:	2100      	movs	r1, #0
 8100b70:	4618      	mov	r0, r3
 8100b72:	f004 f83d 	bl	8104bf0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8100b76:	4b31      	ldr	r3, [pc, #196]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100b78:	4a31      	ldr	r2, [pc, #196]	; (8100c40 <MX_TIM17_Init+0xf0>)
 8100b7a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 10;
 8100b7c:	4b2f      	ldr	r3, [pc, #188]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100b7e:	220a      	movs	r2, #10
 8100b80:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100b82:	4b2e      	ldr	r3, [pc, #184]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100b84:	2200      	movs	r2, #0
 8100b86:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 960;
 8100b88:	4b2c      	ldr	r3, [pc, #176]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100b8a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8100b8e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100b90:	4b2a      	ldr	r3, [pc, #168]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100b92:	2200      	movs	r2, #0
 8100b94:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8100b96:	4b29      	ldr	r3, [pc, #164]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100b98:	2200      	movs	r2, #0
 8100b9a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8100b9c:	4b27      	ldr	r3, [pc, #156]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100b9e:	2280      	movs	r2, #128	; 0x80
 8100ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8100ba2:	4826      	ldr	r0, [pc, #152]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100ba4:	f002 fff4 	bl	8103b90 <HAL_TIM_Base_Init>
 8100ba8:	4603      	mov	r3, r0
 8100baa:	2b00      	cmp	r3, #0
 8100bac:	d001      	beq.n	8100bb2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8100bae:	f000 f97b 	bl	8100ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8100bb2:	4822      	ldr	r0, [pc, #136]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100bb4:	f003 f843 	bl	8103c3e <HAL_TIM_PWM_Init>
 8100bb8:	4603      	mov	r3, r0
 8100bba:	2b00      	cmp	r3, #0
 8100bbc:	d001      	beq.n	8100bc2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8100bbe:	f000 f973 	bl	8100ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100bc2:	2360      	movs	r3, #96	; 0x60
 8100bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 950;
 8100bc6:	f240 33b6 	movw	r3, #950	; 0x3b6
 8100bca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100bcc:	2300      	movs	r3, #0
 8100bce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100bd0:	2300      	movs	r3, #0
 8100bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100bd4:	2300      	movs	r3, #0
 8100bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100bd8:	2300      	movs	r3, #0
 8100bda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100bdc:	2300      	movs	r3, #0
 8100bde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100be4:	2200      	movs	r2, #0
 8100be6:	4619      	mov	r1, r3
 8100be8:	4814      	ldr	r0, [pc, #80]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100bea:	f003 fab3 	bl	8104154 <HAL_TIM_PWM_ConfigChannel>
 8100bee:	4603      	mov	r3, r0
 8100bf0:	2b00      	cmp	r3, #0
 8100bf2:	d001      	beq.n	8100bf8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8100bf4:	f000 f958 	bl	8100ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100bf8:	2300      	movs	r3, #0
 8100bfa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100bfc:	2300      	movs	r3, #0
 8100bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100c00:	2300      	movs	r3, #0
 8100c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100c04:	2300      	movs	r3, #0
 8100c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100c08:	2300      	movs	r3, #0
 8100c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100c10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100c12:	2300      	movs	r3, #0
 8100c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100c16:	2300      	movs	r3, #0
 8100c18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8100c1a:	463b      	mov	r3, r7
 8100c1c:	4619      	mov	r1, r3
 8100c1e:	4807      	ldr	r0, [pc, #28]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100c20:	f003 ff36 	bl	8104a90 <HAL_TIMEx_ConfigBreakDeadTime>
 8100c24:	4603      	mov	r3, r0
 8100c26:	2b00      	cmp	r3, #0
 8100c28:	d001      	beq.n	8100c2e <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8100c2a:	f000 f93d 	bl	8100ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8100c2e:	4803      	ldr	r0, [pc, #12]	; (8100c3c <MX_TIM17_Init+0xec>)
 8100c30:	f000 fb50 	bl	81012d4 <HAL_TIM_MspPostInit>

}
 8100c34:	bf00      	nop
 8100c36:	3748      	adds	r7, #72	; 0x48
 8100c38:	46bd      	mov	sp, r7
 8100c3a:	bd80      	pop	{r7, pc}
 8100c3c:	100001bc 	.word	0x100001bc
 8100c40:	40014800 	.word	0x40014800

08100c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100c44:	b580      	push	{r7, lr}
 8100c46:	b08e      	sub	sp, #56	; 0x38
 8100c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100c4e:	2200      	movs	r2, #0
 8100c50:	601a      	str	r2, [r3, #0]
 8100c52:	605a      	str	r2, [r3, #4]
 8100c54:	609a      	str	r2, [r3, #8]
 8100c56:	60da      	str	r2, [r3, #12]
 8100c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100c5a:	4b8b      	ldr	r3, [pc, #556]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c60:	4a89      	ldr	r2, [pc, #548]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c62:	f043 0310 	orr.w	r3, r3, #16
 8100c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c6a:	4b87      	ldr	r3, [pc, #540]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c70:	f003 0310 	and.w	r3, r3, #16
 8100c74:	623b      	str	r3, [r7, #32]
 8100c76:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100c78:	4b83      	ldr	r3, [pc, #524]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c7e:	4a82      	ldr	r2, [pc, #520]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c88:	4b7f      	ldr	r3, [pc, #508]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100c92:	61fb      	str	r3, [r7, #28]
 8100c94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100c96:	4b7c      	ldr	r3, [pc, #496]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c9c:	4a7a      	ldr	r2, [pc, #488]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100c9e:	f043 0304 	orr.w	r3, r3, #4
 8100ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ca6:	4b78      	ldr	r3, [pc, #480]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cac:	f003 0304 	and.w	r3, r3, #4
 8100cb0:	61bb      	str	r3, [r7, #24]
 8100cb2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100cb4:	4b74      	ldr	r3, [pc, #464]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cba:	4a73      	ldr	r2, [pc, #460]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100cbc:	f043 0320 	orr.w	r3, r3, #32
 8100cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cc4:	4b70      	ldr	r3, [pc, #448]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cca:	f003 0320 	and.w	r3, r3, #32
 8100cce:	617b      	str	r3, [r7, #20]
 8100cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100cd2:	4b6d      	ldr	r3, [pc, #436]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cd8:	4a6b      	ldr	r2, [pc, #428]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ce2:	4b69      	ldr	r3, [pc, #420]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100cec:	613b      	str	r3, [r7, #16]
 8100cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cf0:	4b65      	ldr	r3, [pc, #404]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cf6:	4a64      	ldr	r2, [pc, #400]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100cf8:	f043 0302 	orr.w	r3, r3, #2
 8100cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d00:	4b61      	ldr	r3, [pc, #388]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d06:	f003 0302 	and.w	r3, r3, #2
 8100d0a:	60fb      	str	r3, [r7, #12]
 8100d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100d0e:	4b5e      	ldr	r3, [pc, #376]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d14:	4a5c      	ldr	r2, [pc, #368]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d16:	f043 0308 	orr.w	r3, r3, #8
 8100d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d1e:	4b5a      	ldr	r3, [pc, #360]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d24:	f003 0308 	and.w	r3, r3, #8
 8100d28:	60bb      	str	r3, [r7, #8]
 8100d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100d2c:	4b56      	ldr	r3, [pc, #344]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d32:	4a55      	ldr	r2, [pc, #340]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8100d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d3c:	4b52      	ldr	r3, [pc, #328]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100d46:	607b      	str	r3, [r7, #4]
 8100d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100d4a:	4b4f      	ldr	r3, [pc, #316]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d50:	4a4d      	ldr	r2, [pc, #308]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d5a:	4b4b      	ldr	r3, [pc, #300]	; (8100e88 <MX_GPIO_Init+0x244>)
 8100d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100d64:	603b      	str	r3, [r7, #0]
 8100d66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, maxCS1_Pin|maxCS2_Pin, GPIO_PIN_SET);
 8100d68:	2201      	movs	r2, #1
 8100d6a:	210c      	movs	r1, #12
 8100d6c:	4847      	ldr	r0, [pc, #284]	; (8100e8c <MX_GPIO_Init+0x248>)
 8100d6e:	f001 f857 	bl	8101e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, maxWrite_Pin|LCD_Disp_Pin, GPIO_PIN_SET);
 8100d72:	2201      	movs	r2, #1
 8100d74:	f44f 7182 	mov.w	r1, #260	; 0x104
 8100d78:	4845      	ldr	r0, [pc, #276]	; (8100e90 <MX_GPIO_Init+0x24c>)
 8100d7a:	f001 f851 	bl	8101e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(maxRead_GPIO_Port, maxRead_Pin, GPIO_PIN_SET);
 8100d7e:	2201      	movs	r2, #1
 8100d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100d84:	4843      	ldr	r0, [pc, #268]	; (8100e94 <MX_GPIO_Init+0x250>)
 8100d86:	f001 f84b 	bl	8101e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8100d8a:	2201      	movs	r2, #1
 8100d8c:	2108      	movs	r1, #8
 8100d8e:	4842      	ldr	r0, [pc, #264]	; (8100e98 <MX_GPIO_Init+0x254>)
 8100d90:	f001 f846 	bl	8101e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : maxCS1_Pin maxCS2_Pin */
  GPIO_InitStruct.Pin = maxCS1_Pin|maxCS2_Pin;
 8100d94:	230c      	movs	r3, #12
 8100d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100d98:	2301      	movs	r3, #1
 8100d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100da0:	2302      	movs	r3, #2
 8100da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100da8:	4619      	mov	r1, r3
 8100daa:	4838      	ldr	r0, [pc, #224]	; (8100e8c <MX_GPIO_Init+0x248>)
 8100dac:	f000 fd66 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pins : maxWrite_Pin LCD_Disp_Pin */
  GPIO_InitStruct.Pin = maxWrite_Pin|LCD_Disp_Pin;
 8100db0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8100db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100db6:	2301      	movs	r3, #1
 8100db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dba:	2300      	movs	r3, #0
 8100dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100dbe:	2300      	movs	r3, #0
 8100dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100dc6:	4619      	mov	r1, r3
 8100dc8:	4831      	ldr	r0, [pc, #196]	; (8100e90 <MX_GPIO_Init+0x24c>)
 8100dca:	f000 fd57 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : maxRead_Pin */
  GPIO_InitStruct.Pin = maxRead_Pin;
 8100dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100dd4:	2301      	movs	r3, #1
 8100dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dd8:	2300      	movs	r3, #0
 8100dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ddc:	2300      	movs	r3, #0
 8100dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(maxRead_GPIO_Port, &GPIO_InitStruct);
 8100de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100de4:	4619      	mov	r1, r3
 8100de6:	482b      	ldr	r0, [pc, #172]	; (8100e94 <MX_GPIO_Init+0x250>)
 8100de8:	f000 fd48 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy1_Pin */
  GPIO_InitStruct.Pin = maxBusy1_Pin;
 8100dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8100df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100df2:	4b2a      	ldr	r3, [pc, #168]	; (8100e9c <MX_GPIO_Init+0x258>)
 8100df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100df6:	2300      	movs	r3, #0
 8100df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(maxBusy1_GPIO_Port, &GPIO_InitStruct);
 8100dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100dfe:	4619      	mov	r1, r3
 8100e00:	4824      	ldr	r0, [pc, #144]	; (8100e94 <MX_GPIO_Init+0x250>)
 8100e02:	f000 fd3b 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy2_Pin */
  GPIO_InitStruct.Pin = maxBusy2_Pin;
 8100e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8100e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100e0c:	2300      	movs	r3, #0
 8100e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e10:	2300      	movs	r3, #0
 8100e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(maxBusy2_GPIO_Port, &GPIO_InitStruct);
 8100e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100e18:	4619      	mov	r1, r3
 8100e1a:	481e      	ldr	r0, [pc, #120]	; (8100e94 <MX_GPIO_Init+0x250>)
 8100e1c:	f000 fd2e 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pins : maxD0_Pin maxD1_Pin maxD2_Pin maxD3_Pin
                           maxD4_Pin maxD5_Pin maxD6_Pin maxD7_Pin
                           maxD8_Pin maxD9_Pin maxD10_Pin maxD11_Pin
                           maxD12_Pin maxD13_Pin maxD14_Pin maxD15_Pin */
  GPIO_InitStruct.Pin = maxD0_Pin|maxD1_Pin|maxD2_Pin|maxD3_Pin
 8100e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8100e24:	627b      	str	r3, [r7, #36]	; 0x24
                          |maxD4_Pin|maxD5_Pin|maxD6_Pin|maxD7_Pin
                          |maxD8_Pin|maxD9_Pin|maxD10_Pin|maxD11_Pin
                          |maxD12_Pin|maxD13_Pin|maxD14_Pin|maxD15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100e26:	2300      	movs	r3, #0
 8100e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e2a:	2300      	movs	r3, #0
 8100e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100e32:	4619      	mov	r1, r3
 8100e34:	481a      	ldr	r0, [pc, #104]	; (8100ea0 <MX_GPIO_Init+0x25c>)
 8100e36:	f000 fd21 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8100e3a:	2304      	movs	r3, #4
 8100e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8100e3e:	4b19      	ldr	r3, [pc, #100]	; (8100ea4 <MX_GPIO_Init+0x260>)
 8100e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100e42:	2301      	movs	r3, #1
 8100e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8100e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100e4a:	4619      	mov	r1, r3
 8100e4c:	4812      	ldr	r0, [pc, #72]	; (8100e98 <MX_GPIO_Init+0x254>)
 8100e4e:	f000 fd15 	bl	810187c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_RST_Pin */
  GPIO_InitStruct.Pin = CTP_RST_Pin;
 8100e52:	2308      	movs	r3, #8
 8100e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100e56:	2301      	movs	r3, #1
 8100e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e5a:	2300      	movs	r3, #0
 8100e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e5e:	2300      	movs	r3, #0
 8100e60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CTP_RST_GPIO_Port, &GPIO_InitStruct);
 8100e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100e66:	4619      	mov	r1, r3
 8100e68:	480b      	ldr	r0, [pc, #44]	; (8100e98 <MX_GPIO_Init+0x254>)
 8100e6a:	f000 fd07 	bl	810187c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8100e6e:	2200      	movs	r2, #0
 8100e70:	2100      	movs	r1, #0
 8100e72:	2028      	movs	r0, #40	; 0x28
 8100e74:	f000 fcb9 	bl	81017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8100e78:	2028      	movs	r0, #40	; 0x28
 8100e7a:	f000 fcd0 	bl	810181e <HAL_NVIC_EnableIRQ>

}
 8100e7e:	bf00      	nop
 8100e80:	3738      	adds	r7, #56	; 0x38
 8100e82:	46bd      	mov	sp, r7
 8100e84:	bd80      	pop	{r7, pc}
 8100e86:	bf00      	nop
 8100e88:	58024400 	.word	0x58024400
 8100e8c:	58021000 	.word	0x58021000
 8100e90:	58022000 	.word	0x58022000
 8100e94:	58020800 	.word	0x58020800
 8100e98:	58021800 	.word	0x58021800
 8100e9c:	11210000 	.word	0x11210000
 8100ea0:	58021400 	.word	0x58021400
 8100ea4:	11110000 	.word	0x11110000

08100ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100ea8:	b480      	push	{r7}
 8100eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100eac:	b672      	cpsid	i
}
 8100eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100eb0:	e7fe      	b.n	8100eb0 <Error_Handler+0x8>
	...

08100eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100eb4:	b480      	push	{r7}
 8100eb6:	b083      	sub	sp, #12
 8100eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100eba:	4b0a      	ldr	r3, [pc, #40]	; (8100ee4 <HAL_MspInit+0x30>)
 8100ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ec0:	4a08      	ldr	r2, [pc, #32]	; (8100ee4 <HAL_MspInit+0x30>)
 8100ec2:	f043 0302 	orr.w	r3, r3, #2
 8100ec6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100eca:	4b06      	ldr	r3, [pc, #24]	; (8100ee4 <HAL_MspInit+0x30>)
 8100ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ed0:	f003 0302 	and.w	r3, r3, #2
 8100ed4:	607b      	str	r3, [r7, #4]
 8100ed6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100ed8:	bf00      	nop
 8100eda:	370c      	adds	r7, #12
 8100edc:	46bd      	mov	sp, r7
 8100ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ee2:	4770      	bx	lr
 8100ee4:	58024400 	.word	0x58024400

08100ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	b0b8      	sub	sp, #224	; 0xe0
 8100eec:	af00      	add	r7, sp, #0
 8100eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ef0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	601a      	str	r2, [r3, #0]
 8100ef8:	605a      	str	r2, [r3, #4]
 8100efa:	609a      	str	r2, [r3, #8]
 8100efc:	60da      	str	r2, [r3, #12]
 8100efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f00:	f107 0310 	add.w	r3, r7, #16
 8100f04:	22bc      	movs	r2, #188	; 0xbc
 8100f06:	2100      	movs	r1, #0
 8100f08:	4618      	mov	r0, r3
 8100f0a:	f003 fe71 	bl	8104bf0 <memset>
  if(hi2c->Instance==I2C2)
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	681b      	ldr	r3, [r3, #0]
 8100f12:	4a24      	ldr	r2, [pc, #144]	; (8100fa4 <HAL_I2C_MspInit+0xbc>)
 8100f14:	4293      	cmp	r3, r2
 8100f16:	d141      	bne.n	8100f9c <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8100f18:	2308      	movs	r3, #8
 8100f1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100f1c:	2300      	movs	r3, #0
 8100f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f22:	f107 0310 	add.w	r3, r7, #16
 8100f26:	4618      	mov	r0, r3
 8100f28:	f001 fd8e 	bl	8102a48 <HAL_RCCEx_PeriphCLKConfig>
 8100f2c:	4603      	mov	r3, r0
 8100f2e:	2b00      	cmp	r3, #0
 8100f30:	d001      	beq.n	8100f36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8100f32:	f7ff ffb9 	bl	8100ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100f36:	4b1c      	ldr	r3, [pc, #112]	; (8100fa8 <HAL_I2C_MspInit+0xc0>)
 8100f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f3c:	4a1a      	ldr	r2, [pc, #104]	; (8100fa8 <HAL_I2C_MspInit+0xc0>)
 8100f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f46:	4b18      	ldr	r3, [pc, #96]	; (8100fa8 <HAL_I2C_MspInit+0xc0>)
 8100f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100f50:	60fb      	str	r3, [r7, #12]
 8100f52:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = CTP_I2C_SCL_Pin|CTP_I2C_SDA_Pin;
 8100f54:	2330      	movs	r3, #48	; 0x30
 8100f56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100f5a:	2312      	movs	r3, #18
 8100f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100f60:	2301      	movs	r3, #1
 8100f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100f66:	2303      	movs	r3, #3
 8100f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100f6c:	2304      	movs	r3, #4
 8100f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100f72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100f76:	4619      	mov	r1, r3
 8100f78:	480c      	ldr	r0, [pc, #48]	; (8100fac <HAL_I2C_MspInit+0xc4>)
 8100f7a:	f000 fc7f 	bl	810187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100f7e:	4b0a      	ldr	r3, [pc, #40]	; (8100fa8 <HAL_I2C_MspInit+0xc0>)
 8100f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f84:	4a08      	ldr	r2, [pc, #32]	; (8100fa8 <HAL_I2C_MspInit+0xc0>)
 8100f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f8e:	4b06      	ldr	r3, [pc, #24]	; (8100fa8 <HAL_I2C_MspInit+0xc0>)
 8100f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100f98:	60bb      	str	r3, [r7, #8]
 8100f9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8100f9c:	bf00      	nop
 8100f9e:	37e0      	adds	r7, #224	; 0xe0
 8100fa0:	46bd      	mov	sp, r7
 8100fa2:	bd80      	pop	{r7, pc}
 8100fa4:	40005800 	.word	0x40005800
 8100fa8:	58024400 	.word	0x58024400
 8100fac:	58021c00 	.word	0x58021c00

08100fb0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8100fb0:	b580      	push	{r7, lr}
 8100fb2:	b0be      	sub	sp, #248	; 0xf8
 8100fb4:	af00      	add	r7, sp, #0
 8100fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8100fbc:	2200      	movs	r2, #0
 8100fbe:	601a      	str	r2, [r3, #0]
 8100fc0:	605a      	str	r2, [r3, #4]
 8100fc2:	609a      	str	r2, [r3, #8]
 8100fc4:	60da      	str	r2, [r3, #12]
 8100fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100fcc:	22bc      	movs	r2, #188	; 0xbc
 8100fce:	2100      	movs	r1, #0
 8100fd0:	4618      	mov	r0, r3
 8100fd2:	f003 fe0d 	bl	8104bf0 <memset>
  if(hltdc->Instance==LTDC)
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	681b      	ldr	r3, [r3, #0]
 8100fda:	4a94      	ldr	r2, [pc, #592]	; (810122c <HAL_LTDC_MspInit+0x27c>)
 8100fdc:	4293      	cmp	r3, r2
 8100fde:	f040 8120 	bne.w	8101222 <HAL_LTDC_MspInit+0x272>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8100fe2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8100fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8100fe8:	2302      	movs	r3, #2
 8100fea:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 21;
 8100fec:	2315      	movs	r3, #21
 8100fee:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8100ff0:	2302      	movs	r3, #2
 8100ff2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8100ff4:	2302      	movs	r3, #2
 8100ff6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 7;
 8100ff8:	2307      	movs	r3, #7
 8100ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8100ffc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101000:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8101002:	2300      	movs	r3, #0
 8101004:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8101006:	2300      	movs	r3, #0
 8101008:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810100a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810100e:	4618      	mov	r0, r3
 8101010:	f001 fd1a 	bl	8102a48 <HAL_RCCEx_PeriphCLKConfig>
 8101014:	4603      	mov	r3, r0
 8101016:	2b00      	cmp	r3, #0
 8101018:	d001      	beq.n	810101e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 810101a:	f7ff ff45 	bl	8100ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 810101e:	4b84      	ldr	r3, [pc, #528]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 8101020:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8101024:	4a82      	ldr	r2, [pc, #520]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 8101026:	f043 0308 	orr.w	r3, r3, #8
 810102a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 810102e:	4b80      	ldr	r3, [pc, #512]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 8101030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8101034:	f003 0308 	and.w	r3, r3, #8
 8101038:	627b      	str	r3, [r7, #36]	; 0x24
 810103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810103c:	4b7c      	ldr	r3, [pc, #496]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 810103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101042:	4a7b      	ldr	r2, [pc, #492]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 8101044:	f043 0310 	orr.w	r3, r3, #16
 8101048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810104c:	4b78      	ldr	r3, [pc, #480]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 810104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101052:	f003 0310 	and.w	r3, r3, #16
 8101056:	623b      	str	r3, [r7, #32]
 8101058:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 810105a:	4b75      	ldr	r3, [pc, #468]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 810105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101060:	4a73      	ldr	r2, [pc, #460]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 8101062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810106a:	4b71      	ldr	r3, [pc, #452]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 810106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101074:	61fb      	str	r3, [r7, #28]
 8101076:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101078:	4b6d      	ldr	r3, [pc, #436]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 810107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810107e:	4a6c      	ldr	r2, [pc, #432]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 8101080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101088:	4b69      	ldr	r3, [pc, #420]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 810108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101092:	61bb      	str	r3, [r7, #24]
 8101094:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101096:	4b66      	ldr	r3, [pc, #408]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 8101098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810109c:	4a64      	ldr	r2, [pc, #400]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 810109e:	f043 0308 	orr.w	r3, r3, #8
 81010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010a6:	4b62      	ldr	r3, [pc, #392]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 81010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010ac:	f003 0308 	and.w	r3, r3, #8
 81010b0:	617b      	str	r3, [r7, #20]
 81010b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 81010b4:	4b5e      	ldr	r3, [pc, #376]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 81010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010ba:	4a5d      	ldr	r2, [pc, #372]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 81010bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010c4:	4b5a      	ldr	r3, [pc, #360]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 81010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81010ce:	613b      	str	r3, [r7, #16]
 81010d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 81010d2:	4b57      	ldr	r3, [pc, #348]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 81010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010d8:	4a55      	ldr	r2, [pc, #340]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 81010da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010e2:	4b53      	ldr	r3, [pc, #332]	; (8101230 <HAL_LTDC_MspInit+0x280>)
 81010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81010ec:	60fb      	str	r3, [r7, #12]
 81010ee:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
 81010f0:	f24e 0370 	movw	r3, #57456	; 0xe070
 81010f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010f8:	2302      	movs	r3, #2
 81010fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010fe:	2300      	movs	r3, #0
 8101100:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101104:	2303      	movs	r3, #3
 8101106:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 810110a:	230e      	movs	r3, #14
 810110c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101110:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101114:	4619      	mov	r1, r3
 8101116:	4847      	ldr	r0, [pc, #284]	; (8101234 <HAL_LTDC_MspInit+0x284>)
 8101118:	f000 fbb0 	bl	810187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_4
 810111c:	f240 63f1 	movw	r3, #1777	; 0x6f1
 8101120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101124:	2302      	movs	r3, #2
 8101126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810112a:	2300      	movs	r3, #0
 810112c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101130:	2303      	movs	r3, #3
 8101132:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101136:	230e      	movs	r3, #14
 8101138:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810113c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101140:	4619      	mov	r1, r3
 8101142:	483d      	ldr	r0, [pc, #244]	; (8101238 <HAL_LTDC_MspInit+0x288>)
 8101144:	f000 fb9a 	bl	810187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8101148:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 810114c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101150:	2302      	movs	r3, #2
 8101152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101156:	2300      	movs	r3, #0
 8101158:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810115c:	2303      	movs	r3, #3
 810115e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8101162:	2309      	movs	r3, #9
 8101164:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101168:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810116c:	4619      	mov	r1, r3
 810116e:	4832      	ldr	r0, [pc, #200]	; (8101238 <HAL_LTDC_MspInit+0x288>)
 8101170:	f000 fb84 	bl	810187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8101174:	f64d 730c 	movw	r3, #57100	; 0xdf0c
 8101178:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810117c:	2302      	movs	r3, #2
 810117e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101182:	2300      	movs	r3, #0
 8101184:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101188:	2303      	movs	r3, #3
 810118a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 810118e:	230e      	movs	r3, #14
 8101190:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101194:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101198:	4619      	mov	r1, r3
 810119a:	4828      	ldr	r0, [pc, #160]	; (810123c <HAL_LTDC_MspInit+0x28c>)
 810119c:	f000 fb6e 	bl	810187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 81011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81011a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011a8:	2302      	movs	r3, #2
 81011aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011ae:	2300      	movs	r3, #0
 81011b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011b4:	2303      	movs	r3, #3
 81011b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81011ba:	230e      	movs	r3, #14
 81011bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81011c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81011c4:	4619      	mov	r1, r3
 81011c6:	481e      	ldr	r0, [pc, #120]	; (8101240 <HAL_LTDC_MspInit+0x290>)
 81011c8:	f000 fb58 	bl	810187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 81011cc:	2304      	movs	r3, #4
 81011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011d2:	2302      	movs	r3, #2
 81011d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011d8:	2300      	movs	r3, #0
 81011da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011de:	2303      	movs	r3, #3
 81011e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81011e4:	230e      	movs	r3, #14
 81011e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 81011ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81011ee:	4619      	mov	r1, r3
 81011f0:	4814      	ldr	r0, [pc, #80]	; (8101244 <HAL_LTDC_MspInit+0x294>)
 81011f2:	f000 fb43 	bl	810187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 81011f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 81011fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011fe:	2302      	movs	r3, #2
 8101200:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101204:	2300      	movs	r3, #0
 8101206:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810120a:	2303      	movs	r3, #3
 810120c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101210:	230e      	movs	r3, #14
 8101212:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101216:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810121a:	4619      	mov	r1, r3
 810121c:	480a      	ldr	r0, [pc, #40]	; (8101248 <HAL_LTDC_MspInit+0x298>)
 810121e:	f000 fb2d 	bl	810187c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8101222:	bf00      	nop
 8101224:	37f8      	adds	r7, #248	; 0xf8
 8101226:	46bd      	mov	sp, r7
 8101228:	bd80      	pop	{r7, pc}
 810122a:	bf00      	nop
 810122c:	50001000 	.word	0x50001000
 8101230:	58024400 	.word	0x58024400
 8101234:	58021000 	.word	0x58021000
 8101238:	58022000 	.word	0x58022000
 810123c:	58021c00 	.word	0x58021c00
 8101240:	58020c00 	.word	0x58020c00
 8101244:	58022800 	.word	0x58022800
 8101248:	58021800 	.word	0x58021800

0810124c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 810124c:	b480      	push	{r7}
 810124e:	b085      	sub	sp, #20
 8101250:	af00      	add	r7, sp, #0
 8101252:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8101254:	687b      	ldr	r3, [r7, #4]
 8101256:	681b      	ldr	r3, [r3, #0]
 8101258:	4a0b      	ldr	r2, [pc, #44]	; (8101288 <HAL_TIM_PWM_MspInit+0x3c>)
 810125a:	4293      	cmp	r3, r2
 810125c:	d10e      	bne.n	810127c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 810125e:	4b0b      	ldr	r3, [pc, #44]	; (810128c <HAL_TIM_PWM_MspInit+0x40>)
 8101260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101264:	4a09      	ldr	r2, [pc, #36]	; (810128c <HAL_TIM_PWM_MspInit+0x40>)
 8101266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810126a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810126e:	4b07      	ldr	r3, [pc, #28]	; (810128c <HAL_TIM_PWM_MspInit+0x40>)
 8101270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101278:	60fb      	str	r3, [r7, #12]
 810127a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 810127c:	bf00      	nop
 810127e:	3714      	adds	r7, #20
 8101280:	46bd      	mov	sp, r7
 8101282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101286:	4770      	bx	lr
 8101288:	40001800 	.word	0x40001800
 810128c:	58024400 	.word	0x58024400

08101290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101290:	b480      	push	{r7}
 8101292:	b085      	sub	sp, #20
 8101294:	af00      	add	r7, sp, #0
 8101296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8101298:	687b      	ldr	r3, [r7, #4]
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	4a0b      	ldr	r2, [pc, #44]	; (81012cc <HAL_TIM_Base_MspInit+0x3c>)
 810129e:	4293      	cmp	r3, r2
 81012a0:	d10e      	bne.n	81012c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 81012a2:	4b0b      	ldr	r3, [pc, #44]	; (81012d0 <HAL_TIM_Base_MspInit+0x40>)
 81012a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012a8:	4a09      	ldr	r2, [pc, #36]	; (81012d0 <HAL_TIM_Base_MspInit+0x40>)
 81012aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81012ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81012b2:	4b07      	ldr	r3, [pc, #28]	; (81012d0 <HAL_TIM_Base_MspInit+0x40>)
 81012b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81012bc:	60fb      	str	r3, [r7, #12]
 81012be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 81012c0:	bf00      	nop
 81012c2:	3714      	adds	r7, #20
 81012c4:	46bd      	mov	sp, r7
 81012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ca:	4770      	bx	lr
 81012cc:	40014800 	.word	0x40014800
 81012d0:	58024400 	.word	0x58024400

081012d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81012d4:	b580      	push	{r7, lr}
 81012d6:	b08a      	sub	sp, #40	; 0x28
 81012d8:	af00      	add	r7, sp, #0
 81012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012dc:	f107 0314 	add.w	r3, r7, #20
 81012e0:	2200      	movs	r2, #0
 81012e2:	601a      	str	r2, [r3, #0]
 81012e4:	605a      	str	r2, [r3, #4]
 81012e6:	609a      	str	r2, [r3, #8]
 81012e8:	60da      	str	r2, [r3, #12]
 81012ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	4a35      	ldr	r2, [pc, #212]	; (81013c8 <HAL_TIM_MspPostInit+0xf4>)
 81012f2:	4293      	cmp	r3, r2
 81012f4:	d13f      	bne.n	8101376 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81012f6:	4b35      	ldr	r3, [pc, #212]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 81012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012fc:	4a33      	ldr	r2, [pc, #204]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 81012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101306:	4b31      	ldr	r3, [pc, #196]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 8101308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101310:	613b      	str	r3, [r7, #16]
 8101312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101314:	4b2d      	ldr	r3, [pc, #180]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 8101316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810131a:	4a2c      	ldr	r2, [pc, #176]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 810131c:	f043 0302 	orr.w	r3, r3, #2
 8101320:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101324:	4b29      	ldr	r3, [pc, #164]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 8101326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810132a:	f003 0302 	and.w	r3, r3, #2
 810132e:	60fb      	str	r3, [r7, #12]
 8101330:	68fb      	ldr	r3, [r7, #12]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = maxCNV1_Pin;
 8101332:	2340      	movs	r3, #64	; 0x40
 8101334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101336:	2302      	movs	r3, #2
 8101338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810133a:	2300      	movs	r3, #0
 810133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810133e:	2300      	movs	r3, #0
 8101340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8101342:	2302      	movs	r3, #2
 8101344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(maxCNV1_GPIO_Port, &GPIO_InitStruct);
 8101346:	f107 0314 	add.w	r3, r7, #20
 810134a:	4619      	mov	r1, r3
 810134c:	4820      	ldr	r0, [pc, #128]	; (81013d0 <HAL_TIM_MspPostInit+0xfc>)
 810134e:	f000 fa95 	bl	810187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = maxCNV2_Pin;
 8101352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8101356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101358:	2302      	movs	r3, #2
 810135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810135c:	2300      	movs	r3, #0
 810135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101360:	2300      	movs	r3, #0
 8101362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8101364:	2302      	movs	r3, #2
 8101366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(maxCNV2_GPIO_Port, &GPIO_InitStruct);
 8101368:	f107 0314 	add.w	r3, r7, #20
 810136c:	4619      	mov	r1, r3
 810136e:	4819      	ldr	r0, [pc, #100]	; (81013d4 <HAL_TIM_MspPostInit+0x100>)
 8101370:	f000 fa84 	bl	810187c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8101374:	e024      	b.n	81013c0 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM17)
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	681b      	ldr	r3, [r3, #0]
 810137a:	4a17      	ldr	r2, [pc, #92]	; (81013d8 <HAL_TIM_MspPostInit+0x104>)
 810137c:	4293      	cmp	r3, r2
 810137e:	d11f      	bne.n	81013c0 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101380:	4b12      	ldr	r3, [pc, #72]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 8101382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101386:	4a11      	ldr	r2, [pc, #68]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 8101388:	f043 0302 	orr.w	r3, r3, #2
 810138c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101390:	4b0e      	ldr	r3, [pc, #56]	; (81013cc <HAL_TIM_MspPostInit+0xf8>)
 8101392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101396:	f003 0302 	and.w	r3, r3, #2
 810139a:	60bb      	str	r3, [r7, #8]
 810139c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 810139e:	f44f 7300 	mov.w	r3, #512	; 0x200
 81013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013a4:	2302      	movs	r3, #2
 81013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013a8:	2300      	movs	r3, #0
 81013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81013ac:	2302      	movs	r3, #2
 81013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 81013b0:	2301      	movs	r3, #1
 81013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81013b4:	f107 0314 	add.w	r3, r7, #20
 81013b8:	4619      	mov	r1, r3
 81013ba:	4806      	ldr	r0, [pc, #24]	; (81013d4 <HAL_TIM_MspPostInit+0x100>)
 81013bc:	f000 fa5e 	bl	810187c <HAL_GPIO_Init>
}
 81013c0:	bf00      	nop
 81013c2:	3728      	adds	r7, #40	; 0x28
 81013c4:	46bd      	mov	sp, r7
 81013c6:	bd80      	pop	{r7, pc}
 81013c8:	40001800 	.word	0x40001800
 81013cc:	58024400 	.word	0x58024400
 81013d0:	58021c00 	.word	0x58021c00
 81013d4:	58020400 	.word	0x58020400
 81013d8:	40014800 	.word	0x40014800

081013dc <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 81013dc:	b480      	push	{r7}
 81013de:	b083      	sub	sp, #12
 81013e0:	af00      	add	r7, sp, #0
 81013e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	4a08      	ldr	r2, [pc, #32]	; (810140c <HAL_TIM_PWM_MspDeInit+0x30>)
 81013ea:	4293      	cmp	r3, r2
 81013ec:	d107      	bne.n	81013fe <HAL_TIM_PWM_MspDeInit+0x22>
  {
  /* USER CODE BEGIN TIM12_MspDeInit 0 */

  /* USER CODE END TIM12_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM12_CLK_DISABLE();
 81013ee:	4b08      	ldr	r3, [pc, #32]	; (8101410 <HAL_TIM_PWM_MspDeInit+0x34>)
 81013f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81013f4:	4a06      	ldr	r2, [pc, #24]	; (8101410 <HAL_TIM_PWM_MspDeInit+0x34>)
 81013f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81013fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  /* USER CODE BEGIN TIM12_MspDeInit 1 */

  /* USER CODE END TIM12_MspDeInit 1 */
  }

}
 81013fe:	bf00      	nop
 8101400:	370c      	adds	r7, #12
 8101402:	46bd      	mov	sp, r7
 8101404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101408:	4770      	bx	lr
 810140a:	bf00      	nop
 810140c:	40001800 	.word	0x40001800
 8101410:	58024400 	.word	0x58024400

08101414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101414:	b480      	push	{r7}
 8101416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101418:	e7fe      	b.n	8101418 <NMI_Handler+0x4>

0810141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810141a:	b480      	push	{r7}
 810141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810141e:	e7fe      	b.n	810141e <HardFault_Handler+0x4>

08101420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101420:	b480      	push	{r7}
 8101422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101424:	e7fe      	b.n	8101424 <MemManage_Handler+0x4>

08101426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101426:	b480      	push	{r7}
 8101428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810142a:	e7fe      	b.n	810142a <BusFault_Handler+0x4>

0810142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810142c:	b480      	push	{r7}
 810142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101430:	e7fe      	b.n	8101430 <UsageFault_Handler+0x4>

08101432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101432:	b480      	push	{r7}
 8101434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101436:	bf00      	nop
 8101438:	46bd      	mov	sp, r7
 810143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143e:	4770      	bx	lr

08101440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101440:	b480      	push	{r7}
 8101442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101444:	bf00      	nop
 8101446:	46bd      	mov	sp, r7
 8101448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810144c:	4770      	bx	lr

0810144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810144e:	b480      	push	{r7}
 8101450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101452:	bf00      	nop
 8101454:	46bd      	mov	sp, r7
 8101456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810145a:	4770      	bx	lr

0810145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810145c:	b580      	push	{r7, lr}
 810145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101460:	f000 f8c8 	bl	81015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101464:	bf00      	nop
 8101466:	bd80      	pop	{r7, pc}

08101468 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101468:	b580      	push	{r7, lr}
 810146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 810146c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8101470:	f000 fcef 	bl	8101e52 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101474:	bf00      	nop
 8101476:	bd80      	pop	{r7, pc}

08101478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101478:	f8df d034 	ldr.w	sp, [pc, #52]	; 81014b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810147c:	f7ff f9ca 	bl	8100814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101480:	480c      	ldr	r0, [pc, #48]	; (81014b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101482:	490d      	ldr	r1, [pc, #52]	; (81014b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101484:	4a0d      	ldr	r2, [pc, #52]	; (81014bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101488:	e002      	b.n	8101490 <LoopCopyDataInit>

0810148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810148e:	3304      	adds	r3, #4

08101490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101494:	d3f9      	bcc.n	810148a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101496:	4a0a      	ldr	r2, [pc, #40]	; (81014c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101498:	4c0a      	ldr	r4, [pc, #40]	; (81014c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810149c:	e001      	b.n	81014a2 <LoopFillZerobss>

0810149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81014a0:	3204      	adds	r2, #4

081014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81014a4:	d3fb      	bcc.n	810149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81014a6:	f003 fb71 	bl	8104b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81014aa:	f7ff f9f9 	bl	81008a0 <main>
  bx  lr
 81014ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81014b0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81014b4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81014b8:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 81014bc:	081c0434 	.word	0x081c0434
  ldr r2, =_sbss
 81014c0:	1000001c 	.word	0x1000001c
  ldr r4, =_ebss
 81014c4:	10000300 	.word	0x10000300

081014c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81014c8:	e7fe      	b.n	81014c8 <ADC3_IRQHandler>
	...

081014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81014cc:	b580      	push	{r7, lr}
 81014ce:	b082      	sub	sp, #8
 81014d0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81014d2:	4b28      	ldr	r3, [pc, #160]	; (8101574 <HAL_Init+0xa8>)
 81014d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81014d8:	4a26      	ldr	r2, [pc, #152]	; (8101574 <HAL_Init+0xa8>)
 81014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81014de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81014e2:	4b24      	ldr	r3, [pc, #144]	; (8101574 <HAL_Init+0xa8>)
 81014e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81014e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81014ec:	603b      	str	r3, [r7, #0]
 81014ee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81014f0:	4b21      	ldr	r3, [pc, #132]	; (8101578 <HAL_Init+0xac>)
 81014f2:	681b      	ldr	r3, [r3, #0]
 81014f4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81014f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81014fc:	4a1e      	ldr	r2, [pc, #120]	; (8101578 <HAL_Init+0xac>)
 81014fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101502:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101504:	4b1c      	ldr	r3, [pc, #112]	; (8101578 <HAL_Init+0xac>)
 8101506:	681b      	ldr	r3, [r3, #0]
 8101508:	4a1b      	ldr	r2, [pc, #108]	; (8101578 <HAL_Init+0xac>)
 810150a:	f043 0301 	orr.w	r3, r3, #1
 810150e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101510:	2003      	movs	r0, #3
 8101512:	f000 f95f 	bl	81017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101516:	f001 f91d 	bl	8102754 <HAL_RCC_GetSysClockFreq>
 810151a:	4602      	mov	r2, r0
 810151c:	4b15      	ldr	r3, [pc, #84]	; (8101574 <HAL_Init+0xa8>)
 810151e:	699b      	ldr	r3, [r3, #24]
 8101520:	0a1b      	lsrs	r3, r3, #8
 8101522:	f003 030f 	and.w	r3, r3, #15
 8101526:	4915      	ldr	r1, [pc, #84]	; (810157c <HAL_Init+0xb0>)
 8101528:	5ccb      	ldrb	r3, [r1, r3]
 810152a:	f003 031f 	and.w	r3, r3, #31
 810152e:	fa22 f303 	lsr.w	r3, r2, r3
 8101532:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101534:	4b0f      	ldr	r3, [pc, #60]	; (8101574 <HAL_Init+0xa8>)
 8101536:	699b      	ldr	r3, [r3, #24]
 8101538:	f003 030f 	and.w	r3, r3, #15
 810153c:	4a0f      	ldr	r2, [pc, #60]	; (810157c <HAL_Init+0xb0>)
 810153e:	5cd3      	ldrb	r3, [r2, r3]
 8101540:	f003 031f 	and.w	r3, r3, #31
 8101544:	687a      	ldr	r2, [r7, #4]
 8101546:	fa22 f303 	lsr.w	r3, r2, r3
 810154a:	4a0d      	ldr	r2, [pc, #52]	; (8101580 <HAL_Init+0xb4>)
 810154c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810154e:	4b0c      	ldr	r3, [pc, #48]	; (8101580 <HAL_Init+0xb4>)
 8101550:	681b      	ldr	r3, [r3, #0]
 8101552:	4a0c      	ldr	r2, [pc, #48]	; (8101584 <HAL_Init+0xb8>)
 8101554:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101556:	2000      	movs	r0, #0
 8101558:	f000 f816 	bl	8101588 <HAL_InitTick>
 810155c:	4603      	mov	r3, r0
 810155e:	2b00      	cmp	r3, #0
 8101560:	d001      	beq.n	8101566 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101562:	2301      	movs	r3, #1
 8101564:	e002      	b.n	810156c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101566:	f7ff fca5 	bl	8100eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810156a:	2300      	movs	r3, #0
}
 810156c:	4618      	mov	r0, r3
 810156e:	3708      	adds	r7, #8
 8101570:	46bd      	mov	sp, r7
 8101572:	bd80      	pop	{r7, pc}
 8101574:	58024400 	.word	0x58024400
 8101578:	40024400 	.word	0x40024400
 810157c:	08104c1c 	.word	0x08104c1c
 8101580:	10000010 	.word	0x10000010
 8101584:	1000000c 	.word	0x1000000c

08101588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101588:	b580      	push	{r7, lr}
 810158a:	b082      	sub	sp, #8
 810158c:	af00      	add	r7, sp, #0
 810158e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101590:	4b15      	ldr	r3, [pc, #84]	; (81015e8 <HAL_InitTick+0x60>)
 8101592:	781b      	ldrb	r3, [r3, #0]
 8101594:	2b00      	cmp	r3, #0
 8101596:	d101      	bne.n	810159c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101598:	2301      	movs	r3, #1
 810159a:	e021      	b.n	81015e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810159c:	4b13      	ldr	r3, [pc, #76]	; (81015ec <HAL_InitTick+0x64>)
 810159e:	681a      	ldr	r2, [r3, #0]
 81015a0:	4b11      	ldr	r3, [pc, #68]	; (81015e8 <HAL_InitTick+0x60>)
 81015a2:	781b      	ldrb	r3, [r3, #0]
 81015a4:	4619      	mov	r1, r3
 81015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 81015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81015b2:	4618      	mov	r0, r3
 81015b4:	f000 f941 	bl	810183a <HAL_SYSTICK_Config>
 81015b8:	4603      	mov	r3, r0
 81015ba:	2b00      	cmp	r3, #0
 81015bc:	d001      	beq.n	81015c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81015be:	2301      	movs	r3, #1
 81015c0:	e00e      	b.n	81015e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81015c2:	687b      	ldr	r3, [r7, #4]
 81015c4:	2b0f      	cmp	r3, #15
 81015c6:	d80a      	bhi.n	81015de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81015c8:	2200      	movs	r2, #0
 81015ca:	6879      	ldr	r1, [r7, #4]
 81015cc:	f04f 30ff 	mov.w	r0, #4294967295
 81015d0:	f000 f90b 	bl	81017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81015d4:	4a06      	ldr	r2, [pc, #24]	; (81015f0 <HAL_InitTick+0x68>)
 81015d6:	687b      	ldr	r3, [r7, #4]
 81015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81015da:	2300      	movs	r3, #0
 81015dc:	e000      	b.n	81015e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81015de:	2301      	movs	r3, #1
}
 81015e0:	4618      	mov	r0, r3
 81015e2:	3708      	adds	r7, #8
 81015e4:	46bd      	mov	sp, r7
 81015e6:	bd80      	pop	{r7, pc}
 81015e8:	10000018 	.word	0x10000018
 81015ec:	1000000c 	.word	0x1000000c
 81015f0:	10000014 	.word	0x10000014

081015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81015f4:	b480      	push	{r7}
 81015f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81015f8:	4b06      	ldr	r3, [pc, #24]	; (8101614 <HAL_IncTick+0x20>)
 81015fa:	781b      	ldrb	r3, [r3, #0]
 81015fc:	461a      	mov	r2, r3
 81015fe:	4b06      	ldr	r3, [pc, #24]	; (8101618 <HAL_IncTick+0x24>)
 8101600:	681b      	ldr	r3, [r3, #0]
 8101602:	4413      	add	r3, r2
 8101604:	4a04      	ldr	r2, [pc, #16]	; (8101618 <HAL_IncTick+0x24>)
 8101606:	6013      	str	r3, [r2, #0]
}
 8101608:	bf00      	nop
 810160a:	46bd      	mov	sp, r7
 810160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101610:	4770      	bx	lr
 8101612:	bf00      	nop
 8101614:	10000018 	.word	0x10000018
 8101618:	100002fc 	.word	0x100002fc

0810161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810161c:	b480      	push	{r7}
 810161e:	af00      	add	r7, sp, #0
  return uwTick;
 8101620:	4b03      	ldr	r3, [pc, #12]	; (8101630 <HAL_GetTick+0x14>)
 8101622:	681b      	ldr	r3, [r3, #0]
}
 8101624:	4618      	mov	r0, r3
 8101626:	46bd      	mov	sp, r7
 8101628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810162c:	4770      	bx	lr
 810162e:	bf00      	nop
 8101630:	100002fc 	.word	0x100002fc

08101634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101634:	b480      	push	{r7}
 8101636:	b085      	sub	sp, #20
 8101638:	af00      	add	r7, sp, #0
 810163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	f003 0307 	and.w	r3, r3, #7
 8101642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101644:	4b0c      	ldr	r3, [pc, #48]	; (8101678 <__NVIC_SetPriorityGrouping+0x44>)
 8101646:	68db      	ldr	r3, [r3, #12]
 8101648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810164a:	68ba      	ldr	r2, [r7, #8]
 810164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101650:	4013      	ands	r3, r2
 8101652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101654:	68fb      	ldr	r3, [r7, #12]
 8101656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101658:	68bb      	ldr	r3, [r7, #8]
 810165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101666:	4a04      	ldr	r2, [pc, #16]	; (8101678 <__NVIC_SetPriorityGrouping+0x44>)
 8101668:	68bb      	ldr	r3, [r7, #8]
 810166a:	60d3      	str	r3, [r2, #12]
}
 810166c:	bf00      	nop
 810166e:	3714      	adds	r7, #20
 8101670:	46bd      	mov	sp, r7
 8101672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101676:	4770      	bx	lr
 8101678:	e000ed00 	.word	0xe000ed00

0810167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810167c:	b480      	push	{r7}
 810167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101680:	4b04      	ldr	r3, [pc, #16]	; (8101694 <__NVIC_GetPriorityGrouping+0x18>)
 8101682:	68db      	ldr	r3, [r3, #12]
 8101684:	0a1b      	lsrs	r3, r3, #8
 8101686:	f003 0307 	and.w	r3, r3, #7
}
 810168a:	4618      	mov	r0, r3
 810168c:	46bd      	mov	sp, r7
 810168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101692:	4770      	bx	lr
 8101694:	e000ed00 	.word	0xe000ed00

08101698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101698:	b480      	push	{r7}
 810169a:	b083      	sub	sp, #12
 810169c:	af00      	add	r7, sp, #0
 810169e:	4603      	mov	r3, r0
 81016a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016a6:	2b00      	cmp	r3, #0
 81016a8:	db0b      	blt.n	81016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81016aa:	88fb      	ldrh	r3, [r7, #6]
 81016ac:	f003 021f 	and.w	r2, r3, #31
 81016b0:	4907      	ldr	r1, [pc, #28]	; (81016d0 <__NVIC_EnableIRQ+0x38>)
 81016b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016b6:	095b      	lsrs	r3, r3, #5
 81016b8:	2001      	movs	r0, #1
 81016ba:	fa00 f202 	lsl.w	r2, r0, r2
 81016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81016c2:	bf00      	nop
 81016c4:	370c      	adds	r7, #12
 81016c6:	46bd      	mov	sp, r7
 81016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016cc:	4770      	bx	lr
 81016ce:	bf00      	nop
 81016d0:	e000e100 	.word	0xe000e100

081016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81016d4:	b480      	push	{r7}
 81016d6:	b083      	sub	sp, #12
 81016d8:	af00      	add	r7, sp, #0
 81016da:	4603      	mov	r3, r0
 81016dc:	6039      	str	r1, [r7, #0]
 81016de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016e4:	2b00      	cmp	r3, #0
 81016e6:	db0a      	blt.n	81016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81016e8:	683b      	ldr	r3, [r7, #0]
 81016ea:	b2da      	uxtb	r2, r3
 81016ec:	490c      	ldr	r1, [pc, #48]	; (8101720 <__NVIC_SetPriority+0x4c>)
 81016ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016f2:	0112      	lsls	r2, r2, #4
 81016f4:	b2d2      	uxtb	r2, r2
 81016f6:	440b      	add	r3, r1
 81016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81016fc:	e00a      	b.n	8101714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81016fe:	683b      	ldr	r3, [r7, #0]
 8101700:	b2da      	uxtb	r2, r3
 8101702:	4908      	ldr	r1, [pc, #32]	; (8101724 <__NVIC_SetPriority+0x50>)
 8101704:	88fb      	ldrh	r3, [r7, #6]
 8101706:	f003 030f 	and.w	r3, r3, #15
 810170a:	3b04      	subs	r3, #4
 810170c:	0112      	lsls	r2, r2, #4
 810170e:	b2d2      	uxtb	r2, r2
 8101710:	440b      	add	r3, r1
 8101712:	761a      	strb	r2, [r3, #24]
}
 8101714:	bf00      	nop
 8101716:	370c      	adds	r7, #12
 8101718:	46bd      	mov	sp, r7
 810171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810171e:	4770      	bx	lr
 8101720:	e000e100 	.word	0xe000e100
 8101724:	e000ed00 	.word	0xe000ed00

08101728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101728:	b480      	push	{r7}
 810172a:	b089      	sub	sp, #36	; 0x24
 810172c:	af00      	add	r7, sp, #0
 810172e:	60f8      	str	r0, [r7, #12]
 8101730:	60b9      	str	r1, [r7, #8]
 8101732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101734:	68fb      	ldr	r3, [r7, #12]
 8101736:	f003 0307 	and.w	r3, r3, #7
 810173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810173c:	69fb      	ldr	r3, [r7, #28]
 810173e:	f1c3 0307 	rsb	r3, r3, #7
 8101742:	2b04      	cmp	r3, #4
 8101744:	bf28      	it	cs
 8101746:	2304      	movcs	r3, #4
 8101748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810174a:	69fb      	ldr	r3, [r7, #28]
 810174c:	3304      	adds	r3, #4
 810174e:	2b06      	cmp	r3, #6
 8101750:	d902      	bls.n	8101758 <NVIC_EncodePriority+0x30>
 8101752:	69fb      	ldr	r3, [r7, #28]
 8101754:	3b03      	subs	r3, #3
 8101756:	e000      	b.n	810175a <NVIC_EncodePriority+0x32>
 8101758:	2300      	movs	r3, #0
 810175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810175c:	f04f 32ff 	mov.w	r2, #4294967295
 8101760:	69bb      	ldr	r3, [r7, #24]
 8101762:	fa02 f303 	lsl.w	r3, r2, r3
 8101766:	43da      	mvns	r2, r3
 8101768:	68bb      	ldr	r3, [r7, #8]
 810176a:	401a      	ands	r2, r3
 810176c:	697b      	ldr	r3, [r7, #20]
 810176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101770:	f04f 31ff 	mov.w	r1, #4294967295
 8101774:	697b      	ldr	r3, [r7, #20]
 8101776:	fa01 f303 	lsl.w	r3, r1, r3
 810177a:	43d9      	mvns	r1, r3
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101780:	4313      	orrs	r3, r2
         );
}
 8101782:	4618      	mov	r0, r3
 8101784:	3724      	adds	r7, #36	; 0x24
 8101786:	46bd      	mov	sp, r7
 8101788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178c:	4770      	bx	lr
	...

08101790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101790:	b580      	push	{r7, lr}
 8101792:	b082      	sub	sp, #8
 8101794:	af00      	add	r7, sp, #0
 8101796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	3b01      	subs	r3, #1
 810179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81017a0:	d301      	bcc.n	81017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81017a2:	2301      	movs	r3, #1
 81017a4:	e00f      	b.n	81017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81017a6:	4a0a      	ldr	r2, [pc, #40]	; (81017d0 <SysTick_Config+0x40>)
 81017a8:	687b      	ldr	r3, [r7, #4]
 81017aa:	3b01      	subs	r3, #1
 81017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81017ae:	210f      	movs	r1, #15
 81017b0:	f04f 30ff 	mov.w	r0, #4294967295
 81017b4:	f7ff ff8e 	bl	81016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81017b8:	4b05      	ldr	r3, [pc, #20]	; (81017d0 <SysTick_Config+0x40>)
 81017ba:	2200      	movs	r2, #0
 81017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81017be:	4b04      	ldr	r3, [pc, #16]	; (81017d0 <SysTick_Config+0x40>)
 81017c0:	2207      	movs	r2, #7
 81017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81017c4:	2300      	movs	r3, #0
}
 81017c6:	4618      	mov	r0, r3
 81017c8:	3708      	adds	r7, #8
 81017ca:	46bd      	mov	sp, r7
 81017cc:	bd80      	pop	{r7, pc}
 81017ce:	bf00      	nop
 81017d0:	e000e010 	.word	0xe000e010

081017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81017d4:	b580      	push	{r7, lr}
 81017d6:	b082      	sub	sp, #8
 81017d8:	af00      	add	r7, sp, #0
 81017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81017dc:	6878      	ldr	r0, [r7, #4]
 81017de:	f7ff ff29 	bl	8101634 <__NVIC_SetPriorityGrouping>
}
 81017e2:	bf00      	nop
 81017e4:	3708      	adds	r7, #8
 81017e6:	46bd      	mov	sp, r7
 81017e8:	bd80      	pop	{r7, pc}

081017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81017ea:	b580      	push	{r7, lr}
 81017ec:	b086      	sub	sp, #24
 81017ee:	af00      	add	r7, sp, #0
 81017f0:	4603      	mov	r3, r0
 81017f2:	60b9      	str	r1, [r7, #8]
 81017f4:	607a      	str	r2, [r7, #4]
 81017f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81017f8:	f7ff ff40 	bl	810167c <__NVIC_GetPriorityGrouping>
 81017fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81017fe:	687a      	ldr	r2, [r7, #4]
 8101800:	68b9      	ldr	r1, [r7, #8]
 8101802:	6978      	ldr	r0, [r7, #20]
 8101804:	f7ff ff90 	bl	8101728 <NVIC_EncodePriority>
 8101808:	4602      	mov	r2, r0
 810180a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810180e:	4611      	mov	r1, r2
 8101810:	4618      	mov	r0, r3
 8101812:	f7ff ff5f 	bl	81016d4 <__NVIC_SetPriority>
}
 8101816:	bf00      	nop
 8101818:	3718      	adds	r7, #24
 810181a:	46bd      	mov	sp, r7
 810181c:	bd80      	pop	{r7, pc}

0810181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810181e:	b580      	push	{r7, lr}
 8101820:	b082      	sub	sp, #8
 8101822:	af00      	add	r7, sp, #0
 8101824:	4603      	mov	r3, r0
 8101826:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810182c:	4618      	mov	r0, r3
 810182e:	f7ff ff33 	bl	8101698 <__NVIC_EnableIRQ>
}
 8101832:	bf00      	nop
 8101834:	3708      	adds	r7, #8
 8101836:	46bd      	mov	sp, r7
 8101838:	bd80      	pop	{r7, pc}

0810183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810183a:	b580      	push	{r7, lr}
 810183c:	b082      	sub	sp, #8
 810183e:	af00      	add	r7, sp, #0
 8101840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101842:	6878      	ldr	r0, [r7, #4]
 8101844:	f7ff ffa4 	bl	8101790 <SysTick_Config>
 8101848:	4603      	mov	r3, r0
}
 810184a:	4618      	mov	r0, r3
 810184c:	3708      	adds	r7, #8
 810184e:	46bd      	mov	sp, r7
 8101850:	bd80      	pop	{r7, pc}
	...

08101854 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101854:	b480      	push	{r7}
 8101856:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101858:	4b07      	ldr	r3, [pc, #28]	; (8101878 <HAL_GetCurrentCPUID+0x24>)
 810185a:	681b      	ldr	r3, [r3, #0]
 810185c:	091b      	lsrs	r3, r3, #4
 810185e:	f003 030f 	and.w	r3, r3, #15
 8101862:	2b07      	cmp	r3, #7
 8101864:	d101      	bne.n	810186a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101866:	2303      	movs	r3, #3
 8101868:	e000      	b.n	810186c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810186a:	2301      	movs	r3, #1
  }
}
 810186c:	4618      	mov	r0, r3
 810186e:	46bd      	mov	sp, r7
 8101870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101874:	4770      	bx	lr
 8101876:	bf00      	nop
 8101878:	e000ed00 	.word	0xe000ed00

0810187c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810187c:	b480      	push	{r7}
 810187e:	b089      	sub	sp, #36	; 0x24
 8101880:	af00      	add	r7, sp, #0
 8101882:	6078      	str	r0, [r7, #4]
 8101884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101886:	2300      	movs	r3, #0
 8101888:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810188a:	4b89      	ldr	r3, [pc, #548]	; (8101ab0 <HAL_GPIO_Init+0x234>)
 810188c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810188e:	e194      	b.n	8101bba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101890:	683b      	ldr	r3, [r7, #0]
 8101892:	681a      	ldr	r2, [r3, #0]
 8101894:	2101      	movs	r1, #1
 8101896:	69fb      	ldr	r3, [r7, #28]
 8101898:	fa01 f303 	lsl.w	r3, r1, r3
 810189c:	4013      	ands	r3, r2
 810189e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81018a0:	693b      	ldr	r3, [r7, #16]
 81018a2:	2b00      	cmp	r3, #0
 81018a4:	f000 8186 	beq.w	8101bb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81018a8:	683b      	ldr	r3, [r7, #0]
 81018aa:	685b      	ldr	r3, [r3, #4]
 81018ac:	2b01      	cmp	r3, #1
 81018ae:	d00b      	beq.n	81018c8 <HAL_GPIO_Init+0x4c>
 81018b0:	683b      	ldr	r3, [r7, #0]
 81018b2:	685b      	ldr	r3, [r3, #4]
 81018b4:	2b02      	cmp	r3, #2
 81018b6:	d007      	beq.n	81018c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81018b8:	683b      	ldr	r3, [r7, #0]
 81018ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81018bc:	2b11      	cmp	r3, #17
 81018be:	d003      	beq.n	81018c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81018c0:	683b      	ldr	r3, [r7, #0]
 81018c2:	685b      	ldr	r3, [r3, #4]
 81018c4:	2b12      	cmp	r3, #18
 81018c6:	d130      	bne.n	810192a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81018c8:	687b      	ldr	r3, [r7, #4]
 81018ca:	689b      	ldr	r3, [r3, #8]
 81018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81018ce:	69fb      	ldr	r3, [r7, #28]
 81018d0:	005b      	lsls	r3, r3, #1
 81018d2:	2203      	movs	r2, #3
 81018d4:	fa02 f303 	lsl.w	r3, r2, r3
 81018d8:	43db      	mvns	r3, r3
 81018da:	69ba      	ldr	r2, [r7, #24]
 81018dc:	4013      	ands	r3, r2
 81018de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81018e0:	683b      	ldr	r3, [r7, #0]
 81018e2:	68da      	ldr	r2, [r3, #12]
 81018e4:	69fb      	ldr	r3, [r7, #28]
 81018e6:	005b      	lsls	r3, r3, #1
 81018e8:	fa02 f303 	lsl.w	r3, r2, r3
 81018ec:	69ba      	ldr	r2, [r7, #24]
 81018ee:	4313      	orrs	r3, r2
 81018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	69ba      	ldr	r2, [r7, #24]
 81018f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	685b      	ldr	r3, [r3, #4]
 81018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81018fe:	2201      	movs	r2, #1
 8101900:	69fb      	ldr	r3, [r7, #28]
 8101902:	fa02 f303 	lsl.w	r3, r2, r3
 8101906:	43db      	mvns	r3, r3
 8101908:	69ba      	ldr	r2, [r7, #24]
 810190a:	4013      	ands	r3, r2
 810190c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810190e:	683b      	ldr	r3, [r7, #0]
 8101910:	685b      	ldr	r3, [r3, #4]
 8101912:	091b      	lsrs	r3, r3, #4
 8101914:	f003 0201 	and.w	r2, r3, #1
 8101918:	69fb      	ldr	r3, [r7, #28]
 810191a:	fa02 f303 	lsl.w	r3, r2, r3
 810191e:	69ba      	ldr	r2, [r7, #24]
 8101920:	4313      	orrs	r3, r2
 8101922:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101924:	687b      	ldr	r3, [r7, #4]
 8101926:	69ba      	ldr	r2, [r7, #24]
 8101928:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810192a:	687b      	ldr	r3, [r7, #4]
 810192c:	68db      	ldr	r3, [r3, #12]
 810192e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101930:	69fb      	ldr	r3, [r7, #28]
 8101932:	005b      	lsls	r3, r3, #1
 8101934:	2203      	movs	r2, #3
 8101936:	fa02 f303 	lsl.w	r3, r2, r3
 810193a:	43db      	mvns	r3, r3
 810193c:	69ba      	ldr	r2, [r7, #24]
 810193e:	4013      	ands	r3, r2
 8101940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101942:	683b      	ldr	r3, [r7, #0]
 8101944:	689a      	ldr	r2, [r3, #8]
 8101946:	69fb      	ldr	r3, [r7, #28]
 8101948:	005b      	lsls	r3, r3, #1
 810194a:	fa02 f303 	lsl.w	r3, r2, r3
 810194e:	69ba      	ldr	r2, [r7, #24]
 8101950:	4313      	orrs	r3, r2
 8101952:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	69ba      	ldr	r2, [r7, #24]
 8101958:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810195a:	683b      	ldr	r3, [r7, #0]
 810195c:	685b      	ldr	r3, [r3, #4]
 810195e:	2b02      	cmp	r3, #2
 8101960:	d003      	beq.n	810196a <HAL_GPIO_Init+0xee>
 8101962:	683b      	ldr	r3, [r7, #0]
 8101964:	685b      	ldr	r3, [r3, #4]
 8101966:	2b12      	cmp	r3, #18
 8101968:	d123      	bne.n	81019b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810196a:	69fb      	ldr	r3, [r7, #28]
 810196c:	08da      	lsrs	r2, r3, #3
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	3208      	adds	r2, #8
 8101972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101978:	69fb      	ldr	r3, [r7, #28]
 810197a:	f003 0307 	and.w	r3, r3, #7
 810197e:	009b      	lsls	r3, r3, #2
 8101980:	220f      	movs	r2, #15
 8101982:	fa02 f303 	lsl.w	r3, r2, r3
 8101986:	43db      	mvns	r3, r3
 8101988:	69ba      	ldr	r2, [r7, #24]
 810198a:	4013      	ands	r3, r2
 810198c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810198e:	683b      	ldr	r3, [r7, #0]
 8101990:	691a      	ldr	r2, [r3, #16]
 8101992:	69fb      	ldr	r3, [r7, #28]
 8101994:	f003 0307 	and.w	r3, r3, #7
 8101998:	009b      	lsls	r3, r3, #2
 810199a:	fa02 f303 	lsl.w	r3, r2, r3
 810199e:	69ba      	ldr	r2, [r7, #24]
 81019a0:	4313      	orrs	r3, r2
 81019a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81019a4:	69fb      	ldr	r3, [r7, #28]
 81019a6:	08da      	lsrs	r2, r3, #3
 81019a8:	687b      	ldr	r3, [r7, #4]
 81019aa:	3208      	adds	r2, #8
 81019ac:	69b9      	ldr	r1, [r7, #24]
 81019ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81019b2:	687b      	ldr	r3, [r7, #4]
 81019b4:	681b      	ldr	r3, [r3, #0]
 81019b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81019b8:	69fb      	ldr	r3, [r7, #28]
 81019ba:	005b      	lsls	r3, r3, #1
 81019bc:	2203      	movs	r2, #3
 81019be:	fa02 f303 	lsl.w	r3, r2, r3
 81019c2:	43db      	mvns	r3, r3
 81019c4:	69ba      	ldr	r2, [r7, #24]
 81019c6:	4013      	ands	r3, r2
 81019c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81019ca:	683b      	ldr	r3, [r7, #0]
 81019cc:	685b      	ldr	r3, [r3, #4]
 81019ce:	f003 0203 	and.w	r2, r3, #3
 81019d2:	69fb      	ldr	r3, [r7, #28]
 81019d4:	005b      	lsls	r3, r3, #1
 81019d6:	fa02 f303 	lsl.w	r3, r2, r3
 81019da:	69ba      	ldr	r2, [r7, #24]
 81019dc:	4313      	orrs	r3, r2
 81019de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81019e0:	687b      	ldr	r3, [r7, #4]
 81019e2:	69ba      	ldr	r2, [r7, #24]
 81019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81019e6:	683b      	ldr	r3, [r7, #0]
 81019e8:	685b      	ldr	r3, [r3, #4]
 81019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81019ee:	2b00      	cmp	r3, #0
 81019f0:	f000 80e0 	beq.w	8101bb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81019f4:	4b2f      	ldr	r3, [pc, #188]	; (8101ab4 <HAL_GPIO_Init+0x238>)
 81019f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019fa:	4a2e      	ldr	r2, [pc, #184]	; (8101ab4 <HAL_GPIO_Init+0x238>)
 81019fc:	f043 0302 	orr.w	r3, r3, #2
 8101a00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a04:	4b2b      	ldr	r3, [pc, #172]	; (8101ab4 <HAL_GPIO_Init+0x238>)
 8101a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a0a:	f003 0302 	and.w	r3, r3, #2
 8101a0e:	60fb      	str	r3, [r7, #12]
 8101a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101a12:	4a29      	ldr	r2, [pc, #164]	; (8101ab8 <HAL_GPIO_Init+0x23c>)
 8101a14:	69fb      	ldr	r3, [r7, #28]
 8101a16:	089b      	lsrs	r3, r3, #2
 8101a18:	3302      	adds	r3, #2
 8101a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101a20:	69fb      	ldr	r3, [r7, #28]
 8101a22:	f003 0303 	and.w	r3, r3, #3
 8101a26:	009b      	lsls	r3, r3, #2
 8101a28:	220f      	movs	r2, #15
 8101a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a2e:	43db      	mvns	r3, r3
 8101a30:	69ba      	ldr	r2, [r7, #24]
 8101a32:	4013      	ands	r3, r2
 8101a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	4a20      	ldr	r2, [pc, #128]	; (8101abc <HAL_GPIO_Init+0x240>)
 8101a3a:	4293      	cmp	r3, r2
 8101a3c:	d052      	beq.n	8101ae4 <HAL_GPIO_Init+0x268>
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	4a1f      	ldr	r2, [pc, #124]	; (8101ac0 <HAL_GPIO_Init+0x244>)
 8101a42:	4293      	cmp	r3, r2
 8101a44:	d031      	beq.n	8101aaa <HAL_GPIO_Init+0x22e>
 8101a46:	687b      	ldr	r3, [r7, #4]
 8101a48:	4a1e      	ldr	r2, [pc, #120]	; (8101ac4 <HAL_GPIO_Init+0x248>)
 8101a4a:	4293      	cmp	r3, r2
 8101a4c:	d02b      	beq.n	8101aa6 <HAL_GPIO_Init+0x22a>
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	4a1d      	ldr	r2, [pc, #116]	; (8101ac8 <HAL_GPIO_Init+0x24c>)
 8101a52:	4293      	cmp	r3, r2
 8101a54:	d025      	beq.n	8101aa2 <HAL_GPIO_Init+0x226>
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	4a1c      	ldr	r2, [pc, #112]	; (8101acc <HAL_GPIO_Init+0x250>)
 8101a5a:	4293      	cmp	r3, r2
 8101a5c:	d01f      	beq.n	8101a9e <HAL_GPIO_Init+0x222>
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	4a1b      	ldr	r2, [pc, #108]	; (8101ad0 <HAL_GPIO_Init+0x254>)
 8101a62:	4293      	cmp	r3, r2
 8101a64:	d019      	beq.n	8101a9a <HAL_GPIO_Init+0x21e>
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	4a1a      	ldr	r2, [pc, #104]	; (8101ad4 <HAL_GPIO_Init+0x258>)
 8101a6a:	4293      	cmp	r3, r2
 8101a6c:	d013      	beq.n	8101a96 <HAL_GPIO_Init+0x21a>
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	4a19      	ldr	r2, [pc, #100]	; (8101ad8 <HAL_GPIO_Init+0x25c>)
 8101a72:	4293      	cmp	r3, r2
 8101a74:	d00d      	beq.n	8101a92 <HAL_GPIO_Init+0x216>
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	4a18      	ldr	r2, [pc, #96]	; (8101adc <HAL_GPIO_Init+0x260>)
 8101a7a:	4293      	cmp	r3, r2
 8101a7c:	d007      	beq.n	8101a8e <HAL_GPIO_Init+0x212>
 8101a7e:	687b      	ldr	r3, [r7, #4]
 8101a80:	4a17      	ldr	r2, [pc, #92]	; (8101ae0 <HAL_GPIO_Init+0x264>)
 8101a82:	4293      	cmp	r3, r2
 8101a84:	d101      	bne.n	8101a8a <HAL_GPIO_Init+0x20e>
 8101a86:	2309      	movs	r3, #9
 8101a88:	e02d      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101a8a:	230a      	movs	r3, #10
 8101a8c:	e02b      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101a8e:	2308      	movs	r3, #8
 8101a90:	e029      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101a92:	2307      	movs	r3, #7
 8101a94:	e027      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101a96:	2306      	movs	r3, #6
 8101a98:	e025      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101a9a:	2305      	movs	r3, #5
 8101a9c:	e023      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101a9e:	2304      	movs	r3, #4
 8101aa0:	e021      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101aa2:	2303      	movs	r3, #3
 8101aa4:	e01f      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101aa6:	2302      	movs	r3, #2
 8101aa8:	e01d      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101aaa:	2301      	movs	r3, #1
 8101aac:	e01b      	b.n	8101ae6 <HAL_GPIO_Init+0x26a>
 8101aae:	bf00      	nop
 8101ab0:	580000c0 	.word	0x580000c0
 8101ab4:	58024400 	.word	0x58024400
 8101ab8:	58000400 	.word	0x58000400
 8101abc:	58020000 	.word	0x58020000
 8101ac0:	58020400 	.word	0x58020400
 8101ac4:	58020800 	.word	0x58020800
 8101ac8:	58020c00 	.word	0x58020c00
 8101acc:	58021000 	.word	0x58021000
 8101ad0:	58021400 	.word	0x58021400
 8101ad4:	58021800 	.word	0x58021800
 8101ad8:	58021c00 	.word	0x58021c00
 8101adc:	58022000 	.word	0x58022000
 8101ae0:	58022400 	.word	0x58022400
 8101ae4:	2300      	movs	r3, #0
 8101ae6:	69fa      	ldr	r2, [r7, #28]
 8101ae8:	f002 0203 	and.w	r2, r2, #3
 8101aec:	0092      	lsls	r2, r2, #2
 8101aee:	4093      	lsls	r3, r2
 8101af0:	69ba      	ldr	r2, [r7, #24]
 8101af2:	4313      	orrs	r3, r2
 8101af4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101af6:	4938      	ldr	r1, [pc, #224]	; (8101bd8 <HAL_GPIO_Init+0x35c>)
 8101af8:	69fb      	ldr	r3, [r7, #28]
 8101afa:	089b      	lsrs	r3, r3, #2
 8101afc:	3302      	adds	r3, #2
 8101afe:	69ba      	ldr	r2, [r7, #24]
 8101b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101b04:	697b      	ldr	r3, [r7, #20]
 8101b06:	681b      	ldr	r3, [r3, #0]
 8101b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b0a:	693b      	ldr	r3, [r7, #16]
 8101b0c:	43db      	mvns	r3, r3
 8101b0e:	69ba      	ldr	r2, [r7, #24]
 8101b10:	4013      	ands	r3, r2
 8101b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101b14:	683b      	ldr	r3, [r7, #0]
 8101b16:	685b      	ldr	r3, [r3, #4]
 8101b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101b1c:	2b00      	cmp	r3, #0
 8101b1e:	d003      	beq.n	8101b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101b20:	69ba      	ldr	r2, [r7, #24]
 8101b22:	693b      	ldr	r3, [r7, #16]
 8101b24:	4313      	orrs	r3, r2
 8101b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101b28:	697b      	ldr	r3, [r7, #20]
 8101b2a:	69ba      	ldr	r2, [r7, #24]
 8101b2c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101b2e:	697b      	ldr	r3, [r7, #20]
 8101b30:	685b      	ldr	r3, [r3, #4]
 8101b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b34:	693b      	ldr	r3, [r7, #16]
 8101b36:	43db      	mvns	r3, r3
 8101b38:	69ba      	ldr	r2, [r7, #24]
 8101b3a:	4013      	ands	r3, r2
 8101b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101b3e:	683b      	ldr	r3, [r7, #0]
 8101b40:	685b      	ldr	r3, [r3, #4]
 8101b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101b46:	2b00      	cmp	r3, #0
 8101b48:	d003      	beq.n	8101b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101b4a:	69ba      	ldr	r2, [r7, #24]
 8101b4c:	693b      	ldr	r3, [r7, #16]
 8101b4e:	4313      	orrs	r3, r2
 8101b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101b52:	697b      	ldr	r3, [r7, #20]
 8101b54:	69ba      	ldr	r2, [r7, #24]
 8101b56:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101b5c:	681b      	ldr	r3, [r3, #0]
 8101b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b60:	693b      	ldr	r3, [r7, #16]
 8101b62:	43db      	mvns	r3, r3
 8101b64:	69ba      	ldr	r2, [r7, #24]
 8101b66:	4013      	ands	r3, r2
 8101b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101b6a:	683b      	ldr	r3, [r7, #0]
 8101b6c:	685b      	ldr	r3, [r3, #4]
 8101b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101b72:	2b00      	cmp	r3, #0
 8101b74:	d003      	beq.n	8101b7e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8101b76:	69ba      	ldr	r2, [r7, #24]
 8101b78:	693b      	ldr	r3, [r7, #16]
 8101b7a:	4313      	orrs	r3, r2
 8101b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101b82:	69bb      	ldr	r3, [r7, #24]
 8101b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101b8a:	685b      	ldr	r3, [r3, #4]
 8101b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b8e:	693b      	ldr	r3, [r7, #16]
 8101b90:	43db      	mvns	r3, r3
 8101b92:	69ba      	ldr	r2, [r7, #24]
 8101b94:	4013      	ands	r3, r2
 8101b96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101b98:	683b      	ldr	r3, [r7, #0]
 8101b9a:	685b      	ldr	r3, [r3, #4]
 8101b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101ba0:	2b00      	cmp	r3, #0
 8101ba2:	d003      	beq.n	8101bac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101ba4:	69ba      	ldr	r2, [r7, #24]
 8101ba6:	693b      	ldr	r3, [r7, #16]
 8101ba8:	4313      	orrs	r3, r2
 8101baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101bb0:	69bb      	ldr	r3, [r7, #24]
 8101bb2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101bb4:	69fb      	ldr	r3, [r7, #28]
 8101bb6:	3301      	adds	r3, #1
 8101bb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101bba:	683b      	ldr	r3, [r7, #0]
 8101bbc:	681a      	ldr	r2, [r3, #0]
 8101bbe:	69fb      	ldr	r3, [r7, #28]
 8101bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8101bc4:	2b00      	cmp	r3, #0
 8101bc6:	f47f ae63 	bne.w	8101890 <HAL_GPIO_Init+0x14>
  }
}
 8101bca:	bf00      	nop
 8101bcc:	bf00      	nop
 8101bce:	3724      	adds	r7, #36	; 0x24
 8101bd0:	46bd      	mov	sp, r7
 8101bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd6:	4770      	bx	lr
 8101bd8:	58000400 	.word	0x58000400

08101bdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8101bdc:	b480      	push	{r7}
 8101bde:	b087      	sub	sp, #28
 8101be0:	af00      	add	r7, sp, #0
 8101be2:	6078      	str	r0, [r7, #4]
 8101be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101be6:	2300      	movs	r3, #0
 8101be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101bea:	4b75      	ldr	r3, [pc, #468]	; (8101dc0 <HAL_GPIO_DeInit+0x1e4>)
 8101bec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8101bee:	e0d9      	b.n	8101da4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8101bf0:	2201      	movs	r2, #1
 8101bf2:	697b      	ldr	r3, [r7, #20]
 8101bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8101bf8:	683a      	ldr	r2, [r7, #0]
 8101bfa:	4013      	ands	r3, r2
 8101bfc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8101bfe:	68fb      	ldr	r3, [r7, #12]
 8101c00:	2b00      	cmp	r3, #0
 8101c02:	f000 80cc 	beq.w	8101d9e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8101c06:	4a6f      	ldr	r2, [pc, #444]	; (8101dc4 <HAL_GPIO_DeInit+0x1e8>)
 8101c08:	697b      	ldr	r3, [r7, #20]
 8101c0a:	089b      	lsrs	r3, r3, #2
 8101c0c:	3302      	adds	r3, #2
 8101c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101c12:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8101c14:	697b      	ldr	r3, [r7, #20]
 8101c16:	f003 0303 	and.w	r3, r3, #3
 8101c1a:	009b      	lsls	r3, r3, #2
 8101c1c:	220f      	movs	r2, #15
 8101c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8101c22:	68ba      	ldr	r2, [r7, #8]
 8101c24:	4013      	ands	r3, r2
 8101c26:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8101c28:	687b      	ldr	r3, [r7, #4]
 8101c2a:	4a67      	ldr	r2, [pc, #412]	; (8101dc8 <HAL_GPIO_DeInit+0x1ec>)
 8101c2c:	4293      	cmp	r3, r2
 8101c2e:	d037      	beq.n	8101ca0 <HAL_GPIO_DeInit+0xc4>
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	4a66      	ldr	r2, [pc, #408]	; (8101dcc <HAL_GPIO_DeInit+0x1f0>)
 8101c34:	4293      	cmp	r3, r2
 8101c36:	d031      	beq.n	8101c9c <HAL_GPIO_DeInit+0xc0>
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	4a65      	ldr	r2, [pc, #404]	; (8101dd0 <HAL_GPIO_DeInit+0x1f4>)
 8101c3c:	4293      	cmp	r3, r2
 8101c3e:	d02b      	beq.n	8101c98 <HAL_GPIO_DeInit+0xbc>
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	4a64      	ldr	r2, [pc, #400]	; (8101dd4 <HAL_GPIO_DeInit+0x1f8>)
 8101c44:	4293      	cmp	r3, r2
 8101c46:	d025      	beq.n	8101c94 <HAL_GPIO_DeInit+0xb8>
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	4a63      	ldr	r2, [pc, #396]	; (8101dd8 <HAL_GPIO_DeInit+0x1fc>)
 8101c4c:	4293      	cmp	r3, r2
 8101c4e:	d01f      	beq.n	8101c90 <HAL_GPIO_DeInit+0xb4>
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	4a62      	ldr	r2, [pc, #392]	; (8101ddc <HAL_GPIO_DeInit+0x200>)
 8101c54:	4293      	cmp	r3, r2
 8101c56:	d019      	beq.n	8101c8c <HAL_GPIO_DeInit+0xb0>
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	4a61      	ldr	r2, [pc, #388]	; (8101de0 <HAL_GPIO_DeInit+0x204>)
 8101c5c:	4293      	cmp	r3, r2
 8101c5e:	d013      	beq.n	8101c88 <HAL_GPIO_DeInit+0xac>
 8101c60:	687b      	ldr	r3, [r7, #4]
 8101c62:	4a60      	ldr	r2, [pc, #384]	; (8101de4 <HAL_GPIO_DeInit+0x208>)
 8101c64:	4293      	cmp	r3, r2
 8101c66:	d00d      	beq.n	8101c84 <HAL_GPIO_DeInit+0xa8>
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	4a5f      	ldr	r2, [pc, #380]	; (8101de8 <HAL_GPIO_DeInit+0x20c>)
 8101c6c:	4293      	cmp	r3, r2
 8101c6e:	d007      	beq.n	8101c80 <HAL_GPIO_DeInit+0xa4>
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	4a5e      	ldr	r2, [pc, #376]	; (8101dec <HAL_GPIO_DeInit+0x210>)
 8101c74:	4293      	cmp	r3, r2
 8101c76:	d101      	bne.n	8101c7c <HAL_GPIO_DeInit+0xa0>
 8101c78:	2309      	movs	r3, #9
 8101c7a:	e012      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c7c:	230a      	movs	r3, #10
 8101c7e:	e010      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c80:	2308      	movs	r3, #8
 8101c82:	e00e      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c84:	2307      	movs	r3, #7
 8101c86:	e00c      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c88:	2306      	movs	r3, #6
 8101c8a:	e00a      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c8c:	2305      	movs	r3, #5
 8101c8e:	e008      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c90:	2304      	movs	r3, #4
 8101c92:	e006      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c94:	2303      	movs	r3, #3
 8101c96:	e004      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c98:	2302      	movs	r3, #2
 8101c9a:	e002      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101c9c:	2301      	movs	r3, #1
 8101c9e:	e000      	b.n	8101ca2 <HAL_GPIO_DeInit+0xc6>
 8101ca0:	2300      	movs	r3, #0
 8101ca2:	697a      	ldr	r2, [r7, #20]
 8101ca4:	f002 0203 	and.w	r2, r2, #3
 8101ca8:	0092      	lsls	r2, r2, #2
 8101caa:	4093      	lsls	r3, r2
 8101cac:	68ba      	ldr	r2, [r7, #8]
 8101cae:	429a      	cmp	r2, r3
 8101cb0:	d136      	bne.n	8101d20 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8101cb2:	693b      	ldr	r3, [r7, #16]
 8101cb4:	681a      	ldr	r2, [r3, #0]
 8101cb6:	68fb      	ldr	r3, [r7, #12]
 8101cb8:	43db      	mvns	r3, r3
 8101cba:	401a      	ands	r2, r3
 8101cbc:	693b      	ldr	r3, [r7, #16]
 8101cbe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8101cc0:	693b      	ldr	r3, [r7, #16]
 8101cc2:	685a      	ldr	r2, [r3, #4]
 8101cc4:	68fb      	ldr	r3, [r7, #12]
 8101cc6:	43db      	mvns	r3, r3
 8101cc8:	401a      	ands	r2, r3
 8101cca:	693b      	ldr	r3, [r7, #16]
 8101ccc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8101cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101cd2:	681a      	ldr	r2, [r3, #0]
 8101cd4:	68fb      	ldr	r3, [r7, #12]
 8101cd6:	43db      	mvns	r3, r3
 8101cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8101cdc:	4013      	ands	r3, r2
 8101cde:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8101ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101ce4:	685a      	ldr	r2, [r3, #4]
 8101ce6:	68fb      	ldr	r3, [r7, #12]
 8101ce8:	43db      	mvns	r3, r3
 8101cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8101cee:	4013      	ands	r3, r2
 8101cf0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8101cf2:	697b      	ldr	r3, [r7, #20]
 8101cf4:	f003 0303 	and.w	r3, r3, #3
 8101cf8:	009b      	lsls	r3, r3, #2
 8101cfa:	220f      	movs	r2, #15
 8101cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8101d00:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8101d02:	4a30      	ldr	r2, [pc, #192]	; (8101dc4 <HAL_GPIO_DeInit+0x1e8>)
 8101d04:	697b      	ldr	r3, [r7, #20]
 8101d06:	089b      	lsrs	r3, r3, #2
 8101d08:	3302      	adds	r3, #2
 8101d0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8101d0e:	68bb      	ldr	r3, [r7, #8]
 8101d10:	43da      	mvns	r2, r3
 8101d12:	482c      	ldr	r0, [pc, #176]	; (8101dc4 <HAL_GPIO_DeInit+0x1e8>)
 8101d14:	697b      	ldr	r3, [r7, #20]
 8101d16:	089b      	lsrs	r3, r3, #2
 8101d18:	400a      	ands	r2, r1
 8101d1a:	3302      	adds	r3, #2
 8101d1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	681a      	ldr	r2, [r3, #0]
 8101d24:	697b      	ldr	r3, [r7, #20]
 8101d26:	005b      	lsls	r3, r3, #1
 8101d28:	2103      	movs	r1, #3
 8101d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8101d2e:	431a      	orrs	r2, r3
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8101d34:	697b      	ldr	r3, [r7, #20]
 8101d36:	08da      	lsrs	r2, r3, #3
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	3208      	adds	r2, #8
 8101d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8101d40:	697b      	ldr	r3, [r7, #20]
 8101d42:	f003 0307 	and.w	r3, r3, #7
 8101d46:	009b      	lsls	r3, r3, #2
 8101d48:	220f      	movs	r2, #15
 8101d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d4e:	43db      	mvns	r3, r3
 8101d50:	697a      	ldr	r2, [r7, #20]
 8101d52:	08d2      	lsrs	r2, r2, #3
 8101d54:	4019      	ands	r1, r3
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	3208      	adds	r2, #8
 8101d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	68da      	ldr	r2, [r3, #12]
 8101d62:	697b      	ldr	r3, [r7, #20]
 8101d64:	005b      	lsls	r3, r3, #1
 8101d66:	2103      	movs	r1, #3
 8101d68:	fa01 f303 	lsl.w	r3, r1, r3
 8101d6c:	43db      	mvns	r3, r3
 8101d6e:	401a      	ands	r2, r3
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	685a      	ldr	r2, [r3, #4]
 8101d78:	2101      	movs	r1, #1
 8101d7a:	697b      	ldr	r3, [r7, #20]
 8101d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8101d80:	43db      	mvns	r3, r3
 8101d82:	401a      	ands	r2, r3
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	689a      	ldr	r2, [r3, #8]
 8101d8c:	697b      	ldr	r3, [r7, #20]
 8101d8e:	005b      	lsls	r3, r3, #1
 8101d90:	2103      	movs	r1, #3
 8101d92:	fa01 f303 	lsl.w	r3, r1, r3
 8101d96:	43db      	mvns	r3, r3
 8101d98:	401a      	ands	r2, r3
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	3301      	adds	r3, #1
 8101da2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8101da4:	683a      	ldr	r2, [r7, #0]
 8101da6:	697b      	ldr	r3, [r7, #20]
 8101da8:	fa22 f303 	lsr.w	r3, r2, r3
 8101dac:	2b00      	cmp	r3, #0
 8101dae:	f47f af1f 	bne.w	8101bf0 <HAL_GPIO_DeInit+0x14>
  }
}
 8101db2:	bf00      	nop
 8101db4:	bf00      	nop
 8101db6:	371c      	adds	r7, #28
 8101db8:	46bd      	mov	sp, r7
 8101dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dbe:	4770      	bx	lr
 8101dc0:	580000c0 	.word	0x580000c0
 8101dc4:	58000400 	.word	0x58000400
 8101dc8:	58020000 	.word	0x58020000
 8101dcc:	58020400 	.word	0x58020400
 8101dd0:	58020800 	.word	0x58020800
 8101dd4:	58020c00 	.word	0x58020c00
 8101dd8:	58021000 	.word	0x58021000
 8101ddc:	58021400 	.word	0x58021400
 8101de0:	58021800 	.word	0x58021800
 8101de4:	58021c00 	.word	0x58021c00
 8101de8:	58022000 	.word	0x58022000
 8101dec:	58022400 	.word	0x58022400

08101df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101df0:	b480      	push	{r7}
 8101df2:	b085      	sub	sp, #20
 8101df4:	af00      	add	r7, sp, #0
 8101df6:	6078      	str	r0, [r7, #4]
 8101df8:	460b      	mov	r3, r1
 8101dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	691a      	ldr	r2, [r3, #16]
 8101e00:	887b      	ldrh	r3, [r7, #2]
 8101e02:	4013      	ands	r3, r2
 8101e04:	2b00      	cmp	r3, #0
 8101e06:	d002      	beq.n	8101e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8101e08:	2301      	movs	r3, #1
 8101e0a:	73fb      	strb	r3, [r7, #15]
 8101e0c:	e001      	b.n	8101e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8101e0e:	2300      	movs	r3, #0
 8101e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8101e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8101e14:	4618      	mov	r0, r3
 8101e16:	3714      	adds	r7, #20
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1e:	4770      	bx	lr

08101e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101e20:	b480      	push	{r7}
 8101e22:	b083      	sub	sp, #12
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
 8101e28:	460b      	mov	r3, r1
 8101e2a:	807b      	strh	r3, [r7, #2]
 8101e2c:	4613      	mov	r3, r2
 8101e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101e30:	787b      	ldrb	r3, [r7, #1]
 8101e32:	2b00      	cmp	r3, #0
 8101e34:	d003      	beq.n	8101e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101e36:	887a      	ldrh	r2, [r7, #2]
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101e3c:	e003      	b.n	8101e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101e3e:	887b      	ldrh	r3, [r7, #2]
 8101e40:	041a      	lsls	r2, r3, #16
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	619a      	str	r2, [r3, #24]
}
 8101e46:	bf00      	nop
 8101e48:	370c      	adds	r7, #12
 8101e4a:	46bd      	mov	sp, r7
 8101e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e50:	4770      	bx	lr

08101e52 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8101e52:	b580      	push	{r7, lr}
 8101e54:	b082      	sub	sp, #8
 8101e56:	af00      	add	r7, sp, #0
 8101e58:	4603      	mov	r3, r0
 8101e5a:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8101e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101e60:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101e64:	88fb      	ldrh	r3, [r7, #6]
 8101e66:	4013      	ands	r3, r2
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d008      	beq.n	8101e7e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8101e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101e70:	88fb      	ldrh	r3, [r7, #6]
 8101e72:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8101e76:	88fb      	ldrh	r3, [r7, #6]
 8101e78:	4618      	mov	r0, r3
 8101e7a:	f7fe fcaf 	bl	81007dc <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101e7e:	bf00      	nop
 8101e80:	3708      	adds	r7, #8
 8101e82:	46bd      	mov	sp, r7
 8101e84:	bd80      	pop	{r7, pc}
	...

08101e88 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101e88:	b480      	push	{r7}
 8101e8a:	b083      	sub	sp, #12
 8101e8c:	af00      	add	r7, sp, #0
 8101e8e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101e90:	4b05      	ldr	r3, [pc, #20]	; (8101ea8 <HAL_HSEM_ActivateNotification+0x20>)
 8101e92:	681a      	ldr	r2, [r3, #0]
 8101e94:	4904      	ldr	r1, [pc, #16]	; (8101ea8 <HAL_HSEM_ActivateNotification+0x20>)
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	4313      	orrs	r3, r2
 8101e9a:	600b      	str	r3, [r1, #0]
#endif
}
 8101e9c:	bf00      	nop
 8101e9e:	370c      	adds	r7, #12
 8101ea0:	46bd      	mov	sp, r7
 8101ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea6:	4770      	bx	lr
 8101ea8:	58026510 	.word	0x58026510

08101eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101eac:	b580      	push	{r7, lr}
 8101eae:	b082      	sub	sp, #8
 8101eb0:	af00      	add	r7, sp, #0
 8101eb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	2b00      	cmp	r3, #0
 8101eb8:	d101      	bne.n	8101ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101eba:	2301      	movs	r3, #1
 8101ebc:	e081      	b.n	8101fc2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101ec4:	b2db      	uxtb	r3, r3
 8101ec6:	2b00      	cmp	r3, #0
 8101ec8:	d106      	bne.n	8101ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	2200      	movs	r2, #0
 8101ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101ed2:	6878      	ldr	r0, [r7, #4]
 8101ed4:	f7ff f808 	bl	8100ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	2224      	movs	r2, #36	; 0x24
 8101edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	681b      	ldr	r3, [r3, #0]
 8101ee4:	681a      	ldr	r2, [r3, #0]
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	f022 0201 	bic.w	r2, r2, #1
 8101eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	685a      	ldr	r2, [r3, #4]
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	681b      	ldr	r3, [r3, #0]
 8101ef8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8101efc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	689a      	ldr	r2, [r3, #8]
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101f0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	68db      	ldr	r3, [r3, #12]
 8101f12:	2b01      	cmp	r3, #1
 8101f14:	d107      	bne.n	8101f26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	689a      	ldr	r2, [r3, #8]
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	681b      	ldr	r3, [r3, #0]
 8101f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101f22:	609a      	str	r2, [r3, #8]
 8101f24:	e006      	b.n	8101f34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	689a      	ldr	r2, [r3, #8]
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8101f32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	68db      	ldr	r3, [r3, #12]
 8101f38:	2b02      	cmp	r3, #2
 8101f3a:	d104      	bne.n	8101f46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101f44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	681b      	ldr	r3, [r3, #0]
 8101f4a:	685b      	ldr	r3, [r3, #4]
 8101f4c:	687a      	ldr	r2, [r7, #4]
 8101f4e:	6812      	ldr	r2, [r2, #0]
 8101f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101f58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	681b      	ldr	r3, [r3, #0]
 8101f5e:	68da      	ldr	r2, [r3, #12]
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101f68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	691a      	ldr	r2, [r3, #16]
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	695b      	ldr	r3, [r3, #20]
 8101f72:	ea42 0103 	orr.w	r1, r2, r3
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	699b      	ldr	r3, [r3, #24]
 8101f7a:	021a      	lsls	r2, r3, #8
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	430a      	orrs	r2, r1
 8101f82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	69d9      	ldr	r1, [r3, #28]
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	6a1a      	ldr	r2, [r3, #32]
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	430a      	orrs	r2, r1
 8101f92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	681b      	ldr	r3, [r3, #0]
 8101f98:	681a      	ldr	r2, [r3, #0]
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	f042 0201 	orr.w	r2, r2, #1
 8101fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	2200      	movs	r2, #0
 8101fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	2220      	movs	r2, #32
 8101fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	2200      	movs	r2, #0
 8101fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101fc0:	2300      	movs	r3, #0
}
 8101fc2:	4618      	mov	r0, r3
 8101fc4:	3708      	adds	r7, #8
 8101fc6:	46bd      	mov	sp, r7
 8101fc8:	bd80      	pop	{r7, pc}

08101fca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101fca:	b480      	push	{r7}
 8101fcc:	b083      	sub	sp, #12
 8101fce:	af00      	add	r7, sp, #0
 8101fd0:	6078      	str	r0, [r7, #4]
 8101fd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101fda:	b2db      	uxtb	r3, r3
 8101fdc:	2b20      	cmp	r3, #32
 8101fde:	d138      	bne.n	8102052 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101fe6:	2b01      	cmp	r3, #1
 8101fe8:	d101      	bne.n	8101fee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101fea:	2302      	movs	r3, #2
 8101fec:	e032      	b.n	8102054 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	2201      	movs	r2, #1
 8101ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	2224      	movs	r2, #36	; 0x24
 8101ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	681a      	ldr	r2, [r3, #0]
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	f022 0201 	bic.w	r2, r2, #1
 810200c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	681a      	ldr	r2, [r3, #0]
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810201c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	6819      	ldr	r1, [r3, #0]
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	681b      	ldr	r3, [r3, #0]
 8102028:	683a      	ldr	r2, [r7, #0]
 810202a:	430a      	orrs	r2, r1
 810202c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	681b      	ldr	r3, [r3, #0]
 8102032:	681a      	ldr	r2, [r3, #0]
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	681b      	ldr	r3, [r3, #0]
 8102038:	f042 0201 	orr.w	r2, r2, #1
 810203c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	2220      	movs	r2, #32
 8102042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	2200      	movs	r2, #0
 810204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810204e:	2300      	movs	r3, #0
 8102050:	e000      	b.n	8102054 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102052:	2302      	movs	r3, #2
  }
}
 8102054:	4618      	mov	r0, r3
 8102056:	370c      	adds	r7, #12
 8102058:	46bd      	mov	sp, r7
 810205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810205e:	4770      	bx	lr

08102060 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102060:	b480      	push	{r7}
 8102062:	b085      	sub	sp, #20
 8102064:	af00      	add	r7, sp, #0
 8102066:	6078      	str	r0, [r7, #4]
 8102068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102070:	b2db      	uxtb	r3, r3
 8102072:	2b20      	cmp	r3, #32
 8102074:	d139      	bne.n	81020ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810207c:	2b01      	cmp	r3, #1
 810207e:	d101      	bne.n	8102084 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102080:	2302      	movs	r3, #2
 8102082:	e033      	b.n	81020ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	2201      	movs	r2, #1
 8102088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	2224      	movs	r2, #36	; 0x24
 8102090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	681a      	ldr	r2, [r3, #0]
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	681b      	ldr	r3, [r3, #0]
 810209e:	f022 0201 	bic.w	r2, r2, #1
 81020a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	681b      	ldr	r3, [r3, #0]
 81020a8:	681b      	ldr	r3, [r3, #0]
 81020aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81020ac:	68fb      	ldr	r3, [r7, #12]
 81020ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81020b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81020b4:	683b      	ldr	r3, [r7, #0]
 81020b6:	021b      	lsls	r3, r3, #8
 81020b8:	68fa      	ldr	r2, [r7, #12]
 81020ba:	4313      	orrs	r3, r2
 81020bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	681b      	ldr	r3, [r3, #0]
 81020c2:	68fa      	ldr	r2, [r7, #12]
 81020c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	681a      	ldr	r2, [r3, #0]
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	f042 0201 	orr.w	r2, r2, #1
 81020d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	2220      	movs	r2, #32
 81020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	2200      	movs	r2, #0
 81020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81020e6:	2300      	movs	r3, #0
 81020e8:	e000      	b.n	81020ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81020ea:	2302      	movs	r3, #2
  }
}
 81020ec:	4618      	mov	r0, r3
 81020ee:	3714      	adds	r7, #20
 81020f0:	46bd      	mov	sp, r7
 81020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020f6:	4770      	bx	lr

081020f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 81020f8:	b580      	push	{r7, lr}
 81020fa:	b084      	sub	sp, #16
 81020fc:	af00      	add	r7, sp, #0
 81020fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	2b00      	cmp	r3, #0
 8102104:	d101      	bne.n	810210a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8102106:	2301      	movs	r3, #1
 8102108:	e0bf      	b.n	810228a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8102110:	b2db      	uxtb	r3, r3
 8102112:	2b00      	cmp	r3, #0
 8102114:	d106      	bne.n	8102124 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	2200      	movs	r2, #0
 810211a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 810211e:	6878      	ldr	r0, [r7, #4]
 8102120:	f7fe ff46 	bl	8100fb0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	2202      	movs	r2, #2
 8102128:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	699a      	ldr	r2, [r3, #24]
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	681b      	ldr	r3, [r3, #0]
 8102136:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 810213a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	6999      	ldr	r1, [r3, #24]
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	685a      	ldr	r2, [r3, #4]
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	689b      	ldr	r3, [r3, #8]
 810214a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 810214c:	687b      	ldr	r3, [r7, #4]
 810214e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8102150:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8102152:	687b      	ldr	r3, [r7, #4]
 8102154:	691b      	ldr	r3, [r3, #16]
 8102156:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	681b      	ldr	r3, [r3, #0]
 810215c:	430a      	orrs	r2, r1
 810215e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	6899      	ldr	r1, [r3, #8]
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	681a      	ldr	r2, [r3, #0]
 810216a:	4b4a      	ldr	r3, [pc, #296]	; (8102294 <HAL_LTDC_Init+0x19c>)
 810216c:	400b      	ands	r3, r1
 810216e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	695b      	ldr	r3, [r3, #20]
 8102174:	041b      	lsls	r3, r3, #16
 8102176:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	6899      	ldr	r1, [r3, #8]
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	699a      	ldr	r2, [r3, #24]
 8102182:	68fb      	ldr	r3, [r7, #12]
 8102184:	431a      	orrs	r2, r3
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	430a      	orrs	r2, r1
 810218c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 810218e:	687b      	ldr	r3, [r7, #4]
 8102190:	681b      	ldr	r3, [r3, #0]
 8102192:	68d9      	ldr	r1, [r3, #12]
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	681a      	ldr	r2, [r3, #0]
 8102198:	4b3e      	ldr	r3, [pc, #248]	; (8102294 <HAL_LTDC_Init+0x19c>)
 810219a:	400b      	ands	r3, r1
 810219c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	69db      	ldr	r3, [r3, #28]
 81021a2:	041b      	lsls	r3, r3, #16
 81021a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 81021a6:	687b      	ldr	r3, [r7, #4]
 81021a8:	681b      	ldr	r3, [r3, #0]
 81021aa:	68d9      	ldr	r1, [r3, #12]
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	6a1a      	ldr	r2, [r3, #32]
 81021b0:	68fb      	ldr	r3, [r7, #12]
 81021b2:	431a      	orrs	r2, r3
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	430a      	orrs	r2, r1
 81021ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	6919      	ldr	r1, [r3, #16]
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681a      	ldr	r2, [r3, #0]
 81021c6:	4b33      	ldr	r3, [pc, #204]	; (8102294 <HAL_LTDC_Init+0x19c>)
 81021c8:	400b      	ands	r3, r1
 81021ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81021d0:	041b      	lsls	r3, r3, #16
 81021d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	6919      	ldr	r1, [r3, #16]
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81021de:	68fb      	ldr	r3, [r7, #12]
 81021e0:	431a      	orrs	r2, r3
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	681b      	ldr	r3, [r3, #0]
 81021e6:	430a      	orrs	r2, r1
 81021e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	6959      	ldr	r1, [r3, #20]
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	681a      	ldr	r2, [r3, #0]
 81021f4:	4b27      	ldr	r3, [pc, #156]	; (8102294 <HAL_LTDC_Init+0x19c>)
 81021f6:	400b      	ands	r3, r1
 81021f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021fe:	041b      	lsls	r3, r3, #16
 8102200:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	681b      	ldr	r3, [r3, #0]
 8102206:	6959      	ldr	r1, [r3, #20]
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810220c:	68fb      	ldr	r3, [r7, #12]
 810220e:	431a      	orrs	r2, r3
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	430a      	orrs	r2, r1
 8102216:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810221e:	021b      	lsls	r3, r3, #8
 8102220:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8102228:	041b      	lsls	r3, r3, #16
 810222a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 810223a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8102242:	68ba      	ldr	r2, [r7, #8]
 8102244:	68fb      	ldr	r3, [r7, #12]
 8102246:	4313      	orrs	r3, r2
 8102248:	687a      	ldr	r2, [r7, #4]
 810224a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 810224e:	431a      	orrs	r2, r3
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	430a      	orrs	r2, r1
 8102256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	681b      	ldr	r3, [r3, #0]
 8102262:	f042 0206 	orr.w	r2, r2, #6
 8102266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8102268:	687b      	ldr	r3, [r7, #4]
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	699a      	ldr	r2, [r3, #24]
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	f042 0201 	orr.w	r2, r2, #1
 8102276:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	2200      	movs	r2, #0
 810227c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	2201      	movs	r2, #1
 8102284:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8102288:	2300      	movs	r3, #0
}
 810228a:	4618      	mov	r0, r3
 810228c:	3710      	adds	r7, #16
 810228e:	46bd      	mov	sp, r7
 8102290:	bd80      	pop	{r7, pc}
 8102292:	bf00      	nop
 8102294:	f000f800 	.word	0xf000f800

08102298 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8102298:	b5b0      	push	{r4, r5, r7, lr}
 810229a:	b084      	sub	sp, #16
 810229c:	af00      	add	r7, sp, #0
 810229e:	60f8      	str	r0, [r7, #12]
 81022a0:	60b9      	str	r1, [r7, #8]
 81022a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 81022a4:	68fb      	ldr	r3, [r7, #12]
 81022a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 81022aa:	2b01      	cmp	r3, #1
 81022ac:	d101      	bne.n	81022b2 <HAL_LTDC_ConfigLayer+0x1a>
 81022ae:	2302      	movs	r3, #2
 81022b0:	e02c      	b.n	810230c <HAL_LTDC_ConfigLayer+0x74>
 81022b2:	68fb      	ldr	r3, [r7, #12]
 81022b4:	2201      	movs	r2, #1
 81022b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 81022ba:	68fb      	ldr	r3, [r7, #12]
 81022bc:	2202      	movs	r2, #2
 81022be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 81022c2:	68fa      	ldr	r2, [r7, #12]
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	2134      	movs	r1, #52	; 0x34
 81022c8:	fb01 f303 	mul.w	r3, r1, r3
 81022cc:	4413      	add	r3, r2
 81022ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 81022d2:	68bb      	ldr	r3, [r7, #8]
 81022d4:	4614      	mov	r4, r2
 81022d6:	461d      	mov	r5, r3
 81022d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81022da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81022dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81022de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81022e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81022e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81022e4:	682b      	ldr	r3, [r5, #0]
 81022e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 81022e8:	687a      	ldr	r2, [r7, #4]
 81022ea:	68b9      	ldr	r1, [r7, #8]
 81022ec:	68f8      	ldr	r0, [r7, #12]
 81022ee:	f000 f811 	bl	8102314 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 81022f2:	68fb      	ldr	r3, [r7, #12]
 81022f4:	681b      	ldr	r3, [r3, #0]
 81022f6:	2201      	movs	r2, #1
 81022f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 81022fa:	68fb      	ldr	r3, [r7, #12]
 81022fc:	2201      	movs	r2, #1
 81022fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8102302:	68fb      	ldr	r3, [r7, #12]
 8102304:	2200      	movs	r2, #0
 8102306:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 810230a:	2300      	movs	r3, #0
}
 810230c:	4618      	mov	r0, r3
 810230e:	3710      	adds	r7, #16
 8102310:	46bd      	mov	sp, r7
 8102312:	bdb0      	pop	{r4, r5, r7, pc}

08102314 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8102314:	b480      	push	{r7}
 8102316:	b089      	sub	sp, #36	; 0x24
 8102318:	af00      	add	r7, sp, #0
 810231a:	60f8      	str	r0, [r7, #12]
 810231c:	60b9      	str	r1, [r7, #8]
 810231e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8102320:	68bb      	ldr	r3, [r7, #8]
 8102322:	685a      	ldr	r2, [r3, #4]
 8102324:	68fb      	ldr	r3, [r7, #12]
 8102326:	681b      	ldr	r3, [r3, #0]
 8102328:	68db      	ldr	r3, [r3, #12]
 810232a:	0c1b      	lsrs	r3, r3, #16
 810232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102330:	4413      	add	r3, r2
 8102332:	041b      	lsls	r3, r3, #16
 8102334:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8102336:	68fb      	ldr	r3, [r7, #12]
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	461a      	mov	r2, r3
 810233c:	687b      	ldr	r3, [r7, #4]
 810233e:	01db      	lsls	r3, r3, #7
 8102340:	4413      	add	r3, r2
 8102342:	3384      	adds	r3, #132	; 0x84
 8102344:	685b      	ldr	r3, [r3, #4]
 8102346:	68fa      	ldr	r2, [r7, #12]
 8102348:	6812      	ldr	r2, [r2, #0]
 810234a:	4611      	mov	r1, r2
 810234c:	687a      	ldr	r2, [r7, #4]
 810234e:	01d2      	lsls	r2, r2, #7
 8102350:	440a      	add	r2, r1
 8102352:	3284      	adds	r2, #132	; 0x84
 8102354:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8102358:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 810235a:	68bb      	ldr	r3, [r7, #8]
 810235c:	681a      	ldr	r2, [r3, #0]
 810235e:	68fb      	ldr	r3, [r7, #12]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	68db      	ldr	r3, [r3, #12]
 8102364:	0c1b      	lsrs	r3, r3, #16
 8102366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810236a:	4413      	add	r3, r2
 810236c:	1c5a      	adds	r2, r3, #1
 810236e:	68fb      	ldr	r3, [r7, #12]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	4619      	mov	r1, r3
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	01db      	lsls	r3, r3, #7
 8102378:	440b      	add	r3, r1
 810237a:	3384      	adds	r3, #132	; 0x84
 810237c:	4619      	mov	r1, r3
 810237e:	69fb      	ldr	r3, [r7, #28]
 8102380:	4313      	orrs	r3, r2
 8102382:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8102384:	68bb      	ldr	r3, [r7, #8]
 8102386:	68da      	ldr	r2, [r3, #12]
 8102388:	68fb      	ldr	r3, [r7, #12]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	68db      	ldr	r3, [r3, #12]
 810238e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8102392:	4413      	add	r3, r2
 8102394:	041b      	lsls	r3, r3, #16
 8102396:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8102398:	68fb      	ldr	r3, [r7, #12]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	461a      	mov	r2, r3
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	01db      	lsls	r3, r3, #7
 81023a2:	4413      	add	r3, r2
 81023a4:	3384      	adds	r3, #132	; 0x84
 81023a6:	689b      	ldr	r3, [r3, #8]
 81023a8:	68fa      	ldr	r2, [r7, #12]
 81023aa:	6812      	ldr	r2, [r2, #0]
 81023ac:	4611      	mov	r1, r2
 81023ae:	687a      	ldr	r2, [r7, #4]
 81023b0:	01d2      	lsls	r2, r2, #7
 81023b2:	440a      	add	r2, r1
 81023b4:	3284      	adds	r2, #132	; 0x84
 81023b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 81023ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 81023bc:	68bb      	ldr	r3, [r7, #8]
 81023be:	689a      	ldr	r2, [r3, #8]
 81023c0:	68fb      	ldr	r3, [r7, #12]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	68db      	ldr	r3, [r3, #12]
 81023c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 81023ca:	4413      	add	r3, r2
 81023cc:	1c5a      	adds	r2, r3, #1
 81023ce:	68fb      	ldr	r3, [r7, #12]
 81023d0:	681b      	ldr	r3, [r3, #0]
 81023d2:	4619      	mov	r1, r3
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	01db      	lsls	r3, r3, #7
 81023d8:	440b      	add	r3, r1
 81023da:	3384      	adds	r3, #132	; 0x84
 81023dc:	4619      	mov	r1, r3
 81023de:	69fb      	ldr	r3, [r7, #28]
 81023e0:	4313      	orrs	r3, r2
 81023e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 81023e4:	68fb      	ldr	r3, [r7, #12]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	461a      	mov	r2, r3
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	01db      	lsls	r3, r3, #7
 81023ee:	4413      	add	r3, r2
 81023f0:	3384      	adds	r3, #132	; 0x84
 81023f2:	691b      	ldr	r3, [r3, #16]
 81023f4:	68fa      	ldr	r2, [r7, #12]
 81023f6:	6812      	ldr	r2, [r2, #0]
 81023f8:	4611      	mov	r1, r2
 81023fa:	687a      	ldr	r2, [r7, #4]
 81023fc:	01d2      	lsls	r2, r2, #7
 81023fe:	440a      	add	r2, r1
 8102400:	3284      	adds	r2, #132	; 0x84
 8102402:	f023 0307 	bic.w	r3, r3, #7
 8102406:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8102408:	68fb      	ldr	r3, [r7, #12]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	461a      	mov	r2, r3
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	01db      	lsls	r3, r3, #7
 8102412:	4413      	add	r3, r2
 8102414:	3384      	adds	r3, #132	; 0x84
 8102416:	461a      	mov	r2, r3
 8102418:	68bb      	ldr	r3, [r7, #8]
 810241a:	691b      	ldr	r3, [r3, #16]
 810241c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 810241e:	68bb      	ldr	r3, [r7, #8]
 8102420:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8102424:	021b      	lsls	r3, r3, #8
 8102426:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8102428:	68bb      	ldr	r3, [r7, #8]
 810242a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 810242e:	041b      	lsls	r3, r3, #16
 8102430:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8102432:	68bb      	ldr	r3, [r7, #8]
 8102434:	699b      	ldr	r3, [r3, #24]
 8102436:	061b      	lsls	r3, r3, #24
 8102438:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 810243a:	68fb      	ldr	r3, [r7, #12]
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	461a      	mov	r2, r3
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	01db      	lsls	r3, r3, #7
 8102444:	4413      	add	r3, r2
 8102446:	3384      	adds	r3, #132	; 0x84
 8102448:	699b      	ldr	r3, [r3, #24]
 810244a:	68fb      	ldr	r3, [r7, #12]
 810244c:	681b      	ldr	r3, [r3, #0]
 810244e:	461a      	mov	r2, r3
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	01db      	lsls	r3, r3, #7
 8102454:	4413      	add	r3, r2
 8102456:	3384      	adds	r3, #132	; 0x84
 8102458:	461a      	mov	r2, r3
 810245a:	2300      	movs	r3, #0
 810245c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 810245e:	68bb      	ldr	r3, [r7, #8]
 8102460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8102464:	461a      	mov	r2, r3
 8102466:	69fb      	ldr	r3, [r7, #28]
 8102468:	431a      	orrs	r2, r3
 810246a:	69bb      	ldr	r3, [r7, #24]
 810246c:	431a      	orrs	r2, r3
 810246e:	68fb      	ldr	r3, [r7, #12]
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	4619      	mov	r1, r3
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	01db      	lsls	r3, r3, #7
 8102478:	440b      	add	r3, r1
 810247a:	3384      	adds	r3, #132	; 0x84
 810247c:	4619      	mov	r1, r3
 810247e:	697b      	ldr	r3, [r7, #20]
 8102480:	4313      	orrs	r3, r2
 8102482:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8102484:	68fb      	ldr	r3, [r7, #12]
 8102486:	681b      	ldr	r3, [r3, #0]
 8102488:	461a      	mov	r2, r3
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	01db      	lsls	r3, r3, #7
 810248e:	4413      	add	r3, r2
 8102490:	3384      	adds	r3, #132	; 0x84
 8102492:	695b      	ldr	r3, [r3, #20]
 8102494:	68fa      	ldr	r2, [r7, #12]
 8102496:	6812      	ldr	r2, [r2, #0]
 8102498:	4611      	mov	r1, r2
 810249a:	687a      	ldr	r2, [r7, #4]
 810249c:	01d2      	lsls	r2, r2, #7
 810249e:	440a      	add	r2, r1
 81024a0:	3284      	adds	r2, #132	; 0x84
 81024a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 81024a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	461a      	mov	r2, r3
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	01db      	lsls	r3, r3, #7
 81024b2:	4413      	add	r3, r2
 81024b4:	3384      	adds	r3, #132	; 0x84
 81024b6:	461a      	mov	r2, r3
 81024b8:	68bb      	ldr	r3, [r7, #8]
 81024ba:	695b      	ldr	r3, [r3, #20]
 81024bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 81024be:	68fb      	ldr	r3, [r7, #12]
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	461a      	mov	r2, r3
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	01db      	lsls	r3, r3, #7
 81024c8:	4413      	add	r3, r2
 81024ca:	3384      	adds	r3, #132	; 0x84
 81024cc:	69db      	ldr	r3, [r3, #28]
 81024ce:	68fa      	ldr	r2, [r7, #12]
 81024d0:	6812      	ldr	r2, [r2, #0]
 81024d2:	4611      	mov	r1, r2
 81024d4:	687a      	ldr	r2, [r7, #4]
 81024d6:	01d2      	lsls	r2, r2, #7
 81024d8:	440a      	add	r2, r1
 81024da:	3284      	adds	r2, #132	; 0x84
 81024dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 81024e0:	f023 0307 	bic.w	r3, r3, #7
 81024e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 81024e6:	68bb      	ldr	r3, [r7, #8]
 81024e8:	69da      	ldr	r2, [r3, #28]
 81024ea:	68bb      	ldr	r3, [r7, #8]
 81024ec:	6a1b      	ldr	r3, [r3, #32]
 81024ee:	68f9      	ldr	r1, [r7, #12]
 81024f0:	6809      	ldr	r1, [r1, #0]
 81024f2:	4608      	mov	r0, r1
 81024f4:	6879      	ldr	r1, [r7, #4]
 81024f6:	01c9      	lsls	r1, r1, #7
 81024f8:	4401      	add	r1, r0
 81024fa:	3184      	adds	r1, #132	; 0x84
 81024fc:	4313      	orrs	r3, r2
 81024fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8102500:	68fb      	ldr	r3, [r7, #12]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	461a      	mov	r2, r3
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	01db      	lsls	r3, r3, #7
 810250a:	4413      	add	r3, r2
 810250c:	3384      	adds	r3, #132	; 0x84
 810250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	461a      	mov	r2, r3
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	01db      	lsls	r3, r3, #7
 810251a:	4413      	add	r3, r2
 810251c:	3384      	adds	r3, #132	; 0x84
 810251e:	461a      	mov	r2, r3
 8102520:	2300      	movs	r3, #0
 8102522:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8102524:	68fb      	ldr	r3, [r7, #12]
 8102526:	681b      	ldr	r3, [r3, #0]
 8102528:	461a      	mov	r2, r3
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	01db      	lsls	r3, r3, #7
 810252e:	4413      	add	r3, r2
 8102530:	3384      	adds	r3, #132	; 0x84
 8102532:	461a      	mov	r2, r3
 8102534:	68bb      	ldr	r3, [r7, #8]
 8102536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102538:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 810253a:	68bb      	ldr	r3, [r7, #8]
 810253c:	691b      	ldr	r3, [r3, #16]
 810253e:	2b00      	cmp	r3, #0
 8102540:	d102      	bne.n	8102548 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8102542:	2304      	movs	r3, #4
 8102544:	61fb      	str	r3, [r7, #28]
 8102546:	e01b      	b.n	8102580 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8102548:	68bb      	ldr	r3, [r7, #8]
 810254a:	691b      	ldr	r3, [r3, #16]
 810254c:	2b01      	cmp	r3, #1
 810254e:	d102      	bne.n	8102556 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8102550:	2303      	movs	r3, #3
 8102552:	61fb      	str	r3, [r7, #28]
 8102554:	e014      	b.n	8102580 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8102556:	68bb      	ldr	r3, [r7, #8]
 8102558:	691b      	ldr	r3, [r3, #16]
 810255a:	2b04      	cmp	r3, #4
 810255c:	d00b      	beq.n	8102576 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 810255e:	68bb      	ldr	r3, [r7, #8]
 8102560:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8102562:	2b02      	cmp	r3, #2
 8102564:	d007      	beq.n	8102576 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8102566:	68bb      	ldr	r3, [r7, #8]
 8102568:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 810256a:	2b03      	cmp	r3, #3
 810256c:	d003      	beq.n	8102576 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 810256e:	68bb      	ldr	r3, [r7, #8]
 8102570:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8102572:	2b07      	cmp	r3, #7
 8102574:	d102      	bne.n	810257c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8102576:	2302      	movs	r3, #2
 8102578:	61fb      	str	r3, [r7, #28]
 810257a:	e001      	b.n	8102580 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 810257c:	2301      	movs	r3, #1
 810257e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8102580:	68fb      	ldr	r3, [r7, #12]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	461a      	mov	r2, r3
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	01db      	lsls	r3, r3, #7
 810258a:	4413      	add	r3, r2
 810258c:	3384      	adds	r3, #132	; 0x84
 810258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102590:	68fa      	ldr	r2, [r7, #12]
 8102592:	6812      	ldr	r2, [r2, #0]
 8102594:	4611      	mov	r1, r2
 8102596:	687a      	ldr	r2, [r7, #4]
 8102598:	01d2      	lsls	r2, r2, #7
 810259a:	440a      	add	r2, r1
 810259c:	3284      	adds	r2, #132	; 0x84
 810259e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 81025a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 81025a4:	68bb      	ldr	r3, [r7, #8]
 81025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025a8:	69fa      	ldr	r2, [r7, #28]
 81025aa:	fb02 f303 	mul.w	r3, r2, r3
 81025ae:	041a      	lsls	r2, r3, #16
 81025b0:	68bb      	ldr	r3, [r7, #8]
 81025b2:	6859      	ldr	r1, [r3, #4]
 81025b4:	68bb      	ldr	r3, [r7, #8]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	1acb      	subs	r3, r1, r3
 81025ba:	69f9      	ldr	r1, [r7, #28]
 81025bc:	fb01 f303 	mul.w	r3, r1, r3
 81025c0:	3307      	adds	r3, #7
 81025c2:	68f9      	ldr	r1, [r7, #12]
 81025c4:	6809      	ldr	r1, [r1, #0]
 81025c6:	4608      	mov	r0, r1
 81025c8:	6879      	ldr	r1, [r7, #4]
 81025ca:	01c9      	lsls	r1, r1, #7
 81025cc:	4401      	add	r1, r0
 81025ce:	3184      	adds	r1, #132	; 0x84
 81025d0:	4313      	orrs	r3, r2
 81025d2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 81025d4:	68fb      	ldr	r3, [r7, #12]
 81025d6:	681b      	ldr	r3, [r3, #0]
 81025d8:	461a      	mov	r2, r3
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	01db      	lsls	r3, r3, #7
 81025de:	4413      	add	r3, r2
 81025e0:	3384      	adds	r3, #132	; 0x84
 81025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81025e4:	68fa      	ldr	r2, [r7, #12]
 81025e6:	6812      	ldr	r2, [r2, #0]
 81025e8:	4611      	mov	r1, r2
 81025ea:	687a      	ldr	r2, [r7, #4]
 81025ec:	01d2      	lsls	r2, r2, #7
 81025ee:	440a      	add	r2, r1
 81025f0:	3284      	adds	r2, #132	; 0x84
 81025f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 81025f6:	f023 0307 	bic.w	r3, r3, #7
 81025fa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 81025fc:	68fb      	ldr	r3, [r7, #12]
 81025fe:	681b      	ldr	r3, [r3, #0]
 8102600:	461a      	mov	r2, r3
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	01db      	lsls	r3, r3, #7
 8102606:	4413      	add	r3, r2
 8102608:	3384      	adds	r3, #132	; 0x84
 810260a:	461a      	mov	r2, r3
 810260c:	68bb      	ldr	r3, [r7, #8]
 810260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102610:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8102612:	68fb      	ldr	r3, [r7, #12]
 8102614:	681b      	ldr	r3, [r3, #0]
 8102616:	461a      	mov	r2, r3
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	01db      	lsls	r3, r3, #7
 810261c:	4413      	add	r3, r2
 810261e:	3384      	adds	r3, #132	; 0x84
 8102620:	681b      	ldr	r3, [r3, #0]
 8102622:	68fa      	ldr	r2, [r7, #12]
 8102624:	6812      	ldr	r2, [r2, #0]
 8102626:	4611      	mov	r1, r2
 8102628:	687a      	ldr	r2, [r7, #4]
 810262a:	01d2      	lsls	r2, r2, #7
 810262c:	440a      	add	r2, r1
 810262e:	3284      	adds	r2, #132	; 0x84
 8102630:	f043 0301 	orr.w	r3, r3, #1
 8102634:	6013      	str	r3, [r2, #0]
}
 8102636:	bf00      	nop
 8102638:	3724      	adds	r7, #36	; 0x24
 810263a:	46bd      	mov	sp, r7
 810263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102640:	4770      	bx	lr
	...

08102644 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102644:	b580      	push	{r7, lr}
 8102646:	b084      	sub	sp, #16
 8102648:	af00      	add	r7, sp, #0
 810264a:	60f8      	str	r0, [r7, #12]
 810264c:	460b      	mov	r3, r1
 810264e:	607a      	str	r2, [r7, #4]
 8102650:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102652:	4b37      	ldr	r3, [pc, #220]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	f023 0201 	bic.w	r2, r3, #1
 810265a:	4935      	ldr	r1, [pc, #212]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 810265c:	68fb      	ldr	r3, [r7, #12]
 810265e:	4313      	orrs	r3, r2
 8102660:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	2b00      	cmp	r3, #0
 8102666:	d123      	bne.n	81026b0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102668:	f7ff f8f4 	bl	8101854 <HAL_GetCurrentCPUID>
 810266c:	4603      	mov	r3, r0
 810266e:	2b03      	cmp	r3, #3
 8102670:	d158      	bne.n	8102724 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102672:	4b2f      	ldr	r3, [pc, #188]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102674:	691b      	ldr	r3, [r3, #16]
 8102676:	4a2e      	ldr	r2, [pc, #184]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102678:	f023 0301 	bic.w	r3, r3, #1
 810267c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810267e:	4b2d      	ldr	r3, [pc, #180]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102680:	691b      	ldr	r3, [r3, #16]
 8102682:	4a2c      	ldr	r2, [pc, #176]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102684:	f043 0304 	orr.w	r3, r3, #4
 8102688:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810268a:	f3bf 8f4f 	dsb	sy
}
 810268e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102690:	f3bf 8f6f 	isb	sy
}
 8102694:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102696:	7afb      	ldrb	r3, [r7, #11]
 8102698:	2b01      	cmp	r3, #1
 810269a:	d101      	bne.n	81026a0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810269c:	bf30      	wfi
 810269e:	e000      	b.n	81026a2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81026a0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026a2:	4b24      	ldr	r3, [pc, #144]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026a4:	691b      	ldr	r3, [r3, #16]
 81026a6:	4a23      	ldr	r2, [pc, #140]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026a8:	f023 0304 	bic.w	r3, r3, #4
 81026ac:	6113      	str	r3, [r2, #16]
 81026ae:	e03c      	b.n	810272a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	2b01      	cmp	r3, #1
 81026b4:	d123      	bne.n	81026fe <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81026b6:	f7ff f8cd 	bl	8101854 <HAL_GetCurrentCPUID>
 81026ba:	4603      	mov	r3, r0
 81026bc:	2b01      	cmp	r3, #1
 81026be:	d133      	bne.n	8102728 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81026c0:	4b1b      	ldr	r3, [pc, #108]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026c2:	695b      	ldr	r3, [r3, #20]
 81026c4:	4a1a      	ldr	r2, [pc, #104]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 81026c6:	f023 0302 	bic.w	r3, r3, #2
 81026ca:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026cc:	4b19      	ldr	r3, [pc, #100]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026ce:	691b      	ldr	r3, [r3, #16]
 81026d0:	4a18      	ldr	r2, [pc, #96]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026d2:	f043 0304 	orr.w	r3, r3, #4
 81026d6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81026d8:	f3bf 8f4f 	dsb	sy
}
 81026dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81026de:	f3bf 8f6f 	isb	sy
}
 81026e2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81026e4:	7afb      	ldrb	r3, [r7, #11]
 81026e6:	2b01      	cmp	r3, #1
 81026e8:	d101      	bne.n	81026ee <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81026ea:	bf30      	wfi
 81026ec:	e000      	b.n	81026f0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81026ee:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026f0:	4b10      	ldr	r3, [pc, #64]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026f2:	691b      	ldr	r3, [r3, #16]
 81026f4:	4a0f      	ldr	r2, [pc, #60]	; (8102734 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81026f6:	f023 0304 	bic.w	r3, r3, #4
 81026fa:	6113      	str	r3, [r2, #16]
 81026fc:	e015      	b.n	810272a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81026fe:	f7ff f8a9 	bl	8101854 <HAL_GetCurrentCPUID>
 8102702:	4603      	mov	r3, r0
 8102704:	2b03      	cmp	r3, #3
 8102706:	d106      	bne.n	8102716 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102708:	4b09      	ldr	r3, [pc, #36]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 810270a:	691b      	ldr	r3, [r3, #16]
 810270c:	4a08      	ldr	r2, [pc, #32]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 810270e:	f023 0304 	bic.w	r3, r3, #4
 8102712:	6113      	str	r3, [r2, #16]
 8102714:	e009      	b.n	810272a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102716:	4b06      	ldr	r3, [pc, #24]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102718:	695b      	ldr	r3, [r3, #20]
 810271a:	4a05      	ldr	r2, [pc, #20]	; (8102730 <HAL_PWREx_EnterSTOPMode+0xec>)
 810271c:	f023 0304 	bic.w	r3, r3, #4
 8102720:	6153      	str	r3, [r2, #20]
 8102722:	e002      	b.n	810272a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102724:	bf00      	nop
 8102726:	e000      	b.n	810272a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102728:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810272a:	3710      	adds	r7, #16
 810272c:	46bd      	mov	sp, r7
 810272e:	bd80      	pop	{r7, pc}
 8102730:	58024800 	.word	0x58024800
 8102734:	e000ed00 	.word	0xe000ed00

08102738 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102738:	b580      	push	{r7, lr}
 810273a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810273c:	f7ff f88a 	bl	8101854 <HAL_GetCurrentCPUID>
 8102740:	4603      	mov	r3, r0
 8102742:	2b03      	cmp	r3, #3
 8102744:	d101      	bne.n	810274a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102746:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102748:	e001      	b.n	810274e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810274a:	bf40      	sev
    __WFE ();
 810274c:	bf20      	wfe
}
 810274e:	bf00      	nop
 8102750:	bd80      	pop	{r7, pc}
	...

08102754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102754:	b480      	push	{r7}
 8102756:	b089      	sub	sp, #36	; 0x24
 8102758:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810275a:	4bb3      	ldr	r3, [pc, #716]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810275c:	691b      	ldr	r3, [r3, #16]
 810275e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102762:	2b18      	cmp	r3, #24
 8102764:	f200 8155 	bhi.w	8102a12 <HAL_RCC_GetSysClockFreq+0x2be>
 8102768:	a201      	add	r2, pc, #4	; (adr r2, 8102770 <HAL_RCC_GetSysClockFreq+0x1c>)
 810276a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810276e:	bf00      	nop
 8102770:	081027d5 	.word	0x081027d5
 8102774:	08102a13 	.word	0x08102a13
 8102778:	08102a13 	.word	0x08102a13
 810277c:	08102a13 	.word	0x08102a13
 8102780:	08102a13 	.word	0x08102a13
 8102784:	08102a13 	.word	0x08102a13
 8102788:	08102a13 	.word	0x08102a13
 810278c:	08102a13 	.word	0x08102a13
 8102790:	081027fb 	.word	0x081027fb
 8102794:	08102a13 	.word	0x08102a13
 8102798:	08102a13 	.word	0x08102a13
 810279c:	08102a13 	.word	0x08102a13
 81027a0:	08102a13 	.word	0x08102a13
 81027a4:	08102a13 	.word	0x08102a13
 81027a8:	08102a13 	.word	0x08102a13
 81027ac:	08102a13 	.word	0x08102a13
 81027b0:	08102801 	.word	0x08102801
 81027b4:	08102a13 	.word	0x08102a13
 81027b8:	08102a13 	.word	0x08102a13
 81027bc:	08102a13 	.word	0x08102a13
 81027c0:	08102a13 	.word	0x08102a13
 81027c4:	08102a13 	.word	0x08102a13
 81027c8:	08102a13 	.word	0x08102a13
 81027cc:	08102a13 	.word	0x08102a13
 81027d0:	08102807 	.word	0x08102807
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81027d4:	4b94      	ldr	r3, [pc, #592]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	f003 0320 	and.w	r3, r3, #32
 81027dc:	2b00      	cmp	r3, #0
 81027de:	d009      	beq.n	81027f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81027e0:	4b91      	ldr	r3, [pc, #580]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	08db      	lsrs	r3, r3, #3
 81027e6:	f003 0303 	and.w	r3, r3, #3
 81027ea:	4a90      	ldr	r2, [pc, #576]	; (8102a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81027ec:	fa22 f303 	lsr.w	r3, r2, r3
 81027f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81027f2:	e111      	b.n	8102a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81027f4:	4b8d      	ldr	r3, [pc, #564]	; (8102a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81027f6:	61bb      	str	r3, [r7, #24]
    break;
 81027f8:	e10e      	b.n	8102a18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81027fa:	4b8d      	ldr	r3, [pc, #564]	; (8102a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81027fc:	61bb      	str	r3, [r7, #24]
    break;
 81027fe:	e10b      	b.n	8102a18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102800:	4b8c      	ldr	r3, [pc, #560]	; (8102a34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102802:	61bb      	str	r3, [r7, #24]
    break;
 8102804:	e108      	b.n	8102a18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102806:	4b88      	ldr	r3, [pc, #544]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810280a:	f003 0303 	and.w	r3, r3, #3
 810280e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102810:	4b85      	ldr	r3, [pc, #532]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102814:	091b      	lsrs	r3, r3, #4
 8102816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810281a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810281c:	4b82      	ldr	r3, [pc, #520]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102820:	f003 0301 	and.w	r3, r3, #1
 8102824:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102826:	4b80      	ldr	r3, [pc, #512]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810282a:	08db      	lsrs	r3, r3, #3
 810282c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102830:	68fa      	ldr	r2, [r7, #12]
 8102832:	fb02 f303 	mul.w	r3, r2, r3
 8102836:	ee07 3a90 	vmov	s15, r3
 810283a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810283e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102842:	693b      	ldr	r3, [r7, #16]
 8102844:	2b00      	cmp	r3, #0
 8102846:	f000 80e1 	beq.w	8102a0c <HAL_RCC_GetSysClockFreq+0x2b8>
 810284a:	697b      	ldr	r3, [r7, #20]
 810284c:	2b02      	cmp	r3, #2
 810284e:	f000 8083 	beq.w	8102958 <HAL_RCC_GetSysClockFreq+0x204>
 8102852:	697b      	ldr	r3, [r7, #20]
 8102854:	2b02      	cmp	r3, #2
 8102856:	f200 80a1 	bhi.w	810299c <HAL_RCC_GetSysClockFreq+0x248>
 810285a:	697b      	ldr	r3, [r7, #20]
 810285c:	2b00      	cmp	r3, #0
 810285e:	d003      	beq.n	8102868 <HAL_RCC_GetSysClockFreq+0x114>
 8102860:	697b      	ldr	r3, [r7, #20]
 8102862:	2b01      	cmp	r3, #1
 8102864:	d056      	beq.n	8102914 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102866:	e099      	b.n	810299c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102868:	4b6f      	ldr	r3, [pc, #444]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810286a:	681b      	ldr	r3, [r3, #0]
 810286c:	f003 0320 	and.w	r3, r3, #32
 8102870:	2b00      	cmp	r3, #0
 8102872:	d02d      	beq.n	81028d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102874:	4b6c      	ldr	r3, [pc, #432]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	08db      	lsrs	r3, r3, #3
 810287a:	f003 0303 	and.w	r3, r3, #3
 810287e:	4a6b      	ldr	r2, [pc, #428]	; (8102a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102880:	fa22 f303 	lsr.w	r3, r2, r3
 8102884:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	ee07 3a90 	vmov	s15, r3
 810288c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102890:	693b      	ldr	r3, [r7, #16]
 8102892:	ee07 3a90 	vmov	s15, r3
 8102896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810289a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810289e:	4b62      	ldr	r3, [pc, #392]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81028a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028a6:	ee07 3a90 	vmov	s15, r3
 81028aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81028b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81028ce:	e087      	b.n	81029e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81028d0:	693b      	ldr	r3, [r7, #16]
 81028d2:	ee07 3a90 	vmov	s15, r3
 81028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028da:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102a3c <HAL_RCC_GetSysClockFreq+0x2e8>
 81028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028e2:	4b51      	ldr	r3, [pc, #324]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028ea:	ee07 3a90 	vmov	s15, r3
 81028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81028f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810290e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102912:	e065      	b.n	81029e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102914:	693b      	ldr	r3, [r7, #16]
 8102916:	ee07 3a90 	vmov	s15, r3
 810291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810291e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102926:	4b40      	ldr	r3, [pc, #256]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810292e:	ee07 3a90 	vmov	s15, r3
 8102932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102936:	ed97 6a02 	vldr	s12, [r7, #8]
 810293a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 810293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102956:	e043      	b.n	81029e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102958:	693b      	ldr	r3, [r7, #16]
 810295a:	ee07 3a90 	vmov	s15, r3
 810295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102962:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102a44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810296a:	4b2f      	ldr	r3, [pc, #188]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102972:	ee07 3a90 	vmov	s15, r3
 8102976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810297a:	ed97 6a02 	vldr	s12, [r7, #8]
 810297e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810298a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810298e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810299a:	e021      	b.n	81029e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810299c:	693b      	ldr	r3, [r7, #16]
 810299e:	ee07 3a90 	vmov	s15, r3
 81029a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 81029aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81029ae:	4b1e      	ldr	r3, [pc, #120]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029b6:	ee07 3a90 	vmov	s15, r3
 81029ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029be:	ed97 6a02 	vldr	s12, [r7, #8]
 81029c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 81029c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81029de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81029e0:	4b11      	ldr	r3, [pc, #68]	; (8102a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81029e4:	0a5b      	lsrs	r3, r3, #9
 81029e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81029ea:	3301      	adds	r3, #1
 81029ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81029ee:	683b      	ldr	r3, [r7, #0]
 81029f0:	ee07 3a90 	vmov	s15, r3
 81029f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81029f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81029fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a04:	ee17 3a90 	vmov	r3, s15
 8102a08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102a0a:	e005      	b.n	8102a18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102a0c:	2300      	movs	r3, #0
 8102a0e:	61bb      	str	r3, [r7, #24]
    break;
 8102a10:	e002      	b.n	8102a18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102a12:	4b07      	ldr	r3, [pc, #28]	; (8102a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102a14:	61bb      	str	r3, [r7, #24]
    break;
 8102a16:	bf00      	nop
  }

  return sysclockfreq;
 8102a18:	69bb      	ldr	r3, [r7, #24]
}
 8102a1a:	4618      	mov	r0, r3
 8102a1c:	3724      	adds	r7, #36	; 0x24
 8102a1e:	46bd      	mov	sp, r7
 8102a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a24:	4770      	bx	lr
 8102a26:	bf00      	nop
 8102a28:	58024400 	.word	0x58024400
 8102a2c:	03d09000 	.word	0x03d09000
 8102a30:	003d0900 	.word	0x003d0900
 8102a34:	016e3600 	.word	0x016e3600
 8102a38:	46000000 	.word	0x46000000
 8102a3c:	4c742400 	.word	0x4c742400
 8102a40:	4a742400 	.word	0x4a742400
 8102a44:	4bb71b00 	.word	0x4bb71b00

08102a48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102a48:	b580      	push	{r7, lr}
 8102a4a:	b086      	sub	sp, #24
 8102a4c:	af00      	add	r7, sp, #0
 8102a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102a50:	2300      	movs	r3, #0
 8102a52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102a54:	2300      	movs	r3, #0
 8102a56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	681b      	ldr	r3, [r3, #0]
 8102a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102a60:	2b00      	cmp	r3, #0
 8102a62:	d03f      	beq.n	8102ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102a68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102a6c:	d02a      	beq.n	8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102a72:	d824      	bhi.n	8102abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102a78:	d018      	beq.n	8102aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102a7e:	d81e      	bhi.n	8102abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102a80:	2b00      	cmp	r3, #0
 8102a82:	d003      	beq.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102a84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102a88:	d007      	beq.n	8102a9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102a8a:	e018      	b.n	8102abe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a8c:	4bab      	ldr	r3, [pc, #684]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a90:	4aaa      	ldr	r2, [pc, #680]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102a98:	e015      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	3304      	adds	r3, #4
 8102a9e:	2102      	movs	r1, #2
 8102aa0:	4618      	mov	r0, r3
 8102aa2:	f000 ff11 	bl	81038c8 <RCCEx_PLL2_Config>
 8102aa6:	4603      	mov	r3, r0
 8102aa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102aaa:	e00c      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	3324      	adds	r3, #36	; 0x24
 8102ab0:	2102      	movs	r1, #2
 8102ab2:	4618      	mov	r0, r3
 8102ab4:	f000 ffba 	bl	8103a2c <RCCEx_PLL3_Config>
 8102ab8:	4603      	mov	r3, r0
 8102aba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102abc:	e003      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102abe:	2301      	movs	r3, #1
 8102ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8102ac2:	e000      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ac6:	7dfb      	ldrb	r3, [r7, #23]
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	d109      	bne.n	8102ae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102acc:	4b9b      	ldr	r3, [pc, #620]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102ad8:	4998      	ldr	r1, [pc, #608]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ada:	4313      	orrs	r3, r2
 8102adc:	650b      	str	r3, [r1, #80]	; 0x50
 8102ade:	e001      	b.n	8102ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ae0:	7dfb      	ldrb	r3, [r7, #23]
 8102ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102aec:	2b00      	cmp	r3, #0
 8102aee:	d03d      	beq.n	8102b6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102af4:	2b04      	cmp	r3, #4
 8102af6:	d826      	bhi.n	8102b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102af8:	a201      	add	r2, pc, #4	; (adr r2, 8102b00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102afe:	bf00      	nop
 8102b00:	08102b15 	.word	0x08102b15
 8102b04:	08102b23 	.word	0x08102b23
 8102b08:	08102b35 	.word	0x08102b35
 8102b0c:	08102b4d 	.word	0x08102b4d
 8102b10:	08102b4d 	.word	0x08102b4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b14:	4b89      	ldr	r3, [pc, #548]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b18:	4a88      	ldr	r2, [pc, #544]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102b20:	e015      	b.n	8102b4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	3304      	adds	r3, #4
 8102b26:	2100      	movs	r1, #0
 8102b28:	4618      	mov	r0, r3
 8102b2a:	f000 fecd 	bl	81038c8 <RCCEx_PLL2_Config>
 8102b2e:	4603      	mov	r3, r0
 8102b30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102b32:	e00c      	b.n	8102b4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	3324      	adds	r3, #36	; 0x24
 8102b38:	2100      	movs	r1, #0
 8102b3a:	4618      	mov	r0, r3
 8102b3c:	f000 ff76 	bl	8103a2c <RCCEx_PLL3_Config>
 8102b40:	4603      	mov	r3, r0
 8102b42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102b44:	e003      	b.n	8102b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b46:	2301      	movs	r3, #1
 8102b48:	75fb      	strb	r3, [r7, #23]
      break;
 8102b4a:	e000      	b.n	8102b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b4e:	7dfb      	ldrb	r3, [r7, #23]
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	d109      	bne.n	8102b68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102b54:	4b79      	ldr	r3, [pc, #484]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102b58:	f023 0207 	bic.w	r2, r3, #7
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b60:	4976      	ldr	r1, [pc, #472]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b62:	4313      	orrs	r3, r2
 8102b64:	650b      	str	r3, [r1, #80]	; 0x50
 8102b66:	e001      	b.n	8102b6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b68:	7dfb      	ldrb	r3, [r7, #23]
 8102b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102b74:	2b00      	cmp	r3, #0
 8102b76:	d042      	beq.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102b80:	d02b      	beq.n	8102bda <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102b86:	d825      	bhi.n	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b88:	2bc0      	cmp	r3, #192	; 0xc0
 8102b8a:	d028      	beq.n	8102bde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102b8c:	2bc0      	cmp	r3, #192	; 0xc0
 8102b8e:	d821      	bhi.n	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b90:	2b80      	cmp	r3, #128	; 0x80
 8102b92:	d016      	beq.n	8102bc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102b94:	2b80      	cmp	r3, #128	; 0x80
 8102b96:	d81d      	bhi.n	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b98:	2b00      	cmp	r3, #0
 8102b9a:	d002      	beq.n	8102ba2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102b9c:	2b40      	cmp	r3, #64	; 0x40
 8102b9e:	d007      	beq.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102ba0:	e018      	b.n	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ba2:	4b66      	ldr	r3, [pc, #408]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ba6:	4a65      	ldr	r2, [pc, #404]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102bac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102bae:	e017      	b.n	8102be0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	3304      	adds	r3, #4
 8102bb4:	2100      	movs	r1, #0
 8102bb6:	4618      	mov	r0, r3
 8102bb8:	f000 fe86 	bl	81038c8 <RCCEx_PLL2_Config>
 8102bbc:	4603      	mov	r3, r0
 8102bbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102bc0:	e00e      	b.n	8102be0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	3324      	adds	r3, #36	; 0x24
 8102bc6:	2100      	movs	r1, #0
 8102bc8:	4618      	mov	r0, r3
 8102bca:	f000 ff2f 	bl	8103a2c <RCCEx_PLL3_Config>
 8102bce:	4603      	mov	r3, r0
 8102bd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102bd2:	e005      	b.n	8102be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102bd4:	2301      	movs	r3, #1
 8102bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8102bd8:	e002      	b.n	8102be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102bda:	bf00      	nop
 8102bdc:	e000      	b.n	8102be0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102be0:	7dfb      	ldrb	r3, [r7, #23]
 8102be2:	2b00      	cmp	r3, #0
 8102be4:	d109      	bne.n	8102bfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102be6:	4b55      	ldr	r3, [pc, #340]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102bea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bf2:	4952      	ldr	r1, [pc, #328]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102bf4:	4313      	orrs	r3, r2
 8102bf6:	650b      	str	r3, [r1, #80]	; 0x50
 8102bf8:	e001      	b.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bfa:	7dfb      	ldrb	r3, [r7, #23]
 8102bfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102bfe:	687b      	ldr	r3, [r7, #4]
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102c06:	2b00      	cmp	r3, #0
 8102c08:	d049      	beq.n	8102c9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102c10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102c14:	d030      	beq.n	8102c78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102c1a:	d82a      	bhi.n	8102c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102c1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102c20:	d02c      	beq.n	8102c7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102c22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102c26:	d824      	bhi.n	8102c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102c2c:	d018      	beq.n	8102c60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102c32:	d81e      	bhi.n	8102c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102c34:	2b00      	cmp	r3, #0
 8102c36:	d003      	beq.n	8102c40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102c3c:	d007      	beq.n	8102c4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102c3e:	e018      	b.n	8102c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c40:	4b3e      	ldr	r3, [pc, #248]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c44:	4a3d      	ldr	r2, [pc, #244]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102c4c:	e017      	b.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	3304      	adds	r3, #4
 8102c52:	2100      	movs	r1, #0
 8102c54:	4618      	mov	r0, r3
 8102c56:	f000 fe37 	bl	81038c8 <RCCEx_PLL2_Config>
 8102c5a:	4603      	mov	r3, r0
 8102c5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102c5e:	e00e      	b.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	3324      	adds	r3, #36	; 0x24
 8102c64:	2100      	movs	r1, #0
 8102c66:	4618      	mov	r0, r3
 8102c68:	f000 fee0 	bl	8103a2c <RCCEx_PLL3_Config>
 8102c6c:	4603      	mov	r3, r0
 8102c6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102c70:	e005      	b.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102c72:	2301      	movs	r3, #1
 8102c74:	75fb      	strb	r3, [r7, #23]
      break;
 8102c76:	e002      	b.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102c78:	bf00      	nop
 8102c7a:	e000      	b.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c7e:	7dfb      	ldrb	r3, [r7, #23]
 8102c80:	2b00      	cmp	r3, #0
 8102c82:	d10a      	bne.n	8102c9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102c84:	4b2d      	ldr	r3, [pc, #180]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102c92:	492a      	ldr	r1, [pc, #168]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c94:	4313      	orrs	r3, r2
 8102c96:	658b      	str	r3, [r1, #88]	; 0x58
 8102c98:	e001      	b.n	8102c9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c9a:	7dfb      	ldrb	r3, [r7, #23]
 8102c9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102ca6:	2b00      	cmp	r3, #0
 8102ca8:	d04c      	beq.n	8102d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102cb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102cb4:	d030      	beq.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102cba:	d82a      	bhi.n	8102d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102cbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102cc0:	d02c      	beq.n	8102d1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8102cc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102cc6:	d824      	bhi.n	8102d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102ccc:	d018      	beq.n	8102d00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102cd2:	d81e      	bhi.n	8102d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d003      	beq.n	8102ce0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102cdc:	d007      	beq.n	8102cee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102cde:	e018      	b.n	8102d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ce0:	4b16      	ldr	r3, [pc, #88]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ce4:	4a15      	ldr	r2, [pc, #84]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102cec:	e017      	b.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	3304      	adds	r3, #4
 8102cf2:	2100      	movs	r1, #0
 8102cf4:	4618      	mov	r0, r3
 8102cf6:	f000 fde7 	bl	81038c8 <RCCEx_PLL2_Config>
 8102cfa:	4603      	mov	r3, r0
 8102cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102cfe:	e00e      	b.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	3324      	adds	r3, #36	; 0x24
 8102d04:	2100      	movs	r1, #0
 8102d06:	4618      	mov	r0, r3
 8102d08:	f000 fe90 	bl	8103a2c <RCCEx_PLL3_Config>
 8102d0c:	4603      	mov	r3, r0
 8102d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102d10:	e005      	b.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102d12:	2301      	movs	r3, #1
 8102d14:	75fb      	strb	r3, [r7, #23]
      break;
 8102d16:	e002      	b.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102d18:	bf00      	nop
 8102d1a:	e000      	b.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d1e:	7dfb      	ldrb	r3, [r7, #23]
 8102d20:	2b00      	cmp	r3, #0
 8102d22:	d10d      	bne.n	8102d40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102d24:	4b05      	ldr	r3, [pc, #20]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102d32:	4902      	ldr	r1, [pc, #8]	; (8102d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d34:	4313      	orrs	r3, r2
 8102d36:	658b      	str	r3, [r1, #88]	; 0x58
 8102d38:	e004      	b.n	8102d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102d3a:	bf00      	nop
 8102d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d40:	7dfb      	ldrb	r3, [r7, #23]
 8102d42:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102d4c:	2b00      	cmp	r3, #0
 8102d4e:	d032      	beq.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102d54:	2b30      	cmp	r3, #48	; 0x30
 8102d56:	d01c      	beq.n	8102d92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102d58:	2b30      	cmp	r3, #48	; 0x30
 8102d5a:	d817      	bhi.n	8102d8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102d5c:	2b20      	cmp	r3, #32
 8102d5e:	d00c      	beq.n	8102d7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8102d60:	2b20      	cmp	r3, #32
 8102d62:	d813      	bhi.n	8102d8c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102d64:	2b00      	cmp	r3, #0
 8102d66:	d016      	beq.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8102d68:	2b10      	cmp	r3, #16
 8102d6a:	d10f      	bne.n	8102d8c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d6c:	4baf      	ldr	r3, [pc, #700]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d70:	4aae      	ldr	r2, [pc, #696]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102d78:	e00e      	b.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	3304      	adds	r3, #4
 8102d7e:	2102      	movs	r1, #2
 8102d80:	4618      	mov	r0, r3
 8102d82:	f000 fda1 	bl	81038c8 <RCCEx_PLL2_Config>
 8102d86:	4603      	mov	r3, r0
 8102d88:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102d8a:	e005      	b.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102d8c:	2301      	movs	r3, #1
 8102d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8102d90:	e002      	b.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102d92:	bf00      	nop
 8102d94:	e000      	b.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d98:	7dfb      	ldrb	r3, [r7, #23]
 8102d9a:	2b00      	cmp	r3, #0
 8102d9c:	d109      	bne.n	8102db2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102d9e:	4ba3      	ldr	r3, [pc, #652]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102da2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102daa:	49a0      	ldr	r1, [pc, #640]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102dac:	4313      	orrs	r3, r2
 8102dae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102db0:	e001      	b.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102db2:	7dfb      	ldrb	r3, [r7, #23]
 8102db4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	d047      	beq.n	8102e52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102dca:	d030      	beq.n	8102e2e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8102dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102dd0:	d82a      	bhi.n	8102e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102dd6:	d02c      	beq.n	8102e32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8102dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102ddc:	d824      	bhi.n	8102e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102de2:	d018      	beq.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8102de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102de8:	d81e      	bhi.n	8102e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102dea:	2b00      	cmp	r3, #0
 8102dec:	d003      	beq.n	8102df6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8102dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102df2:	d007      	beq.n	8102e04 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8102df4:	e018      	b.n	8102e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102df6:	4b8d      	ldr	r3, [pc, #564]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102dfa:	4a8c      	ldr	r2, [pc, #560]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102e02:	e017      	b.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	3304      	adds	r3, #4
 8102e08:	2100      	movs	r1, #0
 8102e0a:	4618      	mov	r0, r3
 8102e0c:	f000 fd5c 	bl	81038c8 <RCCEx_PLL2_Config>
 8102e10:	4603      	mov	r3, r0
 8102e12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102e14:	e00e      	b.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	3324      	adds	r3, #36	; 0x24
 8102e1a:	2100      	movs	r1, #0
 8102e1c:	4618      	mov	r0, r3
 8102e1e:	f000 fe05 	bl	8103a2c <RCCEx_PLL3_Config>
 8102e22:	4603      	mov	r3, r0
 8102e24:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102e26:	e005      	b.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e28:	2301      	movs	r3, #1
 8102e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8102e2c:	e002      	b.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102e2e:	bf00      	nop
 8102e30:	e000      	b.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e34:	7dfb      	ldrb	r3, [r7, #23]
 8102e36:	2b00      	cmp	r3, #0
 8102e38:	d109      	bne.n	8102e4e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102e3a:	4b7c      	ldr	r3, [pc, #496]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e3e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102e46:	4979      	ldr	r1, [pc, #484]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102e48:	4313      	orrs	r3, r2
 8102e4a:	650b      	str	r3, [r1, #80]	; 0x50
 8102e4c:	e001      	b.n	8102e52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e4e:	7dfb      	ldrb	r3, [r7, #23]
 8102e50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	d049      	beq.n	8102ef2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102e66:	d02e      	beq.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8102e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102e6c:	d828      	bhi.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102e72:	d02a      	beq.n	8102eca <HAL_RCCEx_PeriphCLKConfig+0x482>
 8102e74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102e78:	d822      	bhi.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102e7e:	d026      	beq.n	8102ece <HAL_RCCEx_PeriphCLKConfig+0x486>
 8102e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102e84:	d81c      	bhi.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e8a:	d010      	beq.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x466>
 8102e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e90:	d816      	bhi.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102e92:	2b00      	cmp	r3, #0
 8102e94:	d01d      	beq.n	8102ed2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8102e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102e9a:	d111      	bne.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	3304      	adds	r3, #4
 8102ea0:	2101      	movs	r1, #1
 8102ea2:	4618      	mov	r0, r3
 8102ea4:	f000 fd10 	bl	81038c8 <RCCEx_PLL2_Config>
 8102ea8:	4603      	mov	r3, r0
 8102eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102eac:	e012      	b.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	3324      	adds	r3, #36	; 0x24
 8102eb2:	2101      	movs	r1, #1
 8102eb4:	4618      	mov	r0, r3
 8102eb6:	f000 fdb9 	bl	8103a2c <RCCEx_PLL3_Config>
 8102eba:	4603      	mov	r3, r0
 8102ebc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102ebe:	e009      	b.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102ec0:	2301      	movs	r3, #1
 8102ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8102ec4:	e006      	b.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102ec6:	bf00      	nop
 8102ec8:	e004      	b.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102eca:	bf00      	nop
 8102ecc:	e002      	b.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102ece:	bf00      	nop
 8102ed0:	e000      	b.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ed4:	7dfb      	ldrb	r3, [r7, #23]
 8102ed6:	2b00      	cmp	r3, #0
 8102ed8:	d109      	bne.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102eda:	4b54      	ldr	r3, [pc, #336]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ede:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ee6:	4951      	ldr	r1, [pc, #324]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102ee8:	4313      	orrs	r3, r2
 8102eea:	650b      	str	r3, [r1, #80]	; 0x50
 8102eec:	e001      	b.n	8102ef2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eee:	7dfb      	ldrb	r3, [r7, #23]
 8102ef0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d04b      	beq.n	8102f96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102f08:	d02e      	beq.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8102f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102f0e:	d828      	bhi.n	8102f62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102f14:	d02a      	beq.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8102f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102f1a:	d822      	bhi.n	8102f62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102f1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102f20:	d026      	beq.n	8102f70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8102f22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102f26:	d81c      	bhi.n	8102f62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102f2c:	d010      	beq.n	8102f50 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8102f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102f32:	d816      	bhi.n	8102f62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	d01d      	beq.n	8102f74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8102f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102f3c:	d111      	bne.n	8102f62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102f3e:	687b      	ldr	r3, [r7, #4]
 8102f40:	3304      	adds	r3, #4
 8102f42:	2101      	movs	r1, #1
 8102f44:	4618      	mov	r0, r3
 8102f46:	f000 fcbf 	bl	81038c8 <RCCEx_PLL2_Config>
 8102f4a:	4603      	mov	r3, r0
 8102f4c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102f4e:	e012      	b.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	3324      	adds	r3, #36	; 0x24
 8102f54:	2101      	movs	r1, #1
 8102f56:	4618      	mov	r0, r3
 8102f58:	f000 fd68 	bl	8103a2c <RCCEx_PLL3_Config>
 8102f5c:	4603      	mov	r3, r0
 8102f5e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102f60:	e009      	b.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8102f62:	2301      	movs	r3, #1
 8102f64:	75fb      	strb	r3, [r7, #23]
      break;
 8102f66:	e006      	b.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102f68:	bf00      	nop
 8102f6a:	e004      	b.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102f6c:	bf00      	nop
 8102f6e:	e002      	b.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102f70:	bf00      	nop
 8102f72:	e000      	b.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f76:	7dfb      	ldrb	r3, [r7, #23]
 8102f78:	2b00      	cmp	r3, #0
 8102f7a:	d10a      	bne.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102f7c:	4b2b      	ldr	r3, [pc, #172]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f80:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102f8a:	4928      	ldr	r1, [pc, #160]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f8c:	4313      	orrs	r3, r2
 8102f8e:	658b      	str	r3, [r1, #88]	; 0x58
 8102f90:	e001      	b.n	8102f96 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f92:	7dfb      	ldrb	r3, [r7, #23]
 8102f94:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	681b      	ldr	r3, [r3, #0]
 8102f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102f9e:	2b00      	cmp	r3, #0
 8102fa0:	d02f      	beq.n	8103002 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102faa:	d00e      	beq.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0x582>
 8102fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102fb0:	d814      	bhi.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8102fb2:	2b00      	cmp	r3, #0
 8102fb4:	d015      	beq.n	8102fe2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102fba:	d10f      	bne.n	8102fdc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fbc:	4b1b      	ldr	r3, [pc, #108]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fc0:	4a1a      	ldr	r2, [pc, #104]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102fc8:	e00c      	b.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	3304      	adds	r3, #4
 8102fce:	2101      	movs	r1, #1
 8102fd0:	4618      	mov	r0, r3
 8102fd2:	f000 fc79 	bl	81038c8 <RCCEx_PLL2_Config>
 8102fd6:	4603      	mov	r3, r0
 8102fd8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102fda:	e003      	b.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fdc:	2301      	movs	r3, #1
 8102fde:	75fb      	strb	r3, [r7, #23]
      break;
 8102fe0:	e000      	b.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8102fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fe4:	7dfb      	ldrb	r3, [r7, #23]
 8102fe6:	2b00      	cmp	r3, #0
 8102fe8:	d109      	bne.n	8102ffe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102fea:	4b10      	ldr	r3, [pc, #64]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102ff6:	490d      	ldr	r1, [pc, #52]	; (810302c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102ff8:	4313      	orrs	r3, r2
 8102ffa:	650b      	str	r3, [r1, #80]	; 0x50
 8102ffc:	e001      	b.n	8103002 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ffe:	7dfb      	ldrb	r3, [r7, #23]
 8103000:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810300a:	2b00      	cmp	r3, #0
 810300c:	d033      	beq.n	8103076 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103012:	2b03      	cmp	r3, #3
 8103014:	d81c      	bhi.n	8103050 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103016:	a201      	add	r2, pc, #4	; (adr r2, 810301c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810301c:	08103057 	.word	0x08103057
 8103020:	08103031 	.word	0x08103031
 8103024:	0810303f 	.word	0x0810303f
 8103028:	08103057 	.word	0x08103057
 810302c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103030:	4bb9      	ldr	r3, [pc, #740]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103034:	4ab8      	ldr	r2, [pc, #736]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810303a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810303c:	e00c      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	3304      	adds	r3, #4
 8103042:	2102      	movs	r1, #2
 8103044:	4618      	mov	r0, r3
 8103046:	f000 fc3f 	bl	81038c8 <RCCEx_PLL2_Config>
 810304a:	4603      	mov	r3, r0
 810304c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810304e:	e003      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103050:	2301      	movs	r3, #1
 8103052:	75fb      	strb	r3, [r7, #23]
      break;
 8103054:	e000      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103058:	7dfb      	ldrb	r3, [r7, #23]
 810305a:	2b00      	cmp	r3, #0
 810305c:	d109      	bne.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810305e:	4bae      	ldr	r3, [pc, #696]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103062:	f023 0203 	bic.w	r2, r3, #3
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810306a:	49ab      	ldr	r1, [pc, #684]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810306c:	4313      	orrs	r3, r2
 810306e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103070:	e001      	b.n	8103076 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103072:	7dfb      	ldrb	r3, [r7, #23]
 8103074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	681b      	ldr	r3, [r3, #0]
 810307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810307e:	2b00      	cmp	r3, #0
 8103080:	f000 8088 	beq.w	8103194 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103084:	4ba5      	ldr	r3, [pc, #660]	; (810331c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	4aa4      	ldr	r2, [pc, #656]	; (810331c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810308e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103090:	f7fe fac4 	bl	810161c <HAL_GetTick>
 8103094:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103096:	e009      	b.n	81030ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103098:	f7fe fac0 	bl	810161c <HAL_GetTick>
 810309c:	4602      	mov	r2, r0
 810309e:	693b      	ldr	r3, [r7, #16]
 81030a0:	1ad3      	subs	r3, r2, r3
 81030a2:	2b64      	cmp	r3, #100	; 0x64
 81030a4:	d902      	bls.n	81030ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81030a6:	2303      	movs	r3, #3
 81030a8:	75fb      	strb	r3, [r7, #23]
        break;
 81030aa:	e005      	b.n	81030b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81030ac:	4b9b      	ldr	r3, [pc, #620]	; (810331c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81030b4:	2b00      	cmp	r3, #0
 81030b6:	d0ef      	beq.n	8103098 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81030b8:	7dfb      	ldrb	r3, [r7, #23]
 81030ba:	2b00      	cmp	r3, #0
 81030bc:	d168      	bne.n	8103190 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81030be:	4b96      	ldr	r3, [pc, #600]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81030c8:	4053      	eors	r3, r2
 81030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81030ce:	2b00      	cmp	r3, #0
 81030d0:	d013      	beq.n	81030fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81030d2:	4b91      	ldr	r3, [pc, #580]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81030d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81030da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81030dc:	4b8e      	ldr	r3, [pc, #568]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81030e0:	4a8d      	ldr	r2, [pc, #564]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81030e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81030e8:	4b8b      	ldr	r3, [pc, #556]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81030ec:	4a8a      	ldr	r2, [pc, #552]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81030f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81030f4:	4a88      	ldr	r2, [pc, #544]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030f6:	68fb      	ldr	r3, [r7, #12]
 81030f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103104:	d115      	bne.n	8103132 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103106:	f7fe fa89 	bl	810161c <HAL_GetTick>
 810310a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810310c:	e00b      	b.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810310e:	f7fe fa85 	bl	810161c <HAL_GetTick>
 8103112:	4602      	mov	r2, r0
 8103114:	693b      	ldr	r3, [r7, #16]
 8103116:	1ad3      	subs	r3, r2, r3
 8103118:	f241 3288 	movw	r2, #5000	; 0x1388
 810311c:	4293      	cmp	r3, r2
 810311e:	d902      	bls.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103120:	2303      	movs	r3, #3
 8103122:	75fb      	strb	r3, [r7, #23]
            break;
 8103124:	e005      	b.n	8103132 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103126:	4b7c      	ldr	r3, [pc, #496]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810312a:	f003 0302 	and.w	r3, r3, #2
 810312e:	2b00      	cmp	r3, #0
 8103130:	d0ed      	beq.n	810310e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103132:	7dfb      	ldrb	r3, [r7, #23]
 8103134:	2b00      	cmp	r3, #0
 8103136:	d128      	bne.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103146:	d10f      	bne.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103148:	4b73      	ldr	r3, [pc, #460]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810314a:	691b      	ldr	r3, [r3, #16]
 810314c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103156:	091b      	lsrs	r3, r3, #4
 8103158:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810315c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103160:	496d      	ldr	r1, [pc, #436]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103162:	4313      	orrs	r3, r2
 8103164:	610b      	str	r3, [r1, #16]
 8103166:	e005      	b.n	8103174 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103168:	4b6b      	ldr	r3, [pc, #428]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810316a:	691b      	ldr	r3, [r3, #16]
 810316c:	4a6a      	ldr	r2, [pc, #424]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810316e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103172:	6113      	str	r3, [r2, #16]
 8103174:	4b68      	ldr	r3, [pc, #416]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810317e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103182:	4965      	ldr	r1, [pc, #404]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103184:	4313      	orrs	r3, r2
 8103186:	670b      	str	r3, [r1, #112]	; 0x70
 8103188:	e004      	b.n	8103194 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810318a:	7dfb      	ldrb	r3, [r7, #23]
 810318c:	75bb      	strb	r3, [r7, #22]
 810318e:	e001      	b.n	8103194 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103190:	7dfb      	ldrb	r3, [r7, #23]
 8103192:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	681b      	ldr	r3, [r3, #0]
 8103198:	f003 0301 	and.w	r3, r3, #1
 810319c:	2b00      	cmp	r3, #0
 810319e:	d07e      	beq.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81031a4:	2b28      	cmp	r3, #40	; 0x28
 81031a6:	d867      	bhi.n	8103278 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81031a8:	a201      	add	r2, pc, #4	; (adr r2, 81031b0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031ae:	bf00      	nop
 81031b0:	0810327f 	.word	0x0810327f
 81031b4:	08103279 	.word	0x08103279
 81031b8:	08103279 	.word	0x08103279
 81031bc:	08103279 	.word	0x08103279
 81031c0:	08103279 	.word	0x08103279
 81031c4:	08103279 	.word	0x08103279
 81031c8:	08103279 	.word	0x08103279
 81031cc:	08103279 	.word	0x08103279
 81031d0:	08103255 	.word	0x08103255
 81031d4:	08103279 	.word	0x08103279
 81031d8:	08103279 	.word	0x08103279
 81031dc:	08103279 	.word	0x08103279
 81031e0:	08103279 	.word	0x08103279
 81031e4:	08103279 	.word	0x08103279
 81031e8:	08103279 	.word	0x08103279
 81031ec:	08103279 	.word	0x08103279
 81031f0:	08103267 	.word	0x08103267
 81031f4:	08103279 	.word	0x08103279
 81031f8:	08103279 	.word	0x08103279
 81031fc:	08103279 	.word	0x08103279
 8103200:	08103279 	.word	0x08103279
 8103204:	08103279 	.word	0x08103279
 8103208:	08103279 	.word	0x08103279
 810320c:	08103279 	.word	0x08103279
 8103210:	0810327f 	.word	0x0810327f
 8103214:	08103279 	.word	0x08103279
 8103218:	08103279 	.word	0x08103279
 810321c:	08103279 	.word	0x08103279
 8103220:	08103279 	.word	0x08103279
 8103224:	08103279 	.word	0x08103279
 8103228:	08103279 	.word	0x08103279
 810322c:	08103279 	.word	0x08103279
 8103230:	0810327f 	.word	0x0810327f
 8103234:	08103279 	.word	0x08103279
 8103238:	08103279 	.word	0x08103279
 810323c:	08103279 	.word	0x08103279
 8103240:	08103279 	.word	0x08103279
 8103244:	08103279 	.word	0x08103279
 8103248:	08103279 	.word	0x08103279
 810324c:	08103279 	.word	0x08103279
 8103250:	0810327f 	.word	0x0810327f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	3304      	adds	r3, #4
 8103258:	2101      	movs	r1, #1
 810325a:	4618      	mov	r0, r3
 810325c:	f000 fb34 	bl	81038c8 <RCCEx_PLL2_Config>
 8103260:	4603      	mov	r3, r0
 8103262:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103264:	e00c      	b.n	8103280 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	3324      	adds	r3, #36	; 0x24
 810326a:	2101      	movs	r1, #1
 810326c:	4618      	mov	r0, r3
 810326e:	f000 fbdd 	bl	8103a2c <RCCEx_PLL3_Config>
 8103272:	4603      	mov	r3, r0
 8103274:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103276:	e003      	b.n	8103280 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103278:	2301      	movs	r3, #1
 810327a:	75fb      	strb	r3, [r7, #23]
      break;
 810327c:	e000      	b.n	8103280 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810327e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103280:	7dfb      	ldrb	r3, [r7, #23]
 8103282:	2b00      	cmp	r3, #0
 8103284:	d109      	bne.n	810329a <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103286:	4b24      	ldr	r3, [pc, #144]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810328a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103292:	4921      	ldr	r1, [pc, #132]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103294:	4313      	orrs	r3, r2
 8103296:	654b      	str	r3, [r1, #84]	; 0x54
 8103298:	e001      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810329a:	7dfb      	ldrb	r3, [r7, #23]
 810329c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	f003 0302 	and.w	r3, r3, #2
 81032a6:	2b00      	cmp	r3, #0
 81032a8:	d03c      	beq.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81032ae:	2b05      	cmp	r3, #5
 81032b0:	d820      	bhi.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81032b2:	a201      	add	r2, pc, #4	; (adr r2, 81032b8 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032b8:	081032fb 	.word	0x081032fb
 81032bc:	081032d1 	.word	0x081032d1
 81032c0:	081032e3 	.word	0x081032e3
 81032c4:	081032fb 	.word	0x081032fb
 81032c8:	081032fb 	.word	0x081032fb
 81032cc:	081032fb 	.word	0x081032fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	3304      	adds	r3, #4
 81032d4:	2101      	movs	r1, #1
 81032d6:	4618      	mov	r0, r3
 81032d8:	f000 faf6 	bl	81038c8 <RCCEx_PLL2_Config>
 81032dc:	4603      	mov	r3, r0
 81032de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81032e0:	e00c      	b.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	3324      	adds	r3, #36	; 0x24
 81032e6:	2101      	movs	r1, #1
 81032e8:	4618      	mov	r0, r3
 81032ea:	f000 fb9f 	bl	8103a2c <RCCEx_PLL3_Config>
 81032ee:	4603      	mov	r3, r0
 81032f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81032f2:	e003      	b.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81032f4:	2301      	movs	r3, #1
 81032f6:	75fb      	strb	r3, [r7, #23]
      break;
 81032f8:	e000      	b.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81032fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032fc:	7dfb      	ldrb	r3, [r7, #23]
 81032fe:	2b00      	cmp	r3, #0
 8103300:	d10e      	bne.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103302:	4b05      	ldr	r3, [pc, #20]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103306:	f023 0207 	bic.w	r2, r3, #7
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810330e:	4902      	ldr	r1, [pc, #8]	; (8103318 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103310:	4313      	orrs	r3, r2
 8103312:	654b      	str	r3, [r1, #84]	; 0x54
 8103314:	e006      	b.n	8103324 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103316:	bf00      	nop
 8103318:	58024400 	.word	0x58024400
 810331c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103320:	7dfb      	ldrb	r3, [r7, #23]
 8103322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	f003 0304 	and.w	r3, r3, #4
 810332c:	2b00      	cmp	r3, #0
 810332e:	d039      	beq.n	81033a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103336:	2b05      	cmp	r3, #5
 8103338:	d820      	bhi.n	810337c <HAL_RCCEx_PeriphCLKConfig+0x934>
 810333a:	a201      	add	r2, pc, #4	; (adr r2, 8103340 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 810333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103340:	08103383 	.word	0x08103383
 8103344:	08103359 	.word	0x08103359
 8103348:	0810336b 	.word	0x0810336b
 810334c:	08103383 	.word	0x08103383
 8103350:	08103383 	.word	0x08103383
 8103354:	08103383 	.word	0x08103383
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	3304      	adds	r3, #4
 810335c:	2101      	movs	r1, #1
 810335e:	4618      	mov	r0, r3
 8103360:	f000 fab2 	bl	81038c8 <RCCEx_PLL2_Config>
 8103364:	4603      	mov	r3, r0
 8103366:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103368:	e00c      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	3324      	adds	r3, #36	; 0x24
 810336e:	2101      	movs	r1, #1
 8103370:	4618      	mov	r0, r3
 8103372:	f000 fb5b 	bl	8103a2c <RCCEx_PLL3_Config>
 8103376:	4603      	mov	r3, r0
 8103378:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810337a:	e003      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810337c:	2301      	movs	r3, #1
 810337e:	75fb      	strb	r3, [r7, #23]
      break;
 8103380:	e000      	b.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103384:	7dfb      	ldrb	r3, [r7, #23]
 8103386:	2b00      	cmp	r3, #0
 8103388:	d10a      	bne.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810338a:	4bb7      	ldr	r3, [pc, #732]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810338e:	f023 0207 	bic.w	r2, r3, #7
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103398:	49b3      	ldr	r1, [pc, #716]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810339a:	4313      	orrs	r3, r2
 810339c:	658b      	str	r3, [r1, #88]	; 0x58
 810339e:	e001      	b.n	81033a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033a0:	7dfb      	ldrb	r3, [r7, #23]
 81033a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	f003 0320 	and.w	r3, r3, #32
 81033ac:	2b00      	cmp	r3, #0
 81033ae:	d04b      	beq.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81033b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81033ba:	d02e      	beq.n	810341a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 81033bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81033c0:	d828      	bhi.n	8103414 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81033c6:	d02a      	beq.n	810341e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81033cc:	d822      	bhi.n	8103414 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81033ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81033d2:	d026      	beq.n	8103422 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81033d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81033d8:	d81c      	bhi.n	8103414 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81033da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81033de:	d010      	beq.n	8103402 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 81033e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81033e4:	d816      	bhi.n	8103414 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	d01d      	beq.n	8103426 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81033ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81033ee:	d111      	bne.n	8103414 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	3304      	adds	r3, #4
 81033f4:	2100      	movs	r1, #0
 81033f6:	4618      	mov	r0, r3
 81033f8:	f000 fa66 	bl	81038c8 <RCCEx_PLL2_Config>
 81033fc:	4603      	mov	r3, r0
 81033fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103400:	e012      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	3324      	adds	r3, #36	; 0x24
 8103406:	2102      	movs	r1, #2
 8103408:	4618      	mov	r0, r3
 810340a:	f000 fb0f 	bl	8103a2c <RCCEx_PLL3_Config>
 810340e:	4603      	mov	r3, r0
 8103410:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103412:	e009      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103414:	2301      	movs	r3, #1
 8103416:	75fb      	strb	r3, [r7, #23]
      break;
 8103418:	e006      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810341a:	bf00      	nop
 810341c:	e004      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810341e:	bf00      	nop
 8103420:	e002      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103422:	bf00      	nop
 8103424:	e000      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103428:	7dfb      	ldrb	r3, [r7, #23]
 810342a:	2b00      	cmp	r3, #0
 810342c:	d10a      	bne.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810342e:	4b8e      	ldr	r3, [pc, #568]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103432:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810343c:	498a      	ldr	r1, [pc, #552]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810343e:	4313      	orrs	r3, r2
 8103440:	654b      	str	r3, [r1, #84]	; 0x54
 8103442:	e001      	b.n	8103448 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103444:	7dfb      	ldrb	r3, [r7, #23]
 8103446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103450:	2b00      	cmp	r3, #0
 8103452:	d04b      	beq.n	81034ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810345a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810345e:	d02e      	beq.n	81034be <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103460:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103464:	d828      	bhi.n	81034b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810346a:	d02a      	beq.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103470:	d822      	bhi.n	81034b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103476:	d026      	beq.n	81034c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103478:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810347c:	d81c      	bhi.n	81034b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810347e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103482:	d010      	beq.n	81034a6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103488:	d816      	bhi.n	81034b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810348a:	2b00      	cmp	r3, #0
 810348c:	d01d      	beq.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103492:	d111      	bne.n	81034b8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	3304      	adds	r3, #4
 8103498:	2100      	movs	r1, #0
 810349a:	4618      	mov	r0, r3
 810349c:	f000 fa14 	bl	81038c8 <RCCEx_PLL2_Config>
 81034a0:	4603      	mov	r3, r0
 81034a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81034a4:	e012      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	3324      	adds	r3, #36	; 0x24
 81034aa:	2102      	movs	r1, #2
 81034ac:	4618      	mov	r0, r3
 81034ae:	f000 fabd 	bl	8103a2c <RCCEx_PLL3_Config>
 81034b2:	4603      	mov	r3, r0
 81034b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81034b6:	e009      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034b8:	2301      	movs	r3, #1
 81034ba:	75fb      	strb	r3, [r7, #23]
      break;
 81034bc:	e006      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81034be:	bf00      	nop
 81034c0:	e004      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81034c2:	bf00      	nop
 81034c4:	e002      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81034c6:	bf00      	nop
 81034c8:	e000      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81034ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034cc:	7dfb      	ldrb	r3, [r7, #23]
 81034ce:	2b00      	cmp	r3, #0
 81034d0:	d10a      	bne.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81034d2:	4b65      	ldr	r3, [pc, #404]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81034e0:	4961      	ldr	r1, [pc, #388]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81034e2:	4313      	orrs	r3, r2
 81034e4:	658b      	str	r3, [r1, #88]	; 0x58
 81034e6:	e001      	b.n	81034ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034e8:	7dfb      	ldrb	r3, [r7, #23]
 81034ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d04b      	beq.n	8103590 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81034fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103502:	d02e      	beq.n	8103562 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103504:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103508:	d828      	bhi.n	810355c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810350a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810350e:	d02a      	beq.n	8103566 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103514:	d822      	bhi.n	810355c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103516:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810351a:	d026      	beq.n	810356a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810351c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103520:	d81c      	bhi.n	810355c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103526:	d010      	beq.n	810354a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810352c:	d816      	bhi.n	810355c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810352e:	2b00      	cmp	r3, #0
 8103530:	d01d      	beq.n	810356e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103536:	d111      	bne.n	810355c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	3304      	adds	r3, #4
 810353c:	2100      	movs	r1, #0
 810353e:	4618      	mov	r0, r3
 8103540:	f000 f9c2 	bl	81038c8 <RCCEx_PLL2_Config>
 8103544:	4603      	mov	r3, r0
 8103546:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103548:	e012      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	3324      	adds	r3, #36	; 0x24
 810354e:	2102      	movs	r1, #2
 8103550:	4618      	mov	r0, r3
 8103552:	f000 fa6b 	bl	8103a2c <RCCEx_PLL3_Config>
 8103556:	4603      	mov	r3, r0
 8103558:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810355a:	e009      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810355c:	2301      	movs	r3, #1
 810355e:	75fb      	strb	r3, [r7, #23]
      break;
 8103560:	e006      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103562:	bf00      	nop
 8103564:	e004      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103566:	bf00      	nop
 8103568:	e002      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810356a:	bf00      	nop
 810356c:	e000      	b.n	8103570 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810356e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103570:	7dfb      	ldrb	r3, [r7, #23]
 8103572:	2b00      	cmp	r3, #0
 8103574:	d10a      	bne.n	810358c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103576:	4b3c      	ldr	r3, [pc, #240]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810357a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103584:	4938      	ldr	r1, [pc, #224]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103586:	4313      	orrs	r3, r2
 8103588:	658b      	str	r3, [r1, #88]	; 0x58
 810358a:	e001      	b.n	8103590 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810358c:	7dfb      	ldrb	r3, [r7, #23]
 810358e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	f003 0308 	and.w	r3, r3, #8
 8103598:	2b00      	cmp	r3, #0
 810359a:	d01a      	beq.n	81035d2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81035a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81035a6:	d10a      	bne.n	81035be <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	3324      	adds	r3, #36	; 0x24
 81035ac:	2102      	movs	r1, #2
 81035ae:	4618      	mov	r0, r3
 81035b0:	f000 fa3c 	bl	8103a2c <RCCEx_PLL3_Config>
 81035b4:	4603      	mov	r3, r0
 81035b6:	2b00      	cmp	r3, #0
 81035b8:	d001      	beq.n	81035be <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81035ba:	2301      	movs	r3, #1
 81035bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81035be:	4b2a      	ldr	r3, [pc, #168]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81035cc:	4926      	ldr	r1, [pc, #152]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81035ce:	4313      	orrs	r3, r2
 81035d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	681b      	ldr	r3, [r3, #0]
 81035d6:	f003 0310 	and.w	r3, r3, #16
 81035da:	2b00      	cmp	r3, #0
 81035dc:	d01a      	beq.n	8103614 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81035e8:	d10a      	bne.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	3324      	adds	r3, #36	; 0x24
 81035ee:	2102      	movs	r1, #2
 81035f0:	4618      	mov	r0, r3
 81035f2:	f000 fa1b 	bl	8103a2c <RCCEx_PLL3_Config>
 81035f6:	4603      	mov	r3, r0
 81035f8:	2b00      	cmp	r3, #0
 81035fa:	d001      	beq.n	8103600 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 81035fc:	2301      	movs	r3, #1
 81035fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103600:	4b19      	ldr	r3, [pc, #100]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810360e:	4916      	ldr	r1, [pc, #88]	; (8103668 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103610:	4313      	orrs	r3, r2
 8103612:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810361c:	2b00      	cmp	r3, #0
 810361e:	d036      	beq.n	810368e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810362a:	d01f      	beq.n	810366c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810362c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103630:	d817      	bhi.n	8103662 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103632:	2b00      	cmp	r3, #0
 8103634:	d003      	beq.n	810363e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810363a:	d009      	beq.n	8103650 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810363c:	e011      	b.n	8103662 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	3304      	adds	r3, #4
 8103642:	2100      	movs	r1, #0
 8103644:	4618      	mov	r0, r3
 8103646:	f000 f93f 	bl	81038c8 <RCCEx_PLL2_Config>
 810364a:	4603      	mov	r3, r0
 810364c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810364e:	e00e      	b.n	810366e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	3324      	adds	r3, #36	; 0x24
 8103654:	2102      	movs	r1, #2
 8103656:	4618      	mov	r0, r3
 8103658:	f000 f9e8 	bl	8103a2c <RCCEx_PLL3_Config>
 810365c:	4603      	mov	r3, r0
 810365e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103660:	e005      	b.n	810366e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103662:	2301      	movs	r3, #1
 8103664:	75fb      	strb	r3, [r7, #23]
      break;
 8103666:	e002      	b.n	810366e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103668:	58024400 	.word	0x58024400
      break;
 810366c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810366e:	7dfb      	ldrb	r3, [r7, #23]
 8103670:	2b00      	cmp	r3, #0
 8103672:	d10a      	bne.n	810368a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103674:	4b93      	ldr	r3, [pc, #588]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103682:	4990      	ldr	r1, [pc, #576]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103684:	4313      	orrs	r3, r2
 8103686:	658b      	str	r3, [r1, #88]	; 0x58
 8103688:	e001      	b.n	810368e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810368a:	7dfb      	ldrb	r3, [r7, #23]
 810368c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103696:	2b00      	cmp	r3, #0
 8103698:	d033      	beq.n	8103702 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810369a:	687b      	ldr	r3, [r7, #4]
 810369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81036a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81036a4:	d01c      	beq.n	81036e0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81036a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81036aa:	d816      	bhi.n	81036da <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81036ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81036b0:	d003      	beq.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81036b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81036b6:	d007      	beq.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81036b8:	e00f      	b.n	81036da <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036ba:	4b82      	ldr	r3, [pc, #520]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036be:	4a81      	ldr	r2, [pc, #516]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81036c6:	e00c      	b.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	3324      	adds	r3, #36	; 0x24
 81036cc:	2101      	movs	r1, #1
 81036ce:	4618      	mov	r0, r3
 81036d0:	f000 f9ac 	bl	8103a2c <RCCEx_PLL3_Config>
 81036d4:	4603      	mov	r3, r0
 81036d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81036d8:	e003      	b.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036da:	2301      	movs	r3, #1
 81036dc:	75fb      	strb	r3, [r7, #23]
      break;
 81036de:	e000      	b.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 81036e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036e2:	7dfb      	ldrb	r3, [r7, #23]
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d10a      	bne.n	81036fe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81036e8:	4b76      	ldr	r3, [pc, #472]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81036f6:	4973      	ldr	r1, [pc, #460]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81036f8:	4313      	orrs	r3, r2
 81036fa:	654b      	str	r3, [r1, #84]	; 0x54
 81036fc:	e001      	b.n	8103702 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036fe:	7dfb      	ldrb	r3, [r7, #23]
 8103700:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	681b      	ldr	r3, [r3, #0]
 8103706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810370a:	2b00      	cmp	r3, #0
 810370c:	d029      	beq.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103712:	2b00      	cmp	r3, #0
 8103714:	d003      	beq.n	810371e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810371a:	d007      	beq.n	810372c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810371c:	e00f      	b.n	810373e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810371e:	4b69      	ldr	r3, [pc, #420]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103722:	4a68      	ldr	r2, [pc, #416]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810372a:	e00b      	b.n	8103744 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	3304      	adds	r3, #4
 8103730:	2102      	movs	r1, #2
 8103732:	4618      	mov	r0, r3
 8103734:	f000 f8c8 	bl	81038c8 <RCCEx_PLL2_Config>
 8103738:	4603      	mov	r3, r0
 810373a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810373c:	e002      	b.n	8103744 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810373e:	2301      	movs	r3, #1
 8103740:	75fb      	strb	r3, [r7, #23]
      break;
 8103742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103744:	7dfb      	ldrb	r3, [r7, #23]
 8103746:	2b00      	cmp	r3, #0
 8103748:	d109      	bne.n	810375e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810374a:	4b5e      	ldr	r3, [pc, #376]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810374e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103756:	495b      	ldr	r1, [pc, #364]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103758:	4313      	orrs	r3, r2
 810375a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810375c:	e001      	b.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810375e:	7dfb      	ldrb	r3, [r7, #23]
 8103760:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810376a:	2b00      	cmp	r3, #0
 810376c:	d00a      	beq.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	3324      	adds	r3, #36	; 0x24
 8103772:	2102      	movs	r1, #2
 8103774:	4618      	mov	r0, r3
 8103776:	f000 f959 	bl	8103a2c <RCCEx_PLL3_Config>
 810377a:	4603      	mov	r3, r0
 810377c:	2b00      	cmp	r3, #0
 810377e:	d001      	beq.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103780:	2301      	movs	r3, #1
 8103782:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810378c:	2b00      	cmp	r3, #0
 810378e:	d030      	beq.n	81037f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103798:	d017      	beq.n	81037ca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810379a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810379e:	d811      	bhi.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81037a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81037a4:	d013      	beq.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81037a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81037aa:	d80b      	bhi.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d010      	beq.n	81037d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81037b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81037b4:	d106      	bne.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81037b6:	4b43      	ldr	r3, [pc, #268]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ba:	4a42      	ldr	r2, [pc, #264]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81037c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81037c2:	e007      	b.n	81037d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037c4:	2301      	movs	r3, #1
 81037c6:	75fb      	strb	r3, [r7, #23]
      break;
 81037c8:	e004      	b.n	81037d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81037ca:	bf00      	nop
 81037cc:	e002      	b.n	81037d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81037ce:	bf00      	nop
 81037d0:	e000      	b.n	81037d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81037d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037d4:	7dfb      	ldrb	r3, [r7, #23]
 81037d6:	2b00      	cmp	r3, #0
 81037d8:	d109      	bne.n	81037ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81037da:	4b3a      	ldr	r3, [pc, #232]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81037e6:	4937      	ldr	r1, [pc, #220]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037e8:	4313      	orrs	r3, r2
 81037ea:	654b      	str	r3, [r1, #84]	; 0x54
 81037ec:	e001      	b.n	81037f2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037ee:	7dfb      	ldrb	r3, [r7, #23]
 81037f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	681b      	ldr	r3, [r3, #0]
 81037f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81037fa:	2b00      	cmp	r3, #0
 81037fc:	d008      	beq.n	8103810 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81037fe:	4b31      	ldr	r3, [pc, #196]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810380a:	492e      	ldr	r1, [pc, #184]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810380c:	4313      	orrs	r3, r2
 810380e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103818:	2b00      	cmp	r3, #0
 810381a:	d009      	beq.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810381c:	4b29      	ldr	r3, [pc, #164]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810381e:	691b      	ldr	r3, [r3, #16]
 8103820:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810382a:	4926      	ldr	r1, [pc, #152]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810382c:	4313      	orrs	r3, r2
 810382e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103838:	2b00      	cmp	r3, #0
 810383a:	d008      	beq.n	810384e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810383c:	4b21      	ldr	r3, [pc, #132]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103840:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103848:	491e      	ldr	r1, [pc, #120]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810384a:	4313      	orrs	r3, r2
 810384c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103856:	2b00      	cmp	r3, #0
 8103858:	d00d      	beq.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810385a:	4b1a      	ldr	r3, [pc, #104]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810385c:	691b      	ldr	r3, [r3, #16]
 810385e:	4a19      	ldr	r2, [pc, #100]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103864:	6113      	str	r3, [r2, #16]
 8103866:	4b17      	ldr	r3, [pc, #92]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103868:	691a      	ldr	r2, [r3, #16]
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103870:	4914      	ldr	r1, [pc, #80]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103872:	4313      	orrs	r3, r2
 8103874:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	2b00      	cmp	r3, #0
 810387c:	da08      	bge.n	8103890 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810387e:	4b11      	ldr	r3, [pc, #68]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103882:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810388a:	490e      	ldr	r1, [pc, #56]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810388c:	4313      	orrs	r3, r2
 810388e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103898:	2b00      	cmp	r3, #0
 810389a:	d009      	beq.n	81038b0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810389c:	4b09      	ldr	r3, [pc, #36]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81038aa:	4906      	ldr	r1, [pc, #24]	; (81038c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038ac:	4313      	orrs	r3, r2
 81038ae:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81038b0:	7dbb      	ldrb	r3, [r7, #22]
 81038b2:	2b00      	cmp	r3, #0
 81038b4:	d101      	bne.n	81038ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81038b6:	2300      	movs	r3, #0
 81038b8:	e000      	b.n	81038bc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81038ba:	2301      	movs	r3, #1
}
 81038bc:	4618      	mov	r0, r3
 81038be:	3718      	adds	r7, #24
 81038c0:	46bd      	mov	sp, r7
 81038c2:	bd80      	pop	{r7, pc}
 81038c4:	58024400 	.word	0x58024400

081038c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81038c8:	b580      	push	{r7, lr}
 81038ca:	b084      	sub	sp, #16
 81038cc:	af00      	add	r7, sp, #0
 81038ce:	6078      	str	r0, [r7, #4]
 81038d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81038d2:	2300      	movs	r3, #0
 81038d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81038d6:	4b54      	ldr	r3, [pc, #336]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038da:	f003 0303 	and.w	r3, r3, #3
 81038de:	2b03      	cmp	r3, #3
 81038e0:	d101      	bne.n	81038e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81038e2:	2301      	movs	r3, #1
 81038e4:	e09b      	b.n	8103a1e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81038e6:	4b50      	ldr	r3, [pc, #320]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81038e8:	681b      	ldr	r3, [r3, #0]
 81038ea:	4a4f      	ldr	r2, [pc, #316]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81038ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81038f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81038f2:	f7fd fe93 	bl	810161c <HAL_GetTick>
 81038f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81038f8:	e008      	b.n	810390c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81038fa:	f7fd fe8f 	bl	810161c <HAL_GetTick>
 81038fe:	4602      	mov	r2, r0
 8103900:	68bb      	ldr	r3, [r7, #8]
 8103902:	1ad3      	subs	r3, r2, r3
 8103904:	2b02      	cmp	r3, #2
 8103906:	d901      	bls.n	810390c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103908:	2303      	movs	r3, #3
 810390a:	e088      	b.n	8103a1e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810390c:	4b46      	ldr	r3, [pc, #280]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103914:	2b00      	cmp	r3, #0
 8103916:	d1f0      	bne.n	81038fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103918:	4b43      	ldr	r3, [pc, #268]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 810391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810391c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	031b      	lsls	r3, r3, #12
 8103926:	4940      	ldr	r1, [pc, #256]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103928:	4313      	orrs	r3, r2
 810392a:	628b      	str	r3, [r1, #40]	; 0x28
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	685b      	ldr	r3, [r3, #4]
 8103930:	3b01      	subs	r3, #1
 8103932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	689b      	ldr	r3, [r3, #8]
 810393a:	3b01      	subs	r3, #1
 810393c:	025b      	lsls	r3, r3, #9
 810393e:	b29b      	uxth	r3, r3
 8103940:	431a      	orrs	r2, r3
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	68db      	ldr	r3, [r3, #12]
 8103946:	3b01      	subs	r3, #1
 8103948:	041b      	lsls	r3, r3, #16
 810394a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810394e:	431a      	orrs	r2, r3
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	691b      	ldr	r3, [r3, #16]
 8103954:	3b01      	subs	r3, #1
 8103956:	061b      	lsls	r3, r3, #24
 8103958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810395c:	4932      	ldr	r1, [pc, #200]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 810395e:	4313      	orrs	r3, r2
 8103960:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103962:	4b31      	ldr	r3, [pc, #196]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103966:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	695b      	ldr	r3, [r3, #20]
 810396e:	492e      	ldr	r1, [pc, #184]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103970:	4313      	orrs	r3, r2
 8103972:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103974:	4b2c      	ldr	r3, [pc, #176]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103978:	f023 0220 	bic.w	r2, r3, #32
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	699b      	ldr	r3, [r3, #24]
 8103980:	4929      	ldr	r1, [pc, #164]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103982:	4313      	orrs	r3, r2
 8103984:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103986:	4b28      	ldr	r3, [pc, #160]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810398a:	4a27      	ldr	r2, [pc, #156]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 810398c:	f023 0310 	bic.w	r3, r3, #16
 8103990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103992:	4b25      	ldr	r3, [pc, #148]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810399a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810399e:	687a      	ldr	r2, [r7, #4]
 81039a0:	69d2      	ldr	r2, [r2, #28]
 81039a2:	00d2      	lsls	r2, r2, #3
 81039a4:	4920      	ldr	r1, [pc, #128]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039a6:	4313      	orrs	r3, r2
 81039a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81039aa:	4b1f      	ldr	r3, [pc, #124]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039ae:	4a1e      	ldr	r2, [pc, #120]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039b0:	f043 0310 	orr.w	r3, r3, #16
 81039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81039b6:	683b      	ldr	r3, [r7, #0]
 81039b8:	2b00      	cmp	r3, #0
 81039ba:	d106      	bne.n	81039ca <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81039bc:	4b1a      	ldr	r3, [pc, #104]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039c0:	4a19      	ldr	r2, [pc, #100]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81039c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81039c8:	e00f      	b.n	81039ea <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81039ca:	683b      	ldr	r3, [r7, #0]
 81039cc:	2b01      	cmp	r3, #1
 81039ce:	d106      	bne.n	81039de <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81039d0:	4b15      	ldr	r3, [pc, #84]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039d4:	4a14      	ldr	r2, [pc, #80]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81039da:	62d3      	str	r3, [r2, #44]	; 0x2c
 81039dc:	e005      	b.n	81039ea <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81039de:	4b12      	ldr	r3, [pc, #72]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039e2:	4a11      	ldr	r2, [pc, #68]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81039e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81039ea:	4b0f      	ldr	r3, [pc, #60]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	4a0e      	ldr	r2, [pc, #56]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 81039f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81039f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81039f6:	f7fd fe11 	bl	810161c <HAL_GetTick>
 81039fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81039fc:	e008      	b.n	8103a10 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81039fe:	f7fd fe0d 	bl	810161c <HAL_GetTick>
 8103a02:	4602      	mov	r2, r0
 8103a04:	68bb      	ldr	r3, [r7, #8]
 8103a06:	1ad3      	subs	r3, r2, r3
 8103a08:	2b02      	cmp	r3, #2
 8103a0a:	d901      	bls.n	8103a10 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103a0c:	2303      	movs	r3, #3
 8103a0e:	e006      	b.n	8103a1e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103a10:	4b05      	ldr	r3, [pc, #20]	; (8103a28 <RCCEx_PLL2_Config+0x160>)
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103a18:	2b00      	cmp	r3, #0
 8103a1a:	d0f0      	beq.n	81039fe <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8103a1e:	4618      	mov	r0, r3
 8103a20:	3710      	adds	r7, #16
 8103a22:	46bd      	mov	sp, r7
 8103a24:	bd80      	pop	{r7, pc}
 8103a26:	bf00      	nop
 8103a28:	58024400 	.word	0x58024400

08103a2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103a2c:	b580      	push	{r7, lr}
 8103a2e:	b084      	sub	sp, #16
 8103a30:	af00      	add	r7, sp, #0
 8103a32:	6078      	str	r0, [r7, #4]
 8103a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103a36:	2300      	movs	r3, #0
 8103a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103a3a:	4b54      	ldr	r3, [pc, #336]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a3e:	f003 0303 	and.w	r3, r3, #3
 8103a42:	2b03      	cmp	r3, #3
 8103a44:	d101      	bne.n	8103a4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103a46:	2301      	movs	r3, #1
 8103a48:	e09b      	b.n	8103b82 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103a4a:	4b50      	ldr	r3, [pc, #320]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	4a4f      	ldr	r2, [pc, #316]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103a56:	f7fd fde1 	bl	810161c <HAL_GetTick>
 8103a5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103a5c:	e008      	b.n	8103a70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103a5e:	f7fd fddd 	bl	810161c <HAL_GetTick>
 8103a62:	4602      	mov	r2, r0
 8103a64:	68bb      	ldr	r3, [r7, #8]
 8103a66:	1ad3      	subs	r3, r2, r3
 8103a68:	2b02      	cmp	r3, #2
 8103a6a:	d901      	bls.n	8103a70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103a6c:	2303      	movs	r3, #3
 8103a6e:	e088      	b.n	8103b82 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103a70:	4b46      	ldr	r3, [pc, #280]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103a78:	2b00      	cmp	r3, #0
 8103a7a:	d1f0      	bne.n	8103a5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103a7c:	4b43      	ldr	r3, [pc, #268]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	051b      	lsls	r3, r3, #20
 8103a8a:	4940      	ldr	r1, [pc, #256]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103a8c:	4313      	orrs	r3, r2
 8103a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	685b      	ldr	r3, [r3, #4]
 8103a94:	3b01      	subs	r3, #1
 8103a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	689b      	ldr	r3, [r3, #8]
 8103a9e:	3b01      	subs	r3, #1
 8103aa0:	025b      	lsls	r3, r3, #9
 8103aa2:	b29b      	uxth	r3, r3
 8103aa4:	431a      	orrs	r2, r3
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	68db      	ldr	r3, [r3, #12]
 8103aaa:	3b01      	subs	r3, #1
 8103aac:	041b      	lsls	r3, r3, #16
 8103aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103ab2:	431a      	orrs	r2, r3
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	691b      	ldr	r3, [r3, #16]
 8103ab8:	3b01      	subs	r3, #1
 8103aba:	061b      	lsls	r3, r3, #24
 8103abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103ac0:	4932      	ldr	r1, [pc, #200]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103ac2:	4313      	orrs	r3, r2
 8103ac4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103ac6:	4b31      	ldr	r3, [pc, #196]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	695b      	ldr	r3, [r3, #20]
 8103ad2:	492e      	ldr	r1, [pc, #184]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103ad4:	4313      	orrs	r3, r2
 8103ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103ad8:	4b2c      	ldr	r3, [pc, #176]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103adc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	699b      	ldr	r3, [r3, #24]
 8103ae4:	4929      	ldr	r1, [pc, #164]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103ae6:	4313      	orrs	r3, r2
 8103ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103aea:	4b28      	ldr	r3, [pc, #160]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aee:	4a27      	ldr	r2, [pc, #156]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103af6:	4b25      	ldr	r3, [pc, #148]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103afe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103b02:	687a      	ldr	r2, [r7, #4]
 8103b04:	69d2      	ldr	r2, [r2, #28]
 8103b06:	00d2      	lsls	r2, r2, #3
 8103b08:	4920      	ldr	r1, [pc, #128]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b0a:	4313      	orrs	r3, r2
 8103b0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103b0e:	4b1f      	ldr	r3, [pc, #124]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b12:	4a1e      	ldr	r2, [pc, #120]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103b1a:	683b      	ldr	r3, [r7, #0]
 8103b1c:	2b00      	cmp	r3, #0
 8103b1e:	d106      	bne.n	8103b2e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103b20:	4b1a      	ldr	r3, [pc, #104]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b24:	4a19      	ldr	r2, [pc, #100]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103b2c:	e00f      	b.n	8103b4e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103b2e:	683b      	ldr	r3, [r7, #0]
 8103b30:	2b01      	cmp	r3, #1
 8103b32:	d106      	bne.n	8103b42 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103b34:	4b15      	ldr	r3, [pc, #84]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b38:	4a14      	ldr	r2, [pc, #80]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103b40:	e005      	b.n	8103b4e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103b42:	4b12      	ldr	r3, [pc, #72]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b46:	4a11      	ldr	r2, [pc, #68]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103b4e:	4b0f      	ldr	r3, [pc, #60]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	4a0e      	ldr	r2, [pc, #56]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103b5a:	f7fd fd5f 	bl	810161c <HAL_GetTick>
 8103b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103b60:	e008      	b.n	8103b74 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103b62:	f7fd fd5b 	bl	810161c <HAL_GetTick>
 8103b66:	4602      	mov	r2, r0
 8103b68:	68bb      	ldr	r3, [r7, #8]
 8103b6a:	1ad3      	subs	r3, r2, r3
 8103b6c:	2b02      	cmp	r3, #2
 8103b6e:	d901      	bls.n	8103b74 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103b70:	2303      	movs	r3, #3
 8103b72:	e006      	b.n	8103b82 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103b74:	4b05      	ldr	r3, [pc, #20]	; (8103b8c <RCCEx_PLL3_Config+0x160>)
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103b7c:	2b00      	cmp	r3, #0
 8103b7e:	d0f0      	beq.n	8103b62 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8103b82:	4618      	mov	r0, r3
 8103b84:	3710      	adds	r7, #16
 8103b86:	46bd      	mov	sp, r7
 8103b88:	bd80      	pop	{r7, pc}
 8103b8a:	bf00      	nop
 8103b8c:	58024400 	.word	0x58024400

08103b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103b90:	b580      	push	{r7, lr}
 8103b92:	b082      	sub	sp, #8
 8103b94:	af00      	add	r7, sp, #0
 8103b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d101      	bne.n	8103ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103b9e:	2301      	movs	r3, #1
 8103ba0:	e049      	b.n	8103c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103ba8:	b2db      	uxtb	r3, r3
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	d106      	bne.n	8103bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	2200      	movs	r2, #0
 8103bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103bb6:	6878      	ldr	r0, [r7, #4]
 8103bb8:	f7fd fb6a 	bl	8101290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	2202      	movs	r2, #2
 8103bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681a      	ldr	r2, [r3, #0]
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	3304      	adds	r3, #4
 8103bcc:	4619      	mov	r1, r3
 8103bce:	4610      	mov	r0, r2
 8103bd0:	f000 fbd0 	bl	8104374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	2201      	movs	r2, #1
 8103bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	2201      	movs	r2, #1
 8103be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	2201      	movs	r2, #1
 8103be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	2201      	movs	r2, #1
 8103bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	2201      	movs	r2, #1
 8103bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	2201      	movs	r2, #1
 8103c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	2201      	movs	r2, #1
 8103c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	2201      	movs	r2, #1
 8103c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	2201      	movs	r2, #1
 8103c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	2201      	movs	r2, #1
 8103c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	2201      	movs	r2, #1
 8103c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	2201      	movs	r2, #1
 8103c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103c34:	2300      	movs	r3, #0
}
 8103c36:	4618      	mov	r0, r3
 8103c38:	3708      	adds	r7, #8
 8103c3a:	46bd      	mov	sp, r7
 8103c3c:	bd80      	pop	{r7, pc}

08103c3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8103c3e:	b580      	push	{r7, lr}
 8103c40:	b082      	sub	sp, #8
 8103c42:	af00      	add	r7, sp, #0
 8103c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	2b00      	cmp	r3, #0
 8103c4a:	d101      	bne.n	8103c50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8103c4c:	2301      	movs	r3, #1
 8103c4e:	e049      	b.n	8103ce4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103c56:	b2db      	uxtb	r3, r3
 8103c58:	2b00      	cmp	r3, #0
 8103c5a:	d106      	bne.n	8103c6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	2200      	movs	r2, #0
 8103c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8103c64:	6878      	ldr	r0, [r7, #4]
 8103c66:	f7fd faf1 	bl	810124c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	2202      	movs	r2, #2
 8103c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681a      	ldr	r2, [r3, #0]
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	3304      	adds	r3, #4
 8103c7a:	4619      	mov	r1, r3
 8103c7c:	4610      	mov	r0, r2
 8103c7e:	f000 fb79 	bl	8104374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	2201      	movs	r2, #1
 8103c86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	2201      	movs	r2, #1
 8103c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	2201      	movs	r2, #1
 8103c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	2201      	movs	r2, #1
 8103c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	2201      	movs	r2, #1
 8103ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	2201      	movs	r2, #1
 8103cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	2201      	movs	r2, #1
 8103cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	2201      	movs	r2, #1
 8103cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	2201      	movs	r2, #1
 8103cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	2201      	movs	r2, #1
 8103cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	2201      	movs	r2, #1
 8103cd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	2201      	movs	r2, #1
 8103cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103ce2:	2300      	movs	r3, #0
}
 8103ce4:	4618      	mov	r0, r3
 8103ce6:	3708      	adds	r7, #8
 8103ce8:	46bd      	mov	sp, r7
 8103cea:	bd80      	pop	{r7, pc}

08103cec <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8103cec:	b580      	push	{r7, lr}
 8103cee:	b082      	sub	sp, #8
 8103cf0:	af00      	add	r7, sp, #0
 8103cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	2202      	movs	r2, #2
 8103cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	6a1a      	ldr	r2, [r3, #32]
 8103d02:	f241 1311 	movw	r3, #4369	; 0x1111
 8103d06:	4013      	ands	r3, r2
 8103d08:	2b00      	cmp	r3, #0
 8103d0a:	d10f      	bne.n	8103d2c <HAL_TIM_PWM_DeInit+0x40>
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	6a1a      	ldr	r2, [r3, #32]
 8103d12:	f240 4344 	movw	r3, #1092	; 0x444
 8103d16:	4013      	ands	r3, r2
 8103d18:	2b00      	cmp	r3, #0
 8103d1a:	d107      	bne.n	8103d2c <HAL_TIM_PWM_DeInit+0x40>
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	681a      	ldr	r2, [r3, #0]
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	f022 0201 	bic.w	r2, r2, #1
 8103d2a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8103d2c:	6878      	ldr	r0, [r7, #4]
 8103d2e:	f7fd fb55 	bl	81013dc <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	2200      	movs	r2, #0
 8103d36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	2200      	movs	r2, #0
 8103d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	2200      	movs	r2, #0
 8103d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	2200      	movs	r2, #0
 8103d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	2200      	movs	r2, #0
 8103d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	2200      	movs	r2, #0
 8103d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	2200      	movs	r2, #0
 8103d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	2200      	movs	r2, #0
 8103d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	2200      	movs	r2, #0
 8103d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	2200      	movs	r2, #0
 8103d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	2200      	movs	r2, #0
 8103d86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	2200      	movs	r2, #0
 8103d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	2200      	movs	r2, #0
 8103d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8103d9a:	2300      	movs	r3, #0
}
 8103d9c:	4618      	mov	r0, r3
 8103d9e:	3708      	adds	r7, #8
 8103da0:	46bd      	mov	sp, r7
 8103da2:	bd80      	pop	{r7, pc}

08103da4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8103da4:	b580      	push	{r7, lr}
 8103da6:	b084      	sub	sp, #16
 8103da8:	af00      	add	r7, sp, #0
 8103daa:	6078      	str	r0, [r7, #4]
 8103dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8103dae:	683b      	ldr	r3, [r7, #0]
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	d109      	bne.n	8103dc8 <HAL_TIM_PWM_Start+0x24>
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103dba:	b2db      	uxtb	r3, r3
 8103dbc:	2b01      	cmp	r3, #1
 8103dbe:	bf14      	ite	ne
 8103dc0:	2301      	movne	r3, #1
 8103dc2:	2300      	moveq	r3, #0
 8103dc4:	b2db      	uxtb	r3, r3
 8103dc6:	e03c      	b.n	8103e42 <HAL_TIM_PWM_Start+0x9e>
 8103dc8:	683b      	ldr	r3, [r7, #0]
 8103dca:	2b04      	cmp	r3, #4
 8103dcc:	d109      	bne.n	8103de2 <HAL_TIM_PWM_Start+0x3e>
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103dd4:	b2db      	uxtb	r3, r3
 8103dd6:	2b01      	cmp	r3, #1
 8103dd8:	bf14      	ite	ne
 8103dda:	2301      	movne	r3, #1
 8103ddc:	2300      	moveq	r3, #0
 8103dde:	b2db      	uxtb	r3, r3
 8103de0:	e02f      	b.n	8103e42 <HAL_TIM_PWM_Start+0x9e>
 8103de2:	683b      	ldr	r3, [r7, #0]
 8103de4:	2b08      	cmp	r3, #8
 8103de6:	d109      	bne.n	8103dfc <HAL_TIM_PWM_Start+0x58>
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103dee:	b2db      	uxtb	r3, r3
 8103df0:	2b01      	cmp	r3, #1
 8103df2:	bf14      	ite	ne
 8103df4:	2301      	movne	r3, #1
 8103df6:	2300      	moveq	r3, #0
 8103df8:	b2db      	uxtb	r3, r3
 8103dfa:	e022      	b.n	8103e42 <HAL_TIM_PWM_Start+0x9e>
 8103dfc:	683b      	ldr	r3, [r7, #0]
 8103dfe:	2b0c      	cmp	r3, #12
 8103e00:	d109      	bne.n	8103e16 <HAL_TIM_PWM_Start+0x72>
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103e08:	b2db      	uxtb	r3, r3
 8103e0a:	2b01      	cmp	r3, #1
 8103e0c:	bf14      	ite	ne
 8103e0e:	2301      	movne	r3, #1
 8103e10:	2300      	moveq	r3, #0
 8103e12:	b2db      	uxtb	r3, r3
 8103e14:	e015      	b.n	8103e42 <HAL_TIM_PWM_Start+0x9e>
 8103e16:	683b      	ldr	r3, [r7, #0]
 8103e18:	2b10      	cmp	r3, #16
 8103e1a:	d109      	bne.n	8103e30 <HAL_TIM_PWM_Start+0x8c>
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103e22:	b2db      	uxtb	r3, r3
 8103e24:	2b01      	cmp	r3, #1
 8103e26:	bf14      	ite	ne
 8103e28:	2301      	movne	r3, #1
 8103e2a:	2300      	moveq	r3, #0
 8103e2c:	b2db      	uxtb	r3, r3
 8103e2e:	e008      	b.n	8103e42 <HAL_TIM_PWM_Start+0x9e>
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8103e36:	b2db      	uxtb	r3, r3
 8103e38:	2b01      	cmp	r3, #1
 8103e3a:	bf14      	ite	ne
 8103e3c:	2301      	movne	r3, #1
 8103e3e:	2300      	moveq	r3, #0
 8103e40:	b2db      	uxtb	r3, r3
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d001      	beq.n	8103e4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8103e46:	2301      	movs	r3, #1
 8103e48:	e09c      	b.n	8103f84 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8103e4a:	683b      	ldr	r3, [r7, #0]
 8103e4c:	2b00      	cmp	r3, #0
 8103e4e:	d104      	bne.n	8103e5a <HAL_TIM_PWM_Start+0xb6>
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	2202      	movs	r2, #2
 8103e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103e58:	e023      	b.n	8103ea2 <HAL_TIM_PWM_Start+0xfe>
 8103e5a:	683b      	ldr	r3, [r7, #0]
 8103e5c:	2b04      	cmp	r3, #4
 8103e5e:	d104      	bne.n	8103e6a <HAL_TIM_PWM_Start+0xc6>
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	2202      	movs	r2, #2
 8103e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103e68:	e01b      	b.n	8103ea2 <HAL_TIM_PWM_Start+0xfe>
 8103e6a:	683b      	ldr	r3, [r7, #0]
 8103e6c:	2b08      	cmp	r3, #8
 8103e6e:	d104      	bne.n	8103e7a <HAL_TIM_PWM_Start+0xd6>
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	2202      	movs	r2, #2
 8103e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103e78:	e013      	b.n	8103ea2 <HAL_TIM_PWM_Start+0xfe>
 8103e7a:	683b      	ldr	r3, [r7, #0]
 8103e7c:	2b0c      	cmp	r3, #12
 8103e7e:	d104      	bne.n	8103e8a <HAL_TIM_PWM_Start+0xe6>
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	2202      	movs	r2, #2
 8103e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103e88:	e00b      	b.n	8103ea2 <HAL_TIM_PWM_Start+0xfe>
 8103e8a:	683b      	ldr	r3, [r7, #0]
 8103e8c:	2b10      	cmp	r3, #16
 8103e8e:	d104      	bne.n	8103e9a <HAL_TIM_PWM_Start+0xf6>
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	2202      	movs	r2, #2
 8103e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103e98:	e003      	b.n	8103ea2 <HAL_TIM_PWM_Start+0xfe>
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	2202      	movs	r2, #2
 8103e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	681b      	ldr	r3, [r3, #0]
 8103ea6:	2201      	movs	r2, #1
 8103ea8:	6839      	ldr	r1, [r7, #0]
 8103eaa:	4618      	mov	r0, r3
 8103eac:	f000 fdca 	bl	8104a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	4a35      	ldr	r2, [pc, #212]	; (8103f8c <HAL_TIM_PWM_Start+0x1e8>)
 8103eb6:	4293      	cmp	r3, r2
 8103eb8:	d013      	beq.n	8103ee2 <HAL_TIM_PWM_Start+0x13e>
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	4a34      	ldr	r2, [pc, #208]	; (8103f90 <HAL_TIM_PWM_Start+0x1ec>)
 8103ec0:	4293      	cmp	r3, r2
 8103ec2:	d00e      	beq.n	8103ee2 <HAL_TIM_PWM_Start+0x13e>
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	4a32      	ldr	r2, [pc, #200]	; (8103f94 <HAL_TIM_PWM_Start+0x1f0>)
 8103eca:	4293      	cmp	r3, r2
 8103ecc:	d009      	beq.n	8103ee2 <HAL_TIM_PWM_Start+0x13e>
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	4a31      	ldr	r2, [pc, #196]	; (8103f98 <HAL_TIM_PWM_Start+0x1f4>)
 8103ed4:	4293      	cmp	r3, r2
 8103ed6:	d004      	beq.n	8103ee2 <HAL_TIM_PWM_Start+0x13e>
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	4a2f      	ldr	r2, [pc, #188]	; (8103f9c <HAL_TIM_PWM_Start+0x1f8>)
 8103ede:	4293      	cmp	r3, r2
 8103ee0:	d101      	bne.n	8103ee6 <HAL_TIM_PWM_Start+0x142>
 8103ee2:	2301      	movs	r3, #1
 8103ee4:	e000      	b.n	8103ee8 <HAL_TIM_PWM_Start+0x144>
 8103ee6:	2300      	movs	r3, #0
 8103ee8:	2b00      	cmp	r3, #0
 8103eea:	d007      	beq.n	8103efc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	681b      	ldr	r3, [r3, #0]
 8103ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103ef2:	687b      	ldr	r3, [r7, #4]
 8103ef4:	681b      	ldr	r3, [r3, #0]
 8103ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103efa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	4a22      	ldr	r2, [pc, #136]	; (8103f8c <HAL_TIM_PWM_Start+0x1e8>)
 8103f02:	4293      	cmp	r3, r2
 8103f04:	d01d      	beq.n	8103f42 <HAL_TIM_PWM_Start+0x19e>
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	681b      	ldr	r3, [r3, #0]
 8103f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103f0e:	d018      	beq.n	8103f42 <HAL_TIM_PWM_Start+0x19e>
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	4a22      	ldr	r2, [pc, #136]	; (8103fa0 <HAL_TIM_PWM_Start+0x1fc>)
 8103f16:	4293      	cmp	r3, r2
 8103f18:	d013      	beq.n	8103f42 <HAL_TIM_PWM_Start+0x19e>
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	681b      	ldr	r3, [r3, #0]
 8103f1e:	4a21      	ldr	r2, [pc, #132]	; (8103fa4 <HAL_TIM_PWM_Start+0x200>)
 8103f20:	4293      	cmp	r3, r2
 8103f22:	d00e      	beq.n	8103f42 <HAL_TIM_PWM_Start+0x19e>
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	4a1f      	ldr	r2, [pc, #124]	; (8103fa8 <HAL_TIM_PWM_Start+0x204>)
 8103f2a:	4293      	cmp	r3, r2
 8103f2c:	d009      	beq.n	8103f42 <HAL_TIM_PWM_Start+0x19e>
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	681b      	ldr	r3, [r3, #0]
 8103f32:	4a17      	ldr	r2, [pc, #92]	; (8103f90 <HAL_TIM_PWM_Start+0x1ec>)
 8103f34:	4293      	cmp	r3, r2
 8103f36:	d004      	beq.n	8103f42 <HAL_TIM_PWM_Start+0x19e>
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	681b      	ldr	r3, [r3, #0]
 8103f3c:	4a1b      	ldr	r2, [pc, #108]	; (8103fac <HAL_TIM_PWM_Start+0x208>)
 8103f3e:	4293      	cmp	r3, r2
 8103f40:	d115      	bne.n	8103f6e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103f42:	687b      	ldr	r3, [r7, #4]
 8103f44:	681b      	ldr	r3, [r3, #0]
 8103f46:	689a      	ldr	r2, [r3, #8]
 8103f48:	4b19      	ldr	r3, [pc, #100]	; (8103fb0 <HAL_TIM_PWM_Start+0x20c>)
 8103f4a:	4013      	ands	r3, r2
 8103f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103f4e:	68fb      	ldr	r3, [r7, #12]
 8103f50:	2b06      	cmp	r3, #6
 8103f52:	d015      	beq.n	8103f80 <HAL_TIM_PWM_Start+0x1dc>
 8103f54:	68fb      	ldr	r3, [r7, #12]
 8103f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103f5a:	d011      	beq.n	8103f80 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	681a      	ldr	r2, [r3, #0]
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	f042 0201 	orr.w	r2, r2, #1
 8103f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103f6c:	e008      	b.n	8103f80 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	681a      	ldr	r2, [r3, #0]
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	f042 0201 	orr.w	r2, r2, #1
 8103f7c:	601a      	str	r2, [r3, #0]
 8103f7e:	e000      	b.n	8103f82 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103f80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103f82:	2300      	movs	r3, #0
}
 8103f84:	4618      	mov	r0, r3
 8103f86:	3710      	adds	r7, #16
 8103f88:	46bd      	mov	sp, r7
 8103f8a:	bd80      	pop	{r7, pc}
 8103f8c:	40010000 	.word	0x40010000
 8103f90:	40010400 	.word	0x40010400
 8103f94:	40014000 	.word	0x40014000
 8103f98:	40014400 	.word	0x40014400
 8103f9c:	40014800 	.word	0x40014800
 8103fa0:	40000400 	.word	0x40000400
 8103fa4:	40000800 	.word	0x40000800
 8103fa8:	40000c00 	.word	0x40000c00
 8103fac:	40001800 	.word	0x40001800
 8103fb0:	00010007 	.word	0x00010007

08103fb4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8103fb4:	b580      	push	{r7, lr}
 8103fb6:	b082      	sub	sp, #8
 8103fb8:	af00      	add	r7, sp, #0
 8103fba:	6078      	str	r0, [r7, #4]
 8103fbc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	2b00      	cmp	r3, #0
 8103fc2:	d101      	bne.n	8103fc8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8103fc4:	2301      	movs	r3, #1
 8103fc6:	e041      	b.n	810404c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103fce:	b2db      	uxtb	r3, r3
 8103fd0:	2b00      	cmp	r3, #0
 8103fd2:	d106      	bne.n	8103fe2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	2200      	movs	r2, #0
 8103fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8103fdc:	6878      	ldr	r0, [r7, #4]
 8103fde:	f000 f839 	bl	8104054 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	2202      	movs	r2, #2
 8103fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	681a      	ldr	r2, [r3, #0]
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	3304      	adds	r3, #4
 8103ff2:	4619      	mov	r1, r3
 8103ff4:	4610      	mov	r0, r2
 8103ff6:	f000 f9bd 	bl	8104374 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	681b      	ldr	r3, [r3, #0]
 8103ffe:	681a      	ldr	r2, [r3, #0]
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	f022 0208 	bic.w	r2, r2, #8
 8104008:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	6819      	ldr	r1, [r3, #0]
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	683a      	ldr	r2, [r7, #0]
 8104016:	430a      	orrs	r2, r1
 8104018:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	2201      	movs	r2, #1
 810401e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	2201      	movs	r2, #1
 8104026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	2201      	movs	r2, #1
 810402e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	2201      	movs	r2, #1
 8104036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810403a:	687b      	ldr	r3, [r7, #4]
 810403c:	2201      	movs	r2, #1
 810403e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	2201      	movs	r2, #1
 8104046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810404a:	2300      	movs	r3, #0
}
 810404c:	4618      	mov	r0, r3
 810404e:	3708      	adds	r7, #8
 8104050:	46bd      	mov	sp, r7
 8104052:	bd80      	pop	{r7, pc}

08104054 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8104054:	b480      	push	{r7}
 8104056:	b083      	sub	sp, #12
 8104058:	af00      	add	r7, sp, #0
 810405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 810405c:	bf00      	nop
 810405e:	370c      	adds	r7, #12
 8104060:	46bd      	mov	sp, r7
 8104062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104066:	4770      	bx	lr

08104068 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8104068:	b580      	push	{r7, lr}
 810406a:	b084      	sub	sp, #16
 810406c:	af00      	add	r7, sp, #0
 810406e:	6078      	str	r0, [r7, #4]
 8104070:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8104078:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8104080:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8104088:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104090:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104092:	7bfb      	ldrb	r3, [r7, #15]
 8104094:	2b01      	cmp	r3, #1
 8104096:	d108      	bne.n	81040aa <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8104098:	7bbb      	ldrb	r3, [r7, #14]
 810409a:	2b01      	cmp	r3, #1
 810409c:	d105      	bne.n	81040aa <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810409e:	7b7b      	ldrb	r3, [r7, #13]
 81040a0:	2b01      	cmp	r3, #1
 81040a2:	d102      	bne.n	81040aa <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 81040a4:	7b3b      	ldrb	r3, [r7, #12]
 81040a6:	2b01      	cmp	r3, #1
 81040a8:	d001      	beq.n	81040ae <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 81040aa:	2301      	movs	r3, #1
 81040ac:	e044      	b.n	8104138 <HAL_TIM_OnePulse_Start+0xd0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	2202      	movs	r2, #2
 81040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	2202      	movs	r2, #2
 81040ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	2202      	movs	r2, #2
 81040c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	2202      	movs	r2, #2
 81040ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	2201      	movs	r2, #1
 81040d4:	2100      	movs	r1, #0
 81040d6:	4618      	mov	r0, r3
 81040d8:	f000 fcb4 	bl	8104a44 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	2201      	movs	r2, #1
 81040e2:	2104      	movs	r1, #4
 81040e4:	4618      	mov	r0, r3
 81040e6:	f000 fcad 	bl	8104a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	4a14      	ldr	r2, [pc, #80]	; (8104140 <HAL_TIM_OnePulse_Start+0xd8>)
 81040f0:	4293      	cmp	r3, r2
 81040f2:	d013      	beq.n	810411c <HAL_TIM_OnePulse_Start+0xb4>
 81040f4:	687b      	ldr	r3, [r7, #4]
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	4a12      	ldr	r2, [pc, #72]	; (8104144 <HAL_TIM_OnePulse_Start+0xdc>)
 81040fa:	4293      	cmp	r3, r2
 81040fc:	d00e      	beq.n	810411c <HAL_TIM_OnePulse_Start+0xb4>
 81040fe:	687b      	ldr	r3, [r7, #4]
 8104100:	681b      	ldr	r3, [r3, #0]
 8104102:	4a11      	ldr	r2, [pc, #68]	; (8104148 <HAL_TIM_OnePulse_Start+0xe0>)
 8104104:	4293      	cmp	r3, r2
 8104106:	d009      	beq.n	810411c <HAL_TIM_OnePulse_Start+0xb4>
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	681b      	ldr	r3, [r3, #0]
 810410c:	4a0f      	ldr	r2, [pc, #60]	; (810414c <HAL_TIM_OnePulse_Start+0xe4>)
 810410e:	4293      	cmp	r3, r2
 8104110:	d004      	beq.n	810411c <HAL_TIM_OnePulse_Start+0xb4>
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	4a0e      	ldr	r2, [pc, #56]	; (8104150 <HAL_TIM_OnePulse_Start+0xe8>)
 8104118:	4293      	cmp	r3, r2
 810411a:	d101      	bne.n	8104120 <HAL_TIM_OnePulse_Start+0xb8>
 810411c:	2301      	movs	r3, #1
 810411e:	e000      	b.n	8104122 <HAL_TIM_OnePulse_Start+0xba>
 8104120:	2300      	movs	r3, #0
 8104122:	2b00      	cmp	r3, #0
 8104124:	d007      	beq.n	8104136 <HAL_TIM_OnePulse_Start+0xce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8104136:	2300      	movs	r3, #0
}
 8104138:	4618      	mov	r0, r3
 810413a:	3710      	adds	r7, #16
 810413c:	46bd      	mov	sp, r7
 810413e:	bd80      	pop	{r7, pc}
 8104140:	40010000 	.word	0x40010000
 8104144:	40010400 	.word	0x40010400
 8104148:	40014000 	.word	0x40014000
 810414c:	40014400 	.word	0x40014400
 8104150:	40014800 	.word	0x40014800

08104154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8104154:	b580      	push	{r7, lr}
 8104156:	b084      	sub	sp, #16
 8104158:	af00      	add	r7, sp, #0
 810415a:	60f8      	str	r0, [r7, #12]
 810415c:	60b9      	str	r1, [r7, #8]
 810415e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8104160:	68fb      	ldr	r3, [r7, #12]
 8104162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104166:	2b01      	cmp	r3, #1
 8104168:	d101      	bne.n	810416e <HAL_TIM_PWM_ConfigChannel+0x1a>
 810416a:	2302      	movs	r3, #2
 810416c:	e0fd      	b.n	810436a <HAL_TIM_PWM_ConfigChannel+0x216>
 810416e:	68fb      	ldr	r3, [r7, #12]
 8104170:	2201      	movs	r2, #1
 8104172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	2b14      	cmp	r3, #20
 810417a:	f200 80f0 	bhi.w	810435e <HAL_TIM_PWM_ConfigChannel+0x20a>
 810417e:	a201      	add	r2, pc, #4	; (adr r2, 8104184 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8104180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104184:	081041d9 	.word	0x081041d9
 8104188:	0810435f 	.word	0x0810435f
 810418c:	0810435f 	.word	0x0810435f
 8104190:	0810435f 	.word	0x0810435f
 8104194:	08104219 	.word	0x08104219
 8104198:	0810435f 	.word	0x0810435f
 810419c:	0810435f 	.word	0x0810435f
 81041a0:	0810435f 	.word	0x0810435f
 81041a4:	0810425b 	.word	0x0810425b
 81041a8:	0810435f 	.word	0x0810435f
 81041ac:	0810435f 	.word	0x0810435f
 81041b0:	0810435f 	.word	0x0810435f
 81041b4:	0810429b 	.word	0x0810429b
 81041b8:	0810435f 	.word	0x0810435f
 81041bc:	0810435f 	.word	0x0810435f
 81041c0:	0810435f 	.word	0x0810435f
 81041c4:	081042dd 	.word	0x081042dd
 81041c8:	0810435f 	.word	0x0810435f
 81041cc:	0810435f 	.word	0x0810435f
 81041d0:	0810435f 	.word	0x0810435f
 81041d4:	0810431d 	.word	0x0810431d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81041d8:	68fb      	ldr	r3, [r7, #12]
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	68b9      	ldr	r1, [r7, #8]
 81041de:	4618      	mov	r0, r3
 81041e0:	f000 f962 	bl	81044a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81041e4:	68fb      	ldr	r3, [r7, #12]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	699a      	ldr	r2, [r3, #24]
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	f042 0208 	orr.w	r2, r2, #8
 81041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81041f4:	68fb      	ldr	r3, [r7, #12]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	699a      	ldr	r2, [r3, #24]
 81041fa:	68fb      	ldr	r3, [r7, #12]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	f022 0204 	bic.w	r2, r2, #4
 8104202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	6999      	ldr	r1, [r3, #24]
 810420a:	68bb      	ldr	r3, [r7, #8]
 810420c:	691a      	ldr	r2, [r3, #16]
 810420e:	68fb      	ldr	r3, [r7, #12]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	430a      	orrs	r2, r1
 8104214:	619a      	str	r2, [r3, #24]
      break;
 8104216:	e0a3      	b.n	8104360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	68b9      	ldr	r1, [r7, #8]
 810421e:	4618      	mov	r0, r3
 8104220:	f000 f9d2 	bl	81045c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	699a      	ldr	r2, [r3, #24]
 810422a:	68fb      	ldr	r3, [r7, #12]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	699a      	ldr	r2, [r3, #24]
 810423a:	68fb      	ldr	r3, [r7, #12]
 810423c:	681b      	ldr	r3, [r3, #0]
 810423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8104244:	68fb      	ldr	r3, [r7, #12]
 8104246:	681b      	ldr	r3, [r3, #0]
 8104248:	6999      	ldr	r1, [r3, #24]
 810424a:	68bb      	ldr	r3, [r7, #8]
 810424c:	691b      	ldr	r3, [r3, #16]
 810424e:	021a      	lsls	r2, r3, #8
 8104250:	68fb      	ldr	r3, [r7, #12]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	430a      	orrs	r2, r1
 8104256:	619a      	str	r2, [r3, #24]
      break;
 8104258:	e082      	b.n	8104360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810425a:	68fb      	ldr	r3, [r7, #12]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	68b9      	ldr	r1, [r7, #8]
 8104260:	4618      	mov	r0, r3
 8104262:	f000 fa3b 	bl	81046dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8104266:	68fb      	ldr	r3, [r7, #12]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	69da      	ldr	r2, [r3, #28]
 810426c:	68fb      	ldr	r3, [r7, #12]
 810426e:	681b      	ldr	r3, [r3, #0]
 8104270:	f042 0208 	orr.w	r2, r2, #8
 8104274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8104276:	68fb      	ldr	r3, [r7, #12]
 8104278:	681b      	ldr	r3, [r3, #0]
 810427a:	69da      	ldr	r2, [r3, #28]
 810427c:	68fb      	ldr	r3, [r7, #12]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	f022 0204 	bic.w	r2, r2, #4
 8104284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8104286:	68fb      	ldr	r3, [r7, #12]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	69d9      	ldr	r1, [r3, #28]
 810428c:	68bb      	ldr	r3, [r7, #8]
 810428e:	691a      	ldr	r2, [r3, #16]
 8104290:	68fb      	ldr	r3, [r7, #12]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	430a      	orrs	r2, r1
 8104296:	61da      	str	r2, [r3, #28]
      break;
 8104298:	e062      	b.n	8104360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	68b9      	ldr	r1, [r7, #8]
 81042a0:	4618      	mov	r0, r3
 81042a2:	f000 faa1 	bl	81047e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81042a6:	68fb      	ldr	r3, [r7, #12]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	69da      	ldr	r2, [r3, #28]
 81042ac:	68fb      	ldr	r3, [r7, #12]
 81042ae:	681b      	ldr	r3, [r3, #0]
 81042b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81042b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81042b6:	68fb      	ldr	r3, [r7, #12]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	69da      	ldr	r2, [r3, #28]
 81042bc:	68fb      	ldr	r3, [r7, #12]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81042c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81042c6:	68fb      	ldr	r3, [r7, #12]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	69d9      	ldr	r1, [r3, #28]
 81042cc:	68bb      	ldr	r3, [r7, #8]
 81042ce:	691b      	ldr	r3, [r3, #16]
 81042d0:	021a      	lsls	r2, r3, #8
 81042d2:	68fb      	ldr	r3, [r7, #12]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	430a      	orrs	r2, r1
 81042d8:	61da      	str	r2, [r3, #28]
      break;
 81042da:	e041      	b.n	8104360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81042dc:	68fb      	ldr	r3, [r7, #12]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	68b9      	ldr	r1, [r7, #8]
 81042e2:	4618      	mov	r0, r3
 81042e4:	f000 fae8 	bl	81048b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81042e8:	68fb      	ldr	r3, [r7, #12]
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81042ee:	68fb      	ldr	r3, [r7, #12]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	f042 0208 	orr.w	r2, r2, #8
 81042f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81042fe:	68fb      	ldr	r3, [r7, #12]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	f022 0204 	bic.w	r2, r2, #4
 8104306:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810430e:	68bb      	ldr	r3, [r7, #8]
 8104310:	691a      	ldr	r2, [r3, #16]
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	430a      	orrs	r2, r1
 8104318:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810431a:	e021      	b.n	8104360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810431c:	68fb      	ldr	r3, [r7, #12]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	68b9      	ldr	r1, [r7, #8]
 8104322:	4618      	mov	r0, r3
 8104324:	f000 fb2a 	bl	810497c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8104328:	68fb      	ldr	r3, [r7, #12]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810432e:	68fb      	ldr	r3, [r7, #12]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8104338:	68fb      	ldr	r3, [r7, #12]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810433e:	68fb      	ldr	r3, [r7, #12]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810434e:	68bb      	ldr	r3, [r7, #8]
 8104350:	691b      	ldr	r3, [r3, #16]
 8104352:	021a      	lsls	r2, r3, #8
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	430a      	orrs	r2, r1
 810435a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810435c:	e000      	b.n	8104360 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810435e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8104360:	68fb      	ldr	r3, [r7, #12]
 8104362:	2200      	movs	r2, #0
 8104364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104368:	2300      	movs	r3, #0
}
 810436a:	4618      	mov	r0, r3
 810436c:	3710      	adds	r7, #16
 810436e:	46bd      	mov	sp, r7
 8104370:	bd80      	pop	{r7, pc}
 8104372:	bf00      	nop

08104374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8104374:	b480      	push	{r7}
 8104376:	b085      	sub	sp, #20
 8104378:	af00      	add	r7, sp, #0
 810437a:	6078      	str	r0, [r7, #4]
 810437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	681b      	ldr	r3, [r3, #0]
 8104382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	4a40      	ldr	r2, [pc, #256]	; (8104488 <TIM_Base_SetConfig+0x114>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d013      	beq.n	81043b4 <TIM_Base_SetConfig+0x40>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104392:	d00f      	beq.n	81043b4 <TIM_Base_SetConfig+0x40>
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	4a3d      	ldr	r2, [pc, #244]	; (810448c <TIM_Base_SetConfig+0x118>)
 8104398:	4293      	cmp	r3, r2
 810439a:	d00b      	beq.n	81043b4 <TIM_Base_SetConfig+0x40>
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	4a3c      	ldr	r2, [pc, #240]	; (8104490 <TIM_Base_SetConfig+0x11c>)
 81043a0:	4293      	cmp	r3, r2
 81043a2:	d007      	beq.n	81043b4 <TIM_Base_SetConfig+0x40>
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	4a3b      	ldr	r2, [pc, #236]	; (8104494 <TIM_Base_SetConfig+0x120>)
 81043a8:	4293      	cmp	r3, r2
 81043aa:	d003      	beq.n	81043b4 <TIM_Base_SetConfig+0x40>
 81043ac:	687b      	ldr	r3, [r7, #4]
 81043ae:	4a3a      	ldr	r2, [pc, #232]	; (8104498 <TIM_Base_SetConfig+0x124>)
 81043b0:	4293      	cmp	r3, r2
 81043b2:	d108      	bne.n	81043c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81043b4:	68fb      	ldr	r3, [r7, #12]
 81043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81043bc:	683b      	ldr	r3, [r7, #0]
 81043be:	685b      	ldr	r3, [r3, #4]
 81043c0:	68fa      	ldr	r2, [r7, #12]
 81043c2:	4313      	orrs	r3, r2
 81043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	4a2f      	ldr	r2, [pc, #188]	; (8104488 <TIM_Base_SetConfig+0x114>)
 81043ca:	4293      	cmp	r3, r2
 81043cc:	d01f      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81043d4:	d01b      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	4a2c      	ldr	r2, [pc, #176]	; (810448c <TIM_Base_SetConfig+0x118>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d017      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	4a2b      	ldr	r2, [pc, #172]	; (8104490 <TIM_Base_SetConfig+0x11c>)
 81043e2:	4293      	cmp	r3, r2
 81043e4:	d013      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	4a2a      	ldr	r2, [pc, #168]	; (8104494 <TIM_Base_SetConfig+0x120>)
 81043ea:	4293      	cmp	r3, r2
 81043ec:	d00f      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	4a29      	ldr	r2, [pc, #164]	; (8104498 <TIM_Base_SetConfig+0x124>)
 81043f2:	4293      	cmp	r3, r2
 81043f4:	d00b      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	4a28      	ldr	r2, [pc, #160]	; (810449c <TIM_Base_SetConfig+0x128>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d007      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	4a27      	ldr	r2, [pc, #156]	; (81044a0 <TIM_Base_SetConfig+0x12c>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d003      	beq.n	810440e <TIM_Base_SetConfig+0x9a>
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	4a26      	ldr	r2, [pc, #152]	; (81044a4 <TIM_Base_SetConfig+0x130>)
 810440a:	4293      	cmp	r3, r2
 810440c:	d108      	bne.n	8104420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8104416:	683b      	ldr	r3, [r7, #0]
 8104418:	68db      	ldr	r3, [r3, #12]
 810441a:	68fa      	ldr	r2, [r7, #12]
 810441c:	4313      	orrs	r3, r2
 810441e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104420:	68fb      	ldr	r3, [r7, #12]
 8104422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8104426:	683b      	ldr	r3, [r7, #0]
 8104428:	695b      	ldr	r3, [r3, #20]
 810442a:	4313      	orrs	r3, r2
 810442c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	68fa      	ldr	r2, [r7, #12]
 8104432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8104434:	683b      	ldr	r3, [r7, #0]
 8104436:	689a      	ldr	r2, [r3, #8]
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810443c:	683b      	ldr	r3, [r7, #0]
 810443e:	681a      	ldr	r2, [r3, #0]
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	4a10      	ldr	r2, [pc, #64]	; (8104488 <TIM_Base_SetConfig+0x114>)
 8104448:	4293      	cmp	r3, r2
 810444a:	d00f      	beq.n	810446c <TIM_Base_SetConfig+0xf8>
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	4a12      	ldr	r2, [pc, #72]	; (8104498 <TIM_Base_SetConfig+0x124>)
 8104450:	4293      	cmp	r3, r2
 8104452:	d00b      	beq.n	810446c <TIM_Base_SetConfig+0xf8>
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	4a11      	ldr	r2, [pc, #68]	; (810449c <TIM_Base_SetConfig+0x128>)
 8104458:	4293      	cmp	r3, r2
 810445a:	d007      	beq.n	810446c <TIM_Base_SetConfig+0xf8>
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	4a10      	ldr	r2, [pc, #64]	; (81044a0 <TIM_Base_SetConfig+0x12c>)
 8104460:	4293      	cmp	r3, r2
 8104462:	d003      	beq.n	810446c <TIM_Base_SetConfig+0xf8>
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	4a0f      	ldr	r2, [pc, #60]	; (81044a4 <TIM_Base_SetConfig+0x130>)
 8104468:	4293      	cmp	r3, r2
 810446a:	d103      	bne.n	8104474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810446c:	683b      	ldr	r3, [r7, #0]
 810446e:	691a      	ldr	r2, [r3, #16]
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	2201      	movs	r2, #1
 8104478:	615a      	str	r2, [r3, #20]
}
 810447a:	bf00      	nop
 810447c:	3714      	adds	r7, #20
 810447e:	46bd      	mov	sp, r7
 8104480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104484:	4770      	bx	lr
 8104486:	bf00      	nop
 8104488:	40010000 	.word	0x40010000
 810448c:	40000400 	.word	0x40000400
 8104490:	40000800 	.word	0x40000800
 8104494:	40000c00 	.word	0x40000c00
 8104498:	40010400 	.word	0x40010400
 810449c:	40014000 	.word	0x40014000
 81044a0:	40014400 	.word	0x40014400
 81044a4:	40014800 	.word	0x40014800

081044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81044a8:	b480      	push	{r7}
 81044aa:	b087      	sub	sp, #28
 81044ac:	af00      	add	r7, sp, #0
 81044ae:	6078      	str	r0, [r7, #4]
 81044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	6a1b      	ldr	r3, [r3, #32]
 81044b6:	f023 0201 	bic.w	r2, r3, #1
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	6a1b      	ldr	r3, [r3, #32]
 81044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	685b      	ldr	r3, [r3, #4]
 81044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	699b      	ldr	r3, [r3, #24]
 81044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81044d0:	68fb      	ldr	r3, [r7, #12]
 81044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	f023 0303 	bic.w	r3, r3, #3
 81044e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81044e4:	683b      	ldr	r3, [r7, #0]
 81044e6:	681b      	ldr	r3, [r3, #0]
 81044e8:	68fa      	ldr	r2, [r7, #12]
 81044ea:	4313      	orrs	r3, r2
 81044ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81044ee:	697b      	ldr	r3, [r7, #20]
 81044f0:	f023 0302 	bic.w	r3, r3, #2
 81044f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81044f6:	683b      	ldr	r3, [r7, #0]
 81044f8:	689b      	ldr	r3, [r3, #8]
 81044fa:	697a      	ldr	r2, [r7, #20]
 81044fc:	4313      	orrs	r3, r2
 81044fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	4a2c      	ldr	r2, [pc, #176]	; (81045b4 <TIM_OC1_SetConfig+0x10c>)
 8104504:	4293      	cmp	r3, r2
 8104506:	d00f      	beq.n	8104528 <TIM_OC1_SetConfig+0x80>
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	4a2b      	ldr	r2, [pc, #172]	; (81045b8 <TIM_OC1_SetConfig+0x110>)
 810450c:	4293      	cmp	r3, r2
 810450e:	d00b      	beq.n	8104528 <TIM_OC1_SetConfig+0x80>
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	4a2a      	ldr	r2, [pc, #168]	; (81045bc <TIM_OC1_SetConfig+0x114>)
 8104514:	4293      	cmp	r3, r2
 8104516:	d007      	beq.n	8104528 <TIM_OC1_SetConfig+0x80>
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	4a29      	ldr	r2, [pc, #164]	; (81045c0 <TIM_OC1_SetConfig+0x118>)
 810451c:	4293      	cmp	r3, r2
 810451e:	d003      	beq.n	8104528 <TIM_OC1_SetConfig+0x80>
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	4a28      	ldr	r2, [pc, #160]	; (81045c4 <TIM_OC1_SetConfig+0x11c>)
 8104524:	4293      	cmp	r3, r2
 8104526:	d10c      	bne.n	8104542 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8104528:	697b      	ldr	r3, [r7, #20]
 810452a:	f023 0308 	bic.w	r3, r3, #8
 810452e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8104530:	683b      	ldr	r3, [r7, #0]
 8104532:	68db      	ldr	r3, [r3, #12]
 8104534:	697a      	ldr	r2, [r7, #20]
 8104536:	4313      	orrs	r3, r2
 8104538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810453a:	697b      	ldr	r3, [r7, #20]
 810453c:	f023 0304 	bic.w	r3, r3, #4
 8104540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	4a1b      	ldr	r2, [pc, #108]	; (81045b4 <TIM_OC1_SetConfig+0x10c>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d00f      	beq.n	810456a <TIM_OC1_SetConfig+0xc2>
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	4a1a      	ldr	r2, [pc, #104]	; (81045b8 <TIM_OC1_SetConfig+0x110>)
 810454e:	4293      	cmp	r3, r2
 8104550:	d00b      	beq.n	810456a <TIM_OC1_SetConfig+0xc2>
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	4a19      	ldr	r2, [pc, #100]	; (81045bc <TIM_OC1_SetConfig+0x114>)
 8104556:	4293      	cmp	r3, r2
 8104558:	d007      	beq.n	810456a <TIM_OC1_SetConfig+0xc2>
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	4a18      	ldr	r2, [pc, #96]	; (81045c0 <TIM_OC1_SetConfig+0x118>)
 810455e:	4293      	cmp	r3, r2
 8104560:	d003      	beq.n	810456a <TIM_OC1_SetConfig+0xc2>
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	4a17      	ldr	r2, [pc, #92]	; (81045c4 <TIM_OC1_SetConfig+0x11c>)
 8104566:	4293      	cmp	r3, r2
 8104568:	d111      	bne.n	810458e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810456a:	693b      	ldr	r3, [r7, #16]
 810456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8104572:	693b      	ldr	r3, [r7, #16]
 8104574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810457a:	683b      	ldr	r3, [r7, #0]
 810457c:	695b      	ldr	r3, [r3, #20]
 810457e:	693a      	ldr	r2, [r7, #16]
 8104580:	4313      	orrs	r3, r2
 8104582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8104584:	683b      	ldr	r3, [r7, #0]
 8104586:	699b      	ldr	r3, [r3, #24]
 8104588:	693a      	ldr	r2, [r7, #16]
 810458a:	4313      	orrs	r3, r2
 810458c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810458e:	687b      	ldr	r3, [r7, #4]
 8104590:	693a      	ldr	r2, [r7, #16]
 8104592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	68fa      	ldr	r2, [r7, #12]
 8104598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810459a:	683b      	ldr	r3, [r7, #0]
 810459c:	685a      	ldr	r2, [r3, #4]
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	697a      	ldr	r2, [r7, #20]
 81045a6:	621a      	str	r2, [r3, #32]
}
 81045a8:	bf00      	nop
 81045aa:	371c      	adds	r7, #28
 81045ac:	46bd      	mov	sp, r7
 81045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045b2:	4770      	bx	lr
 81045b4:	40010000 	.word	0x40010000
 81045b8:	40010400 	.word	0x40010400
 81045bc:	40014000 	.word	0x40014000
 81045c0:	40014400 	.word	0x40014400
 81045c4:	40014800 	.word	0x40014800

081045c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81045c8:	b480      	push	{r7}
 81045ca:	b087      	sub	sp, #28
 81045cc:	af00      	add	r7, sp, #0
 81045ce:	6078      	str	r0, [r7, #4]
 81045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	6a1b      	ldr	r3, [r3, #32]
 81045d6:	f023 0210 	bic.w	r2, r3, #16
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	6a1b      	ldr	r3, [r3, #32]
 81045e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	685b      	ldr	r3, [r3, #4]
 81045e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	699b      	ldr	r3, [r3, #24]
 81045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81045f0:	68fb      	ldr	r3, [r7, #12]
 81045f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81045f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81045fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81045fc:	68fb      	ldr	r3, [r7, #12]
 81045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104604:	683b      	ldr	r3, [r7, #0]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	021b      	lsls	r3, r3, #8
 810460a:	68fa      	ldr	r2, [r7, #12]
 810460c:	4313      	orrs	r3, r2
 810460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8104610:	697b      	ldr	r3, [r7, #20]
 8104612:	f023 0320 	bic.w	r3, r3, #32
 8104616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8104618:	683b      	ldr	r3, [r7, #0]
 810461a:	689b      	ldr	r3, [r3, #8]
 810461c:	011b      	lsls	r3, r3, #4
 810461e:	697a      	ldr	r2, [r7, #20]
 8104620:	4313      	orrs	r3, r2
 8104622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	4a28      	ldr	r2, [pc, #160]	; (81046c8 <TIM_OC2_SetConfig+0x100>)
 8104628:	4293      	cmp	r3, r2
 810462a:	d003      	beq.n	8104634 <TIM_OC2_SetConfig+0x6c>
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	4a27      	ldr	r2, [pc, #156]	; (81046cc <TIM_OC2_SetConfig+0x104>)
 8104630:	4293      	cmp	r3, r2
 8104632:	d10d      	bne.n	8104650 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8104634:	697b      	ldr	r3, [r7, #20]
 8104636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810463a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810463c:	683b      	ldr	r3, [r7, #0]
 810463e:	68db      	ldr	r3, [r3, #12]
 8104640:	011b      	lsls	r3, r3, #4
 8104642:	697a      	ldr	r2, [r7, #20]
 8104644:	4313      	orrs	r3, r2
 8104646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8104648:	697b      	ldr	r3, [r7, #20]
 810464a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810464e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	4a1d      	ldr	r2, [pc, #116]	; (81046c8 <TIM_OC2_SetConfig+0x100>)
 8104654:	4293      	cmp	r3, r2
 8104656:	d00f      	beq.n	8104678 <TIM_OC2_SetConfig+0xb0>
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	4a1c      	ldr	r2, [pc, #112]	; (81046cc <TIM_OC2_SetConfig+0x104>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d00b      	beq.n	8104678 <TIM_OC2_SetConfig+0xb0>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	4a1b      	ldr	r2, [pc, #108]	; (81046d0 <TIM_OC2_SetConfig+0x108>)
 8104664:	4293      	cmp	r3, r2
 8104666:	d007      	beq.n	8104678 <TIM_OC2_SetConfig+0xb0>
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	4a1a      	ldr	r2, [pc, #104]	; (81046d4 <TIM_OC2_SetConfig+0x10c>)
 810466c:	4293      	cmp	r3, r2
 810466e:	d003      	beq.n	8104678 <TIM_OC2_SetConfig+0xb0>
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	4a19      	ldr	r2, [pc, #100]	; (81046d8 <TIM_OC2_SetConfig+0x110>)
 8104674:	4293      	cmp	r3, r2
 8104676:	d113      	bne.n	81046a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8104678:	693b      	ldr	r3, [r7, #16]
 810467a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810467e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8104680:	693b      	ldr	r3, [r7, #16]
 8104682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8104686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8104688:	683b      	ldr	r3, [r7, #0]
 810468a:	695b      	ldr	r3, [r3, #20]
 810468c:	009b      	lsls	r3, r3, #2
 810468e:	693a      	ldr	r2, [r7, #16]
 8104690:	4313      	orrs	r3, r2
 8104692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8104694:	683b      	ldr	r3, [r7, #0]
 8104696:	699b      	ldr	r3, [r3, #24]
 8104698:	009b      	lsls	r3, r3, #2
 810469a:	693a      	ldr	r2, [r7, #16]
 810469c:	4313      	orrs	r3, r2
 810469e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	693a      	ldr	r2, [r7, #16]
 81046a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	68fa      	ldr	r2, [r7, #12]
 81046aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81046ac:	683b      	ldr	r3, [r7, #0]
 81046ae:	685a      	ldr	r2, [r3, #4]
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	697a      	ldr	r2, [r7, #20]
 81046b8:	621a      	str	r2, [r3, #32]
}
 81046ba:	bf00      	nop
 81046bc:	371c      	adds	r7, #28
 81046be:	46bd      	mov	sp, r7
 81046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046c4:	4770      	bx	lr
 81046c6:	bf00      	nop
 81046c8:	40010000 	.word	0x40010000
 81046cc:	40010400 	.word	0x40010400
 81046d0:	40014000 	.word	0x40014000
 81046d4:	40014400 	.word	0x40014400
 81046d8:	40014800 	.word	0x40014800

081046dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81046dc:	b480      	push	{r7}
 81046de:	b087      	sub	sp, #28
 81046e0:	af00      	add	r7, sp, #0
 81046e2:	6078      	str	r0, [r7, #4]
 81046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	6a1b      	ldr	r3, [r3, #32]
 81046ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	6a1b      	ldr	r3, [r3, #32]
 81046f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	685b      	ldr	r3, [r3, #4]
 81046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	69db      	ldr	r3, [r3, #28]
 8104702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810470a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810470c:	68fb      	ldr	r3, [r7, #12]
 810470e:	f023 0303 	bic.w	r3, r3, #3
 8104712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104714:	683b      	ldr	r3, [r7, #0]
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	68fa      	ldr	r2, [r7, #12]
 810471a:	4313      	orrs	r3, r2
 810471c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810471e:	697b      	ldr	r3, [r7, #20]
 8104720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8104726:	683b      	ldr	r3, [r7, #0]
 8104728:	689b      	ldr	r3, [r3, #8]
 810472a:	021b      	lsls	r3, r3, #8
 810472c:	697a      	ldr	r2, [r7, #20]
 810472e:	4313      	orrs	r3, r2
 8104730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	4a27      	ldr	r2, [pc, #156]	; (81047d4 <TIM_OC3_SetConfig+0xf8>)
 8104736:	4293      	cmp	r3, r2
 8104738:	d003      	beq.n	8104742 <TIM_OC3_SetConfig+0x66>
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	4a26      	ldr	r2, [pc, #152]	; (81047d8 <TIM_OC3_SetConfig+0xfc>)
 810473e:	4293      	cmp	r3, r2
 8104740:	d10d      	bne.n	810475e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8104742:	697b      	ldr	r3, [r7, #20]
 8104744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8104748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810474a:	683b      	ldr	r3, [r7, #0]
 810474c:	68db      	ldr	r3, [r3, #12]
 810474e:	021b      	lsls	r3, r3, #8
 8104750:	697a      	ldr	r2, [r7, #20]
 8104752:	4313      	orrs	r3, r2
 8104754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8104756:	697b      	ldr	r3, [r7, #20]
 8104758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810475c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	4a1c      	ldr	r2, [pc, #112]	; (81047d4 <TIM_OC3_SetConfig+0xf8>)
 8104762:	4293      	cmp	r3, r2
 8104764:	d00f      	beq.n	8104786 <TIM_OC3_SetConfig+0xaa>
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	4a1b      	ldr	r2, [pc, #108]	; (81047d8 <TIM_OC3_SetConfig+0xfc>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d00b      	beq.n	8104786 <TIM_OC3_SetConfig+0xaa>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	4a1a      	ldr	r2, [pc, #104]	; (81047dc <TIM_OC3_SetConfig+0x100>)
 8104772:	4293      	cmp	r3, r2
 8104774:	d007      	beq.n	8104786 <TIM_OC3_SetConfig+0xaa>
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	4a19      	ldr	r2, [pc, #100]	; (81047e0 <TIM_OC3_SetConfig+0x104>)
 810477a:	4293      	cmp	r3, r2
 810477c:	d003      	beq.n	8104786 <TIM_OC3_SetConfig+0xaa>
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	4a18      	ldr	r2, [pc, #96]	; (81047e4 <TIM_OC3_SetConfig+0x108>)
 8104782:	4293      	cmp	r3, r2
 8104784:	d113      	bne.n	81047ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8104786:	693b      	ldr	r3, [r7, #16]
 8104788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810478c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810478e:	693b      	ldr	r3, [r7, #16]
 8104790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8104796:	683b      	ldr	r3, [r7, #0]
 8104798:	695b      	ldr	r3, [r3, #20]
 810479a:	011b      	lsls	r3, r3, #4
 810479c:	693a      	ldr	r2, [r7, #16]
 810479e:	4313      	orrs	r3, r2
 81047a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81047a2:	683b      	ldr	r3, [r7, #0]
 81047a4:	699b      	ldr	r3, [r3, #24]
 81047a6:	011b      	lsls	r3, r3, #4
 81047a8:	693a      	ldr	r2, [r7, #16]
 81047aa:	4313      	orrs	r3, r2
 81047ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	693a      	ldr	r2, [r7, #16]
 81047b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	68fa      	ldr	r2, [r7, #12]
 81047b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81047ba:	683b      	ldr	r3, [r7, #0]
 81047bc:	685a      	ldr	r2, [r3, #4]
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	697a      	ldr	r2, [r7, #20]
 81047c6:	621a      	str	r2, [r3, #32]
}
 81047c8:	bf00      	nop
 81047ca:	371c      	adds	r7, #28
 81047cc:	46bd      	mov	sp, r7
 81047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047d2:	4770      	bx	lr
 81047d4:	40010000 	.word	0x40010000
 81047d8:	40010400 	.word	0x40010400
 81047dc:	40014000 	.word	0x40014000
 81047e0:	40014400 	.word	0x40014400
 81047e4:	40014800 	.word	0x40014800

081047e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81047e8:	b480      	push	{r7}
 81047ea:	b087      	sub	sp, #28
 81047ec:	af00      	add	r7, sp, #0
 81047ee:	6078      	str	r0, [r7, #4]
 81047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	6a1b      	ldr	r3, [r3, #32]
 81047f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	6a1b      	ldr	r3, [r3, #32]
 8104802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	685b      	ldr	r3, [r3, #4]
 8104808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	69db      	ldr	r3, [r3, #28]
 810480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8104810:	68fb      	ldr	r3, [r7, #12]
 8104812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8104818:	68fb      	ldr	r3, [r7, #12]
 810481a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104820:	683b      	ldr	r3, [r7, #0]
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	021b      	lsls	r3, r3, #8
 8104826:	68fa      	ldr	r2, [r7, #12]
 8104828:	4313      	orrs	r3, r2
 810482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810482c:	693b      	ldr	r3, [r7, #16]
 810482e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8104834:	683b      	ldr	r3, [r7, #0]
 8104836:	689b      	ldr	r3, [r3, #8]
 8104838:	031b      	lsls	r3, r3, #12
 810483a:	693a      	ldr	r2, [r7, #16]
 810483c:	4313      	orrs	r3, r2
 810483e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	4a18      	ldr	r2, [pc, #96]	; (81048a4 <TIM_OC4_SetConfig+0xbc>)
 8104844:	4293      	cmp	r3, r2
 8104846:	d00f      	beq.n	8104868 <TIM_OC4_SetConfig+0x80>
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	4a17      	ldr	r2, [pc, #92]	; (81048a8 <TIM_OC4_SetConfig+0xc0>)
 810484c:	4293      	cmp	r3, r2
 810484e:	d00b      	beq.n	8104868 <TIM_OC4_SetConfig+0x80>
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	4a16      	ldr	r2, [pc, #88]	; (81048ac <TIM_OC4_SetConfig+0xc4>)
 8104854:	4293      	cmp	r3, r2
 8104856:	d007      	beq.n	8104868 <TIM_OC4_SetConfig+0x80>
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	4a15      	ldr	r2, [pc, #84]	; (81048b0 <TIM_OC4_SetConfig+0xc8>)
 810485c:	4293      	cmp	r3, r2
 810485e:	d003      	beq.n	8104868 <TIM_OC4_SetConfig+0x80>
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	4a14      	ldr	r2, [pc, #80]	; (81048b4 <TIM_OC4_SetConfig+0xcc>)
 8104864:	4293      	cmp	r3, r2
 8104866:	d109      	bne.n	810487c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8104868:	697b      	ldr	r3, [r7, #20]
 810486a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810486e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8104870:	683b      	ldr	r3, [r7, #0]
 8104872:	695b      	ldr	r3, [r3, #20]
 8104874:	019b      	lsls	r3, r3, #6
 8104876:	697a      	ldr	r2, [r7, #20]
 8104878:	4313      	orrs	r3, r2
 810487a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810487c:	687b      	ldr	r3, [r7, #4]
 810487e:	697a      	ldr	r2, [r7, #20]
 8104880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	68fa      	ldr	r2, [r7, #12]
 8104886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8104888:	683b      	ldr	r3, [r7, #0]
 810488a:	685a      	ldr	r2, [r3, #4]
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	693a      	ldr	r2, [r7, #16]
 8104894:	621a      	str	r2, [r3, #32]
}
 8104896:	bf00      	nop
 8104898:	371c      	adds	r7, #28
 810489a:	46bd      	mov	sp, r7
 810489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048a0:	4770      	bx	lr
 81048a2:	bf00      	nop
 81048a4:	40010000 	.word	0x40010000
 81048a8:	40010400 	.word	0x40010400
 81048ac:	40014000 	.word	0x40014000
 81048b0:	40014400 	.word	0x40014400
 81048b4:	40014800 	.word	0x40014800

081048b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81048b8:	b480      	push	{r7}
 81048ba:	b087      	sub	sp, #28
 81048bc:	af00      	add	r7, sp, #0
 81048be:	6078      	str	r0, [r7, #4]
 81048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	6a1b      	ldr	r3, [r3, #32]
 81048c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	6a1b      	ldr	r3, [r3, #32]
 81048d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	685b      	ldr	r3, [r3, #4]
 81048d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81048e0:	68fb      	ldr	r3, [r7, #12]
 81048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81048e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81048e8:	683b      	ldr	r3, [r7, #0]
 81048ea:	681b      	ldr	r3, [r3, #0]
 81048ec:	68fa      	ldr	r2, [r7, #12]
 81048ee:	4313      	orrs	r3, r2
 81048f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81048f2:	693b      	ldr	r3, [r7, #16]
 81048f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81048f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81048fa:	683b      	ldr	r3, [r7, #0]
 81048fc:	689b      	ldr	r3, [r3, #8]
 81048fe:	041b      	lsls	r3, r3, #16
 8104900:	693a      	ldr	r2, [r7, #16]
 8104902:	4313      	orrs	r3, r2
 8104904:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	4a17      	ldr	r2, [pc, #92]	; (8104968 <TIM_OC5_SetConfig+0xb0>)
 810490a:	4293      	cmp	r3, r2
 810490c:	d00f      	beq.n	810492e <TIM_OC5_SetConfig+0x76>
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	4a16      	ldr	r2, [pc, #88]	; (810496c <TIM_OC5_SetConfig+0xb4>)
 8104912:	4293      	cmp	r3, r2
 8104914:	d00b      	beq.n	810492e <TIM_OC5_SetConfig+0x76>
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	4a15      	ldr	r2, [pc, #84]	; (8104970 <TIM_OC5_SetConfig+0xb8>)
 810491a:	4293      	cmp	r3, r2
 810491c:	d007      	beq.n	810492e <TIM_OC5_SetConfig+0x76>
 810491e:	687b      	ldr	r3, [r7, #4]
 8104920:	4a14      	ldr	r2, [pc, #80]	; (8104974 <TIM_OC5_SetConfig+0xbc>)
 8104922:	4293      	cmp	r3, r2
 8104924:	d003      	beq.n	810492e <TIM_OC5_SetConfig+0x76>
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	4a13      	ldr	r2, [pc, #76]	; (8104978 <TIM_OC5_SetConfig+0xc0>)
 810492a:	4293      	cmp	r3, r2
 810492c:	d109      	bne.n	8104942 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810492e:	697b      	ldr	r3, [r7, #20]
 8104930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104934:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8104936:	683b      	ldr	r3, [r7, #0]
 8104938:	695b      	ldr	r3, [r3, #20]
 810493a:	021b      	lsls	r3, r3, #8
 810493c:	697a      	ldr	r2, [r7, #20]
 810493e:	4313      	orrs	r3, r2
 8104940:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	697a      	ldr	r2, [r7, #20]
 8104946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	68fa      	ldr	r2, [r7, #12]
 810494c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810494e:	683b      	ldr	r3, [r7, #0]
 8104950:	685a      	ldr	r2, [r3, #4]
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	693a      	ldr	r2, [r7, #16]
 810495a:	621a      	str	r2, [r3, #32]
}
 810495c:	bf00      	nop
 810495e:	371c      	adds	r7, #28
 8104960:	46bd      	mov	sp, r7
 8104962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104966:	4770      	bx	lr
 8104968:	40010000 	.word	0x40010000
 810496c:	40010400 	.word	0x40010400
 8104970:	40014000 	.word	0x40014000
 8104974:	40014400 	.word	0x40014400
 8104978:	40014800 	.word	0x40014800

0810497c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810497c:	b480      	push	{r7}
 810497e:	b087      	sub	sp, #28
 8104980:	af00      	add	r7, sp, #0
 8104982:	6078      	str	r0, [r7, #4]
 8104984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	6a1b      	ldr	r3, [r3, #32]
 810498a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	6a1b      	ldr	r3, [r3, #32]
 8104996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104998:	687b      	ldr	r3, [r7, #4]
 810499a:	685b      	ldr	r3, [r3, #4]
 810499c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81049ac:	683b      	ldr	r3, [r7, #0]
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	021b      	lsls	r3, r3, #8
 81049b2:	68fa      	ldr	r2, [r7, #12]
 81049b4:	4313      	orrs	r3, r2
 81049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81049b8:	693b      	ldr	r3, [r7, #16]
 81049ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81049be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81049c0:	683b      	ldr	r3, [r7, #0]
 81049c2:	689b      	ldr	r3, [r3, #8]
 81049c4:	051b      	lsls	r3, r3, #20
 81049c6:	693a      	ldr	r2, [r7, #16]
 81049c8:	4313      	orrs	r3, r2
 81049ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81049cc:	687b      	ldr	r3, [r7, #4]
 81049ce:	4a18      	ldr	r2, [pc, #96]	; (8104a30 <TIM_OC6_SetConfig+0xb4>)
 81049d0:	4293      	cmp	r3, r2
 81049d2:	d00f      	beq.n	81049f4 <TIM_OC6_SetConfig+0x78>
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	4a17      	ldr	r2, [pc, #92]	; (8104a34 <TIM_OC6_SetConfig+0xb8>)
 81049d8:	4293      	cmp	r3, r2
 81049da:	d00b      	beq.n	81049f4 <TIM_OC6_SetConfig+0x78>
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	4a16      	ldr	r2, [pc, #88]	; (8104a38 <TIM_OC6_SetConfig+0xbc>)
 81049e0:	4293      	cmp	r3, r2
 81049e2:	d007      	beq.n	81049f4 <TIM_OC6_SetConfig+0x78>
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	4a15      	ldr	r2, [pc, #84]	; (8104a3c <TIM_OC6_SetConfig+0xc0>)
 81049e8:	4293      	cmp	r3, r2
 81049ea:	d003      	beq.n	81049f4 <TIM_OC6_SetConfig+0x78>
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	4a14      	ldr	r2, [pc, #80]	; (8104a40 <TIM_OC6_SetConfig+0xc4>)
 81049f0:	4293      	cmp	r3, r2
 81049f2:	d109      	bne.n	8104a08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81049f4:	697b      	ldr	r3, [r7, #20]
 81049f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81049fc:	683b      	ldr	r3, [r7, #0]
 81049fe:	695b      	ldr	r3, [r3, #20]
 8104a00:	029b      	lsls	r3, r3, #10
 8104a02:	697a      	ldr	r2, [r7, #20]
 8104a04:	4313      	orrs	r3, r2
 8104a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104a08:	687b      	ldr	r3, [r7, #4]
 8104a0a:	697a      	ldr	r2, [r7, #20]
 8104a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	68fa      	ldr	r2, [r7, #12]
 8104a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8104a14:	683b      	ldr	r3, [r7, #0]
 8104a16:	685a      	ldr	r2, [r3, #4]
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	693a      	ldr	r2, [r7, #16]
 8104a20:	621a      	str	r2, [r3, #32]
}
 8104a22:	bf00      	nop
 8104a24:	371c      	adds	r7, #28
 8104a26:	46bd      	mov	sp, r7
 8104a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a2c:	4770      	bx	lr
 8104a2e:	bf00      	nop
 8104a30:	40010000 	.word	0x40010000
 8104a34:	40010400 	.word	0x40010400
 8104a38:	40014000 	.word	0x40014000
 8104a3c:	40014400 	.word	0x40014400
 8104a40:	40014800 	.word	0x40014800

08104a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8104a44:	b480      	push	{r7}
 8104a46:	b087      	sub	sp, #28
 8104a48:	af00      	add	r7, sp, #0
 8104a4a:	60f8      	str	r0, [r7, #12]
 8104a4c:	60b9      	str	r1, [r7, #8]
 8104a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8104a50:	68bb      	ldr	r3, [r7, #8]
 8104a52:	f003 031f 	and.w	r3, r3, #31
 8104a56:	2201      	movs	r2, #1
 8104a58:	fa02 f303 	lsl.w	r3, r2, r3
 8104a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8104a5e:	68fb      	ldr	r3, [r7, #12]
 8104a60:	6a1a      	ldr	r2, [r3, #32]
 8104a62:	697b      	ldr	r3, [r7, #20]
 8104a64:	43db      	mvns	r3, r3
 8104a66:	401a      	ands	r2, r3
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8104a6c:	68fb      	ldr	r3, [r7, #12]
 8104a6e:	6a1a      	ldr	r2, [r3, #32]
 8104a70:	68bb      	ldr	r3, [r7, #8]
 8104a72:	f003 031f 	and.w	r3, r3, #31
 8104a76:	6879      	ldr	r1, [r7, #4]
 8104a78:	fa01 f303 	lsl.w	r3, r1, r3
 8104a7c:	431a      	orrs	r2, r3
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	621a      	str	r2, [r3, #32]
}
 8104a82:	bf00      	nop
 8104a84:	371c      	adds	r7, #28
 8104a86:	46bd      	mov	sp, r7
 8104a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a8c:	4770      	bx	lr
	...

08104a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8104a90:	b480      	push	{r7}
 8104a92:	b085      	sub	sp, #20
 8104a94:	af00      	add	r7, sp, #0
 8104a96:	6078      	str	r0, [r7, #4]
 8104a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8104a9a:	2300      	movs	r3, #0
 8104a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104aa4:	2b01      	cmp	r3, #1
 8104aa6:	d101      	bne.n	8104aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8104aa8:	2302      	movs	r3, #2
 8104aaa:	e065      	b.n	8104b78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	2201      	movs	r2, #1
 8104ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104aba:	683b      	ldr	r3, [r7, #0]
 8104abc:	68db      	ldr	r3, [r3, #12]
 8104abe:	4313      	orrs	r3, r2
 8104ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8104ac2:	68fb      	ldr	r3, [r7, #12]
 8104ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104ac8:	683b      	ldr	r3, [r7, #0]
 8104aca:	689b      	ldr	r3, [r3, #8]
 8104acc:	4313      	orrs	r3, r2
 8104ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8104ad0:	68fb      	ldr	r3, [r7, #12]
 8104ad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8104ad6:	683b      	ldr	r3, [r7, #0]
 8104ad8:	685b      	ldr	r3, [r3, #4]
 8104ada:	4313      	orrs	r3, r2
 8104adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8104ade:	68fb      	ldr	r3, [r7, #12]
 8104ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8104ae4:	683b      	ldr	r3, [r7, #0]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	4313      	orrs	r3, r2
 8104aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8104aec:	68fb      	ldr	r3, [r7, #12]
 8104aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104af2:	683b      	ldr	r3, [r7, #0]
 8104af4:	691b      	ldr	r3, [r3, #16]
 8104af6:	4313      	orrs	r3, r2
 8104af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8104b00:	683b      	ldr	r3, [r7, #0]
 8104b02:	695b      	ldr	r3, [r3, #20]
 8104b04:	4313      	orrs	r3, r2
 8104b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8104b08:	68fb      	ldr	r3, [r7, #12]
 8104b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104b0e:	683b      	ldr	r3, [r7, #0]
 8104b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b12:	4313      	orrs	r3, r2
 8104b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8104b16:	68fb      	ldr	r3, [r7, #12]
 8104b18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8104b1c:	683b      	ldr	r3, [r7, #0]
 8104b1e:	699b      	ldr	r3, [r3, #24]
 8104b20:	041b      	lsls	r3, r3, #16
 8104b22:	4313      	orrs	r3, r2
 8104b24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	4a16      	ldr	r2, [pc, #88]	; (8104b84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8104b2c:	4293      	cmp	r3, r2
 8104b2e:	d004      	beq.n	8104b3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	681b      	ldr	r3, [r3, #0]
 8104b34:	4a14      	ldr	r2, [pc, #80]	; (8104b88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8104b36:	4293      	cmp	r3, r2
 8104b38:	d115      	bne.n	8104b66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8104b3a:	68fb      	ldr	r3, [r7, #12]
 8104b3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8104b40:	683b      	ldr	r3, [r7, #0]
 8104b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b44:	051b      	lsls	r3, r3, #20
 8104b46:	4313      	orrs	r3, r2
 8104b48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8104b4a:	68fb      	ldr	r3, [r7, #12]
 8104b4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104b50:	683b      	ldr	r3, [r7, #0]
 8104b52:	69db      	ldr	r3, [r3, #28]
 8104b54:	4313      	orrs	r3, r2
 8104b56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8104b58:	68fb      	ldr	r3, [r7, #12]
 8104b5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8104b5e:	683b      	ldr	r3, [r7, #0]
 8104b60:	6a1b      	ldr	r3, [r3, #32]
 8104b62:	4313      	orrs	r3, r2
 8104b64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	681b      	ldr	r3, [r3, #0]
 8104b6a:	68fa      	ldr	r2, [r7, #12]
 8104b6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	2200      	movs	r2, #0
 8104b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104b76:	2300      	movs	r3, #0
}
 8104b78:	4618      	mov	r0, r3
 8104b7a:	3714      	adds	r7, #20
 8104b7c:	46bd      	mov	sp, r7
 8104b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b82:	4770      	bx	lr
 8104b84:	40010000 	.word	0x40010000
 8104b88:	40010400 	.word	0x40010400

08104b8c <__libc_init_array>:
 8104b8c:	b570      	push	{r4, r5, r6, lr}
 8104b8e:	4d0d      	ldr	r5, [pc, #52]	; (8104bc4 <__libc_init_array+0x38>)
 8104b90:	4c0d      	ldr	r4, [pc, #52]	; (8104bc8 <__libc_init_array+0x3c>)
 8104b92:	1b64      	subs	r4, r4, r5
 8104b94:	10a4      	asrs	r4, r4, #2
 8104b96:	2600      	movs	r6, #0
 8104b98:	42a6      	cmp	r6, r4
 8104b9a:	d109      	bne.n	8104bb0 <__libc_init_array+0x24>
 8104b9c:	4d0b      	ldr	r5, [pc, #44]	; (8104bcc <__libc_init_array+0x40>)
 8104b9e:	4c0c      	ldr	r4, [pc, #48]	; (8104bd0 <__libc_init_array+0x44>)
 8104ba0:	f000 f82e 	bl	8104c00 <_init>
 8104ba4:	1b64      	subs	r4, r4, r5
 8104ba6:	10a4      	asrs	r4, r4, #2
 8104ba8:	2600      	movs	r6, #0
 8104baa:	42a6      	cmp	r6, r4
 8104bac:	d105      	bne.n	8104bba <__libc_init_array+0x2e>
 8104bae:	bd70      	pop	{r4, r5, r6, pc}
 8104bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8104bb4:	4798      	blx	r3
 8104bb6:	3601      	adds	r6, #1
 8104bb8:	e7ee      	b.n	8104b98 <__libc_init_array+0xc>
 8104bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8104bbe:	4798      	blx	r3
 8104bc0:	3601      	adds	r6, #1
 8104bc2:	e7f2      	b.n	8104baa <__libc_init_array+0x1e>
 8104bc4:	081c042c 	.word	0x081c042c
 8104bc8:	081c042c 	.word	0x081c042c
 8104bcc:	081c042c 	.word	0x081c042c
 8104bd0:	081c0430 	.word	0x081c0430

08104bd4 <memcpy>:
 8104bd4:	440a      	add	r2, r1
 8104bd6:	4291      	cmp	r1, r2
 8104bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8104bdc:	d100      	bne.n	8104be0 <memcpy+0xc>
 8104bde:	4770      	bx	lr
 8104be0:	b510      	push	{r4, lr}
 8104be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104bea:	4291      	cmp	r1, r2
 8104bec:	d1f9      	bne.n	8104be2 <memcpy+0xe>
 8104bee:	bd10      	pop	{r4, pc}

08104bf0 <memset>:
 8104bf0:	4402      	add	r2, r0
 8104bf2:	4603      	mov	r3, r0
 8104bf4:	4293      	cmp	r3, r2
 8104bf6:	d100      	bne.n	8104bfa <memset+0xa>
 8104bf8:	4770      	bx	lr
 8104bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8104bfe:	e7f9      	b.n	8104bf4 <memset+0x4>

08104c00 <_init>:
 8104c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104c02:	bf00      	nop
 8104c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104c06:	bc08      	pop	{r3}
 8104c08:	469e      	mov	lr, r3
 8104c0a:	4770      	bx	lr

08104c0c <_fini>:
 8104c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104c0e:	bf00      	nop
 8104c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104c12:	bc08      	pop	{r3}
 8104c14:	469e      	mov	lr, r3
 8104c16:	4770      	bx	lr
