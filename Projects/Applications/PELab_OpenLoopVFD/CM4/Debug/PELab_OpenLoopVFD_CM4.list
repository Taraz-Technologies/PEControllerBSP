
PELab_OpenLoopVFD_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f8  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bb814  08104b90  08104b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081c03a4  081c03a4  000d03a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081c03a8  081c03a8  000d03a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  10000000  081c03ac  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002e4  1000001c  081c03c8  000e001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000300  081c03c8  000e0300  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000e001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020b87  00000000  00000000  000e004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000371f  00000000  00000000  00100bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012b8  00000000  00000000  001042f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001168  00000000  00000000  001055b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000397f7  00000000  00000000  00106718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017415  00000000  00000000  0013ff0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017c8a0  00000000  00000000  00157324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  002d3bc4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004e70  00000000  00000000  002d3c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000001c 	.word	0x1000001c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08104b78 	.word	0x08104b78

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000020 	.word	0x10000020
 81002d4:	08104b78 	.word	0x08104b78

081002d8 <MAX11046App_Processing>:
@brief Processes the adc data acquired from the adc 
@details this function will call the control system module for evaluation
@param *u16Results- pointer to the values acquired
*/
void MAX11046App_Processing(uint16_t* u16Results)
{
 81002d8:	b580      	push	{r7, lr}
 81002da:	b086      	sub	sp, #24
 81002dc:	af00      	add	r7, sp, #0
 81002de:	6078      	str	r0, [r7, #4]
	float* fResults = (float*)&adcVals;
 81002e0:	4b1d      	ldr	r3, [pc, #116]	; (8100358 <MAX11046App_Processing+0x80>)
 81002e2:	613b      	str	r3, [r7, #16]
	adcRawVals = u16Results;
 81002e4:	4a1d      	ldr	r2, [pc, #116]	; (810035c <MAX11046App_Processing+0x84>)
 81002e6:	687b      	ldr	r3, [r7, #4]
 81002e8:	6013      	str	r3, [r2, #0]
	float* adcOffsets = (float*)&offsets;
 81002ea:	4b1d      	ldr	r3, [pc, #116]	; (8100360 <MAX11046App_Processing+0x88>)
 81002ec:	60fb      	str	r3, [r7, #12]
	float* adcMults = (float*)&mults;
 81002ee:	4b1d      	ldr	r3, [pc, #116]	; (8100364 <MAX11046App_Processing+0x8c>)
 81002f0:	60bb      	str	r3, [r7, #8]
	
	/* convert the values */
	int i = 15;
 81002f2:	230f      	movs	r3, #15
 81002f4:	617b      	str	r3, [r7, #20]
	do
	{
		fResults[i] = (u16Results[i] - adcOffsets[i]) * adcMults[i];
 81002f6:	697b      	ldr	r3, [r7, #20]
 81002f8:	005b      	lsls	r3, r3, #1
 81002fa:	687a      	ldr	r2, [r7, #4]
 81002fc:	4413      	add	r3, r2
 81002fe:	881b      	ldrh	r3, [r3, #0]
 8100300:	ee07 3a90 	vmov	s15, r3
 8100304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8100308:	697b      	ldr	r3, [r7, #20]
 810030a:	009b      	lsls	r3, r3, #2
 810030c:	68fa      	ldr	r2, [r7, #12]
 810030e:	4413      	add	r3, r2
 8100310:	edd3 7a00 	vldr	s15, [r3]
 8100314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8100318:	697b      	ldr	r3, [r7, #20]
 810031a:	009b      	lsls	r3, r3, #2
 810031c:	68ba      	ldr	r2, [r7, #8]
 810031e:	4413      	add	r3, r2
 8100320:	edd3 7a00 	vldr	s15, [r3]
 8100324:	697b      	ldr	r3, [r7, #20]
 8100326:	009b      	lsls	r3, r3, #2
 8100328:	693a      	ldr	r2, [r7, #16]
 810032a:	4413      	add	r3, r2
 810032c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100330:	edc3 7a00 	vstr	s15, [r3]
	} while(i--);
 8100334:	697b      	ldr	r3, [r7, #20]
 8100336:	1e5a      	subs	r2, r3, #1
 8100338:	617a      	str	r2, [r7, #20]
 810033a:	2b00      	cmp	r3, #0
 810033c:	d1db      	bne.n	81002f6 <MAX11046App_Processing+0x1e>
	
	/* call user defined function for control system evaluation */
	if(callback)
 810033e:	4b0a      	ldr	r3, [pc, #40]	; (8100368 <MAX11046App_Processing+0x90>)
 8100340:	681b      	ldr	r3, [r3, #0]
 8100342:	2b00      	cmp	r3, #0
 8100344:	d003      	beq.n	810034e <MAX11046App_Processing+0x76>
		callback(&adcVals);
 8100346:	4b08      	ldr	r3, [pc, #32]	; (8100368 <MAX11046App_Processing+0x90>)
 8100348:	681b      	ldr	r3, [r3, #0]
 810034a:	4803      	ldr	r0, [pc, #12]	; (8100358 <MAX11046App_Processing+0x80>)
 810034c:	4798      	blx	r3
}
 810034e:	bf00      	nop
 8100350:	3718      	adds	r7, #24
 8100352:	46bd      	mov	sp, r7
 8100354:	bd80      	pop	{r7, pc}
 8100356:	bf00      	nop
 8100358:	10000168 	.word	0x10000168
 810035c:	100001a8 	.word	0x100001a8
 8100360:	1000003c 	.word	0x1000003c
 8100364:	1000007c 	.word	0x1000007c
 8100368:	10000038 	.word	0x10000038

0810036c <MAX11046App_Init>:
@brief Initialize the module for external ADC measurements
@param periodUs- period in Us for the continuous conversion mode
@param dataCallback- callback for the data processing
*/
void MAX11046App_Init(uint32_t periodUs, adcMeauresDataCallback dataCallback)
{
 810036c:	b580      	push	{r7, lr}
 810036e:	b088      	sub	sp, #32
 8100370:	af00      	add	r7, sp, #0
 8100372:	6078      	str	r0, [r7, #4]
 8100374:	6039      	str	r1, [r7, #0]
	adc_acq_mode_t mode = ADC_MODE_CONT;
 8100376:	2301      	movs	r3, #1
 8100378:	76fb      	strb	r3, [r7, #27]
	
	if(periodUs > MAX_PERIOD_US)
 810037a:	687b      	ldr	r3, [r7, #4]
 810037c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8100380:	d903      	bls.n	810038a <MAX11046App_Init+0x1e>
		periodUs = MAX_PERIOD_US;
 8100382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100386:	607b      	str	r3, [r7, #4]
 8100388:	e004      	b.n	8100394 <MAX11046App_Init+0x28>
	else if (periodUs < MIN_PERIOD_US)
 810038a:	687b      	ldr	r3, [r7, #4]
 810038c:	2b04      	cmp	r3, #4
 810038e:	d801      	bhi.n	8100394 <MAX11046App_Init+0x28>
		periodUs = MIN_PERIOD_US;
 8100390:	2305      	movs	r3, #5
 8100392:	607b      	str	r3, [r7, #4]
	
	adc_cont_config_t config = { 
 8100394:	687b      	ldr	r3, [r7, #4]
 8100396:	60bb      	str	r3, [r7, #8]
 8100398:	4b27      	ldr	r3, [pc, #156]	; (8100438 <MAX11046App_Init+0xcc>)
 810039a:	60fb      	str	r3, [r7, #12]
		.conversionCycleTimeUs = periodUs, 
		.callback = MAX11046App_Processing };
	
	float* adcOffsets = (float*)&offsets;
 810039c:	4b27      	ldr	r3, [pc, #156]	; (810043c <MAX11046App_Init+0xd0>)
 810039e:	617b      	str	r3, [r7, #20]
	float* adcMults = (float*)&mults;
 81003a0:	4b27      	ldr	r3, [pc, #156]	; (8100440 <MAX11046App_Init+0xd4>)
 81003a2:	613b      	str	r3, [r7, #16]
	
	/* set the offsets and multipliers according to the connections */
	for	(int i = 0; i < 16; i++)
 81003a4:	2300      	movs	r3, #0
 81003a6:	61fb      	str	r3, [r7, #28]
 81003a8:	e010      	b.n	81003cc <MAX11046App_Init+0x60>
	{
		adcOffsets[i] = 32768;
 81003aa:	69fb      	ldr	r3, [r7, #28]
 81003ac:	009b      	lsls	r3, r3, #2
 81003ae:	697a      	ldr	r2, [r7, #20]
 81003b0:	4413      	add	r3, r2
 81003b2:	f04f 428e 	mov.w	r2, #1191182336	; 0x47000000
 81003b6:	601a      	str	r2, [r3, #0]
		adcMults[i] = 1;
 81003b8:	69fb      	ldr	r3, [r7, #28]
 81003ba:	009b      	lsls	r3, r3, #2
 81003bc:	693a      	ldr	r2, [r7, #16]
 81003be:	4413      	add	r3, r2
 81003c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 81003c4:	601a      	str	r2, [r3, #0]
	for	(int i = 0; i < 16; i++)
 81003c6:	69fb      	ldr	r3, [r7, #28]
 81003c8:	3301      	adds	r3, #1
 81003ca:	61fb      	str	r3, [r7, #28]
 81003cc:	69fb      	ldr	r3, [r7, #28]
 81003ce:	2b0f      	cmp	r3, #15
 81003d0:	ddeb      	ble.n	81003aa <MAX11046App_Init+0x3e>
	}
	
	mults.Ih1 = 50.0f / 32768;
 81003d2:	4b1b      	ldr	r3, [pc, #108]	; (8100440 <MAX11046App_Init+0xd4>)
 81003d4:	4a1b      	ldr	r2, [pc, #108]	; (8100444 <MAX11046App_Init+0xd8>)
 81003d6:	601a      	str	r2, [r3, #0]
	mults.Ih2 = 50.0f / 32768;
 81003d8:	4b19      	ldr	r3, [pc, #100]	; (8100440 <MAX11046App_Init+0xd4>)
 81003da:	4a1a      	ldr	r2, [pc, #104]	; (8100444 <MAX11046App_Init+0xd8>)
 81003dc:	605a      	str	r2, [r3, #4]
	mults.Ih3 = 50.0f / 32768;
 81003de:	4b18      	ldr	r3, [pc, #96]	; (8100440 <MAX11046App_Init+0xd4>)
 81003e0:	4a18      	ldr	r2, [pc, #96]	; (8100444 <MAX11046App_Init+0xd8>)
 81003e2:	609a      	str	r2, [r3, #8]
	mults.Ie1 = 50.0f / 32768;
 81003e4:	4b16      	ldr	r3, [pc, #88]	; (8100440 <MAX11046App_Init+0xd4>)
 81003e6:	4a17      	ldr	r2, [pc, #92]	; (8100444 <MAX11046App_Init+0xd8>)
 81003e8:	60da      	str	r2, [r3, #12]
	mults.Ie2 = 50.0f / 32768;
 81003ea:	4b15      	ldr	r3, [pc, #84]	; (8100440 <MAX11046App_Init+0xd4>)
 81003ec:	4a15      	ldr	r2, [pc, #84]	; (8100444 <MAX11046App_Init+0xd8>)
 81003ee:	611a      	str	r2, [r3, #16]
	mults.Ie3 = 50.0f / 32768;
 81003f0:	4b13      	ldr	r3, [pc, #76]	; (8100440 <MAX11046App_Init+0xd4>)
 81003f2:	4a14      	ldr	r2, [pc, #80]	; (8100444 <MAX11046App_Init+0xd8>)
 81003f4:	615a      	str	r2, [r3, #20]
	
	mults.Vdc1 = 1000.0f / 32768;
 81003f6:	4b12      	ldr	r3, [pc, #72]	; (8100440 <MAX11046App_Init+0xd4>)
 81003f8:	4a13      	ldr	r2, [pc, #76]	; (8100448 <MAX11046App_Init+0xdc>)
 81003fa:	621a      	str	r2, [r3, #32]
	mults.V1 = 1000.0f / 32768;
 81003fc:	4b10      	ldr	r3, [pc, #64]	; (8100440 <MAX11046App_Init+0xd4>)
 81003fe:	4a12      	ldr	r2, [pc, #72]	; (8100448 <MAX11046App_Init+0xdc>)
 8100400:	625a      	str	r2, [r3, #36]	; 0x24
	mults.V2 = 1000.0f / 32768;
 8100402:	4b0f      	ldr	r3, [pc, #60]	; (8100440 <MAX11046App_Init+0xd4>)
 8100404:	4a10      	ldr	r2, [pc, #64]	; (8100448 <MAX11046App_Init+0xdc>)
 8100406:	629a      	str	r2, [r3, #40]	; 0x28
	mults.Vdc2 = 1000.0f / 32768;
 8100408:	4b0d      	ldr	r3, [pc, #52]	; (8100440 <MAX11046App_Init+0xd4>)
 810040a:	4a0f      	ldr	r2, [pc, #60]	; (8100448 <MAX11046App_Init+0xdc>)
 810040c:	62da      	str	r2, [r3, #44]	; 0x2c
	mults.V3 = 1000.0f / 32768;
 810040e:	4b0c      	ldr	r3, [pc, #48]	; (8100440 <MAX11046App_Init+0xd4>)
 8100410:	4a0d      	ldr	r2, [pc, #52]	; (8100448 <MAX11046App_Init+0xdc>)
 8100412:	631a      	str	r2, [r3, #48]	; 0x30
	mults.V4 = 1000.0f / 32768;
 8100414:	4b0a      	ldr	r3, [pc, #40]	; (8100440 <MAX11046App_Init+0xd4>)
 8100416:	4a0c      	ldr	r2, [pc, #48]	; (8100448 <MAX11046App_Init+0xdc>)
 8100418:	635a      	str	r2, [r3, #52]	; 0x34
		
	callback = dataCallback;
 810041a:	4a0c      	ldr	r2, [pc, #48]	; (810044c <MAX11046App_Init+0xe0>)
 810041c:	683b      	ldr	r3, [r7, #0]
 810041e:	6013      	str	r3, [r2, #0]
	Raw_Max11046_Init(mode, &config);
 8100420:	f107 0208 	add.w	r2, r7, #8
 8100424:	7efb      	ldrb	r3, [r7, #27]
 8100426:	4611      	mov	r1, r2
 8100428:	4618      	mov	r0, r3
 810042a:	f000 f8fd 	bl	8100628 <Raw_Max11046_Init>
}
 810042e:	bf00      	nop
 8100430:	3720      	adds	r7, #32
 8100432:	46bd      	mov	sp, r7
 8100434:	bd80      	pop	{r7, pc}
 8100436:	bf00      	nop
 8100438:	081002d9 	.word	0x081002d9
 810043c:	1000003c 	.word	0x1000003c
 8100440:	1000007c 	.word	0x1000007c
 8100444:	3ac80000 	.word	0x3ac80000
 8100448:	3cfa0000 	.word	0x3cfa0000
 810044c:	10000038 	.word	0x10000038

08100450 <MAX11046App_Run>:

/*! @brief start the measurements related to MAX11046 */
void MAX11046App_Run(void)
{
 8100450:	b580      	push	{r7, lr}
 8100452:	af00      	add	r7, sp, #0
	Raw_Max11046_Run();
 8100454:	f000 f986 	bl	8100764 <Raw_Max11046_Run>
}
 8100458:	bf00      	nop
 810045a:	bd80      	pop	{r7, pc}

0810045c <AcquireAllMeasurements>:
	}	while (--i);
	csGPIO->BSRR = csPin;
}

static inline void AcquireAllMeasurements(uint16_t* dataPtr)
{
 810045c:	b480      	push	{r7}
 810045e:	b085      	sub	sp, #20
 8100460:	af00      	add	r7, sp, #0
 8100462:	6078      	str	r0, [r7, #4]
	int i = 8;
 8100464:	2308      	movs	r3, #8
 8100466:	60fb      	str	r3, [r7, #12]
	maxCS1_GPIO_Port->BSRR = (uint32_t)maxCS1_Pin << 16U;
 8100468:	4b1f      	ldr	r3, [pc, #124]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 810046a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 810046e:	619a      	str	r2, [r3, #24]
	do
	{
		maxRead_GPIO_Port->BSRR = (uint32_t)maxRead_Pin << 16U;
 8100470:	4b1e      	ldr	r3, [pc, #120]	; (81004ec <AcquireAllMeasurements+0x90>)
 8100472:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8100476:	619a      	str	r2, [r3, #24]
		*dataPtr++ = (uint16_t)MAX_11046_GPIO->IDR;
 8100478:	4b1d      	ldr	r3, [pc, #116]	; (81004f0 <AcquireAllMeasurements+0x94>)
 810047a:	6919      	ldr	r1, [r3, #16]
 810047c:	687b      	ldr	r3, [r7, #4]
 810047e:	1c9a      	adds	r2, r3, #2
 8100480:	607a      	str	r2, [r7, #4]
 8100482:	b28a      	uxth	r2, r1
 8100484:	801a      	strh	r2, [r3, #0]
		maxRead_GPIO_Port->BSRR = maxRead_Pin;		
 8100486:	4b19      	ldr	r3, [pc, #100]	; (81004ec <AcquireAllMeasurements+0x90>)
 8100488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810048c:	619a      	str	r2, [r3, #24]
	}	while (--i);
 810048e:	68fb      	ldr	r3, [r7, #12]
 8100490:	3b01      	subs	r3, #1
 8100492:	60fb      	str	r3, [r7, #12]
 8100494:	68fb      	ldr	r3, [r7, #12]
 8100496:	2b00      	cmp	r3, #0
 8100498:	d1ea      	bne.n	8100470 <AcquireAllMeasurements+0x14>
	maxCS1_GPIO_Port->BSRR = maxCS1_Pin;
 810049a:	4b13      	ldr	r3, [pc, #76]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 810049c:	2204      	movs	r2, #4
 810049e:	619a      	str	r2, [r3, #24]
	i = 8;
 81004a0:	2308      	movs	r3, #8
 81004a2:	60fb      	str	r3, [r7, #12]
	maxCS2_GPIO_Port->BSRR = (uint32_t)maxCS2_Pin << 16U;
 81004a4:	4b10      	ldr	r3, [pc, #64]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 81004a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81004aa:	619a      	str	r2, [r3, #24]
	do
	{
		maxRead_GPIO_Port->BSRR = (uint32_t)maxRead_Pin << 16U;
 81004ac:	4b0f      	ldr	r3, [pc, #60]	; (81004ec <AcquireAllMeasurements+0x90>)
 81004ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 81004b2:	619a      	str	r2, [r3, #24]
		*dataPtr++ = (uint16_t)MAX_11046_GPIO->IDR;
 81004b4:	4b0e      	ldr	r3, [pc, #56]	; (81004f0 <AcquireAllMeasurements+0x94>)
 81004b6:	6919      	ldr	r1, [r3, #16]
 81004b8:	687b      	ldr	r3, [r7, #4]
 81004ba:	1c9a      	adds	r2, r3, #2
 81004bc:	607a      	str	r2, [r7, #4]
 81004be:	b28a      	uxth	r2, r1
 81004c0:	801a      	strh	r2, [r3, #0]
		maxRead_GPIO_Port->BSRR = maxRead_Pin;		
 81004c2:	4b0a      	ldr	r3, [pc, #40]	; (81004ec <AcquireAllMeasurements+0x90>)
 81004c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81004c8:	619a      	str	r2, [r3, #24]
	}	while (--i);
 81004ca:	68fb      	ldr	r3, [r7, #12]
 81004cc:	3b01      	subs	r3, #1
 81004ce:	60fb      	str	r3, [r7, #12]
 81004d0:	68fb      	ldr	r3, [r7, #12]
 81004d2:	2b00      	cmp	r3, #0
 81004d4:	d1ea      	bne.n	81004ac <AcquireAllMeasurements+0x50>
	maxCS2_GPIO_Port->BSRR = maxCS2_Pin;
 81004d6:	4b04      	ldr	r3, [pc, #16]	; (81004e8 <AcquireAllMeasurements+0x8c>)
 81004d8:	2208      	movs	r2, #8
 81004da:	619a      	str	r2, [r3, #24]
}
 81004dc:	bf00      	nop
 81004de:	3714      	adds	r7, #20
 81004e0:	46bd      	mov	sp, r7
 81004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004e6:	4770      	bx	lr
 81004e8:	58021000 	.word	0x58021000
 81004ec:	58020800 	.word	0x58020800
 81004f0:	58021400 	.word	0x58021400

081004f4 <ReadResults>:

/*! @brief Get the data results */
static inline void ReadResults(void)
{
 81004f4:	b580      	push	{r7, lr}
 81004f6:	af00      	add	r7, sp, #0
	AcquireAllMeasurements(u16Data);
 81004f8:	4802      	ldr	r0, [pc, #8]	; (8100504 <ReadResults+0x10>)
 81004fa:	f7ff ffaf 	bl	810045c <AcquireAllMeasurements>
//	AcquireMeasurements(maxCS2_GPIO_Port, maxCS2_Pin, u16Data + 8);
//	AcquireMeasurements(maxCS1_GPIO_Port, maxCS1_Pin, u16Data);
}
 81004fe:	bf00      	nop
 8100500:	bd80      	pop	{r7, pc}
 8100502:	bf00      	nop
 8100504:	100001f8 	.word	0x100001f8

08100508 <Raw_Max11046_DeInit>:


/*! @brief Deinitialize the max 11046 module */
void Raw_Max11046_DeInit(void)
{
 8100508:	b580      	push	{r7, lr}
 810050a:	af00      	add	r7, sp, #0
	// clear the flag, then enable neg edge interrupt, then assign callback to relevant port pin
	HAL_GPIO_DeInit(maxBusy1_GPIO_Port,maxBusy1_Pin);
 810050c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100510:	480d      	ldr	r0, [pc, #52]	; (8100548 <Raw_Max11046_DeInit+0x40>)
 8100512:	f001 fb15 	bl	8101b40 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(maxBusy2_GPIO_Port,maxBusy2_Pin);
 8100516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810051a:	480b      	ldr	r0, [pc, #44]	; (8100548 <Raw_Max11046_DeInit+0x40>)
 810051c:	f001 fb10 	bl	8101b40 <HAL_GPIO_DeInit>
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy1_Pin);
 8100520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100524:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8100528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy2_Pin);
 810052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	
	HAL_TIM_PWM_DeInit(&maxTimerHandle);
 8100538:	4804      	ldr	r0, [pc, #16]	; (810054c <Raw_Max11046_DeInit+0x44>)
 810053a:	f003 fb93 	bl	8103c64 <HAL_TIM_PWM_DeInit>
	moduleActive = false;
 810053e:	4b04      	ldr	r3, [pc, #16]	; (8100550 <Raw_Max11046_DeInit+0x48>)
 8100540:	2200      	movs	r2, #0
 8100542:	701a      	strb	r2, [r3, #0]
} 
 8100544:	bf00      	nop
 8100546:	bd80      	pop	{r7, pc}
 8100548:	58020800 	.word	0x58020800
 810054c:	100001ac 	.word	0x100001ac
 8100550:	100000bc 	.word	0x100000bc

08100554 <Timer_Config>:

static void Timer_Config(void)
{
 8100554:	b580      	push	{r7, lr}
 8100556:	b088      	sub	sp, #32
 8100558:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */
  TIM_OC_InitTypeDef sConfigOC = {0};
 810055a:	1d3b      	adds	r3, r7, #4
 810055c:	2200      	movs	r2, #0
 810055e:	601a      	str	r2, [r3, #0]
 8100560:	605a      	str	r2, [r3, #4]
 8100562:	609a      	str	r2, [r3, #8]
 8100564:	60da      	str	r2, [r3, #12]
 8100566:	611a      	str	r2, [r3, #16]
 8100568:	615a      	str	r2, [r3, #20]
 810056a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  maxTimerHandle.Instance = TIM12;
 810056c:	4b2a      	ldr	r3, [pc, #168]	; (8100618 <Timer_Config+0xc4>)
 810056e:	4a2b      	ldr	r2, [pc, #172]	; (810061c <Timer_Config+0xc8>)
 8100570:	601a      	str	r2, [r3, #0]
  maxTimerHandle.Init.Prescaler = 0;
 8100572:	4b29      	ldr	r3, [pc, #164]	; (8100618 <Timer_Config+0xc4>)
 8100574:	2200      	movs	r2, #0
 8100576:	605a      	str	r2, [r3, #4]
  maxTimerHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100578:	4b27      	ldr	r3, [pc, #156]	; (8100618 <Timer_Config+0xc4>)
 810057a:	2200      	movs	r2, #0
 810057c:	609a      	str	r2, [r3, #8]
  maxTimerHandle.Init.Period = (uint16_t)(240 * adcContConfig.conversionCycleTimeUs);		// --todo-- configure 240 seperately
 810057e:	4b28      	ldr	r3, [pc, #160]	; (8100620 <Timer_Config+0xcc>)
 8100580:	681b      	ldr	r3, [r3, #0]
 8100582:	b29b      	uxth	r3, r3
 8100584:	461a      	mov	r2, r3
 8100586:	0112      	lsls	r2, r2, #4
 8100588:	1ad3      	subs	r3, r2, r3
 810058a:	011b      	lsls	r3, r3, #4
 810058c:	b29b      	uxth	r3, r3
 810058e:	461a      	mov	r2, r3
 8100590:	4b21      	ldr	r3, [pc, #132]	; (8100618 <Timer_Config+0xc4>)
 8100592:	60da      	str	r2, [r3, #12]
  maxTimerHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100594:	4b20      	ldr	r3, [pc, #128]	; (8100618 <Timer_Config+0xc4>)
 8100596:	2200      	movs	r2, #0
 8100598:	611a      	str	r2, [r3, #16]
  maxTimerHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 810059a:	4b1f      	ldr	r3, [pc, #124]	; (8100618 <Timer_Config+0xc4>)
 810059c:	2280      	movs	r2, #128	; 0x80
 810059e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&maxTimerHandle) != HAL_OK)
 81005a0:	481d      	ldr	r0, [pc, #116]	; (8100618 <Timer_Config+0xc4>)
 81005a2:	f003 fb08 	bl	8103bb6 <HAL_TIM_PWM_Init>
 81005a6:	4603      	mov	r3, r0
 81005a8:	2b00      	cmp	r3, #0
 81005aa:	d001      	beq.n	81005b0 <Timer_Config+0x5c>
  {
    Error_Handler();
 81005ac:	f000 fbcc 	bl	8100d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81005b0:	2360      	movs	r3, #96	; 0x60
 81005b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = TIMER_PULSE;
 81005b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 81005b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 81005ba:	2302      	movs	r3, #2
 81005bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81005be:	2300      	movs	r3, #0
 81005c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&maxTimerHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81005c2:	1d3b      	adds	r3, r7, #4
 81005c4:	2200      	movs	r2, #0
 81005c6:	4619      	mov	r1, r3
 81005c8:	4813      	ldr	r0, [pc, #76]	; (8100618 <Timer_Config+0xc4>)
 81005ca:	f003 fd7f 	bl	81040cc <HAL_TIM_PWM_ConfigChannel>
 81005ce:	4603      	mov	r3, r0
 81005d0:	2b00      	cmp	r3, #0
 81005d2:	d001      	beq.n	81005d8 <Timer_Config+0x84>
  {
    Error_Handler();
 81005d4:	f000 fbb8 	bl	8100d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&maxTimerHandle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81005d8:	1d3b      	adds	r3, r7, #4
 81005da:	2204      	movs	r2, #4
 81005dc:	4619      	mov	r1, r3
 81005de:	480e      	ldr	r0, [pc, #56]	; (8100618 <Timer_Config+0xc4>)
 81005e0:	f003 fd74 	bl	81040cc <HAL_TIM_PWM_ConfigChannel>
 81005e4:	4603      	mov	r3, r0
 81005e6:	2b00      	cmp	r3, #0
 81005e8:	d001      	beq.n	81005ee <Timer_Config+0x9a>
  {
    Error_Handler();
 81005ea:	f000 fbad 	bl	8100d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */
	
  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&maxTimerHandle);
 81005ee:	480a      	ldr	r0, [pc, #40]	; (8100618 <Timer_Config+0xc4>)
 81005f0:	f000 fc72 	bl	8100ed8 <HAL_TIM_MspPostInit>
	
	MAX_11046_TIMER->CCR1 = MAX_11046_TIMER->CCR2 = TIMER_PULSE;
 81005f4:	4a09      	ldr	r2, [pc, #36]	; (810061c <Timer_Config+0xc8>)
 81005f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 81005fa:	6393      	str	r3, [r2, #56]	; 0x38
 81005fc:	4a07      	ldr	r2, [pc, #28]	; (810061c <Timer_Config+0xc8>)
 81005fe:	6353      	str	r3, [r2, #52]	; 0x34
	if(acqType == ADC_MODE_SINGLE)
 8100600:	4b08      	ldr	r3, [pc, #32]	; (8100624 <Timer_Config+0xd0>)
 8100602:	781b      	ldrb	r3, [r3, #0]
 8100604:	2b00      	cmp	r3, #0
 8100606:	d103      	bne.n	8100610 <Timer_Config+0xbc>
		HAL_TIM_OnePulse_Init(&maxTimerHandle, TIM_OPMODE_SINGLE);
 8100608:	2108      	movs	r1, #8
 810060a:	4803      	ldr	r0, [pc, #12]	; (8100618 <Timer_Config+0xc4>)
 810060c:	f003 fc8e 	bl	8103f2c <HAL_TIM_OnePulse_Init>
}
 8100610:	bf00      	nop
 8100612:	3720      	adds	r7, #32
 8100614:	46bd      	mov	sp, r7
 8100616:	bd80      	pop	{r7, pc}
 8100618:	100001ac 	.word	0x100001ac
 810061c:	40001800 	.word	0x40001800
 8100620:	10000000 	.word	0x10000000
 8100624:	10000008 	.word	0x10000008

08100628 <Raw_Max11046_Init>:
@brief Initializes the raw max11046 module 
@param type- ADC_MODE_SINGLE or ADC_MODE_CONT for single or continuous conversions respectively
@param *contConfig- adc_cont_config_t contains the continuous transfer configuration
*/
void Raw_Max11046_Init(adc_acq_mode_t type, adc_cont_config_t* contConfig)
{
 8100628:	b580      	push	{r7, lr}
 810062a:	b088      	sub	sp, #32
 810062c:	af00      	add	r7, sp, #0
 810062e:	4603      	mov	r3, r0
 8100630:	6039      	str	r1, [r7, #0]
 8100632:	71fb      	strb	r3, [r7, #7]
	// DeInitialize if already initialized
	if(moduleActive)
 8100634:	4b43      	ldr	r3, [pc, #268]	; (8100744 <Raw_Max11046_Init+0x11c>)
 8100636:	781b      	ldrb	r3, [r3, #0]
 8100638:	b2db      	uxtb	r3, r3
 810063a:	2b00      	cmp	r3, #0
 810063c:	d001      	beq.n	8100642 <Raw_Max11046_Init+0x1a>
		Raw_Max11046_DeInit();
 810063e:	f7ff ff63 	bl	8100508 <Raw_Max11046_DeInit>
	
	acqType = type;
 8100642:	4a41      	ldr	r2, [pc, #260]	; (8100748 <Raw_Max11046_Init+0x120>)
 8100644:	79fb      	ldrb	r3, [r7, #7]
 8100646:	7013      	strb	r3, [r2, #0]
	adcContConfig.conversionCycleTimeUs = contConfig->conversionCycleTimeUs;
 8100648:	683b      	ldr	r3, [r7, #0]
 810064a:	681b      	ldr	r3, [r3, #0]
 810064c:	4a3f      	ldr	r2, [pc, #252]	; (810074c <Raw_Max11046_Init+0x124>)
 810064e:	6013      	str	r3, [r2, #0]
	adcContConfig.callback = contConfig->callback; 
 8100650:	683b      	ldr	r3, [r7, #0]
 8100652:	685b      	ldr	r3, [r3, #4]
 8100654:	4a3d      	ldr	r2, [pc, #244]	; (810074c <Raw_Max11046_Init+0x124>)
 8100656:	6053      	str	r3, [r2, #4]
	
	/*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, maxCS1_Pin|maxCS2_Pin, GPIO_PIN_SET);
 8100658:	2201      	movs	r2, #1
 810065a:	210c      	movs	r1, #12
 810065c:	483c      	ldr	r0, [pc, #240]	; (8100750 <Raw_Max11046_Init+0x128>)
 810065e:	f001 fb91 	bl	8101d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, maxWrite_Pin|LCD_Disp_Pin, GPIO_PIN_SET);
 8100662:	2201      	movs	r2, #1
 8100664:	f44f 7182 	mov.w	r1, #260	; 0x104
 8100668:	483a      	ldr	r0, [pc, #232]	; (8100754 <Raw_Max11046_Init+0x12c>)
 810066a:	f001 fb8b 	bl	8101d84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(maxRead_GPIO_Port, maxRead_Pin, GPIO_PIN_SET);
 810066e:	2201      	movs	r2, #1
 8100670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100674:	4838      	ldr	r0, [pc, #224]	; (8100758 <Raw_Max11046_Init+0x130>)
 8100676:	f001 fb85 	bl	8101d84 <HAL_GPIO_WritePin>
	
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 810067a:	f107 030c 	add.w	r3, r7, #12
 810067e:	2200      	movs	r2, #0
 8100680:	601a      	str	r2, [r3, #0]
 8100682:	605a      	str	r2, [r3, #4]
 8100684:	609a      	str	r2, [r3, #8]
 8100686:	60da      	str	r2, [r3, #12]
 8100688:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pins : maxCS1_Pin maxCS2_Pin */
  GPIO_InitStruct.Pin = maxCS1_Pin|maxCS2_Pin;
 810068a:	230c      	movs	r3, #12
 810068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810068e:	2301      	movs	r3, #1
 8100690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100692:	2300      	movs	r3, #0
 8100694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100696:	2302      	movs	r3, #2
 8100698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810069a:	f107 030c 	add.w	r3, r7, #12
 810069e:	4619      	mov	r1, r3
 81006a0:	482b      	ldr	r0, [pc, #172]	; (8100750 <Raw_Max11046_Init+0x128>)
 81006a2:	f001 f89d 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : maxWrite_Pin LCD_Disp_Pin */
  GPIO_InitStruct.Pin = maxWrite_Pin;
 81006a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 81006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006ac:	2301      	movs	r3, #1
 81006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006b0:	2300      	movs	r3, #0
 81006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006b4:	2300      	movs	r3, #0
 81006b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81006b8:	f107 030c 	add.w	r3, r7, #12
 81006bc:	4619      	mov	r1, r3
 81006be:	4825      	ldr	r0, [pc, #148]	; (8100754 <Raw_Max11046_Init+0x12c>)
 81006c0:	f001 f88e 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : maxRead_Pin */
  GPIO_InitStruct.Pin = maxRead_Pin;
 81006c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81006c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006ca:	2301      	movs	r3, #1
 81006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ce:	2300      	movs	r3, #0
 81006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81006d2:	2303      	movs	r3, #3
 81006d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(maxRead_GPIO_Port, &GPIO_InitStruct);
 81006d6:	f107 030c 	add.w	r3, r7, #12
 81006da:	4619      	mov	r1, r3
 81006dc:	481e      	ldr	r0, [pc, #120]	; (8100758 <Raw_Max11046_Init+0x130>)
 81006de:	f001 f87f 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy1_Pin */
  GPIO_InitStruct.Pin = maxBusy1_Pin;
 81006e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81006e8:	4b1c      	ldr	r3, [pc, #112]	; (810075c <Raw_Max11046_Init+0x134>)
 81006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ec:	2300      	movs	r3, #0
 81006ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(maxBusy1_GPIO_Port, &GPIO_InitStruct);
 81006f0:	f107 030c 	add.w	r3, r7, #12
 81006f4:	4619      	mov	r1, r3
 81006f6:	4818      	ldr	r0, [pc, #96]	; (8100758 <Raw_Max11046_Init+0x130>)
 81006f8:	f001 f872 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy2_Pin */
  GPIO_InitStruct.Pin = maxBusy2_Pin;
 81006fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8100700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100702:	4b16      	ldr	r3, [pc, #88]	; (810075c <Raw_Max11046_Init+0x134>)
 8100704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100706:	2300      	movs	r3, #0
 8100708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(maxBusy2_GPIO_Port, &GPIO_InitStruct);
 810070a:	f107 030c 	add.w	r3, r7, #12
 810070e:	4619      	mov	r1, r3
 8100710:	4811      	ldr	r0, [pc, #68]	; (8100758 <Raw_Max11046_Init+0x130>)
 8100712:	f001 f865 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : maxD0_Pin maxD1_Pin maxD2_Pin maxD3_Pin
                           maxD4_Pin maxD5_Pin maxD6_Pin maxD7_Pin
                           maxD8_Pin maxD9_Pin maxD10_Pin maxD11_Pin
                           maxD12_Pin maxD13_Pin maxD14_Pin maxD15_Pin */
  GPIO_InitStruct.Pin = maxD0_Pin|maxD1_Pin|maxD2_Pin|maxD3_Pin
 8100716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810071a:	60fb      	str	r3, [r7, #12]
                          |maxD4_Pin|maxD5_Pin|maxD6_Pin|maxD7_Pin
                          |maxD8_Pin|maxD9_Pin|maxD10_Pin|maxD11_Pin
                          |maxD12_Pin|maxD13_Pin|maxD14_Pin|maxD15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810071c:	2300      	movs	r3, #0
 810071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100720:	2300      	movs	r3, #0
 8100722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100724:	f107 030c 	add.w	r3, r7, #12
 8100728:	4619      	mov	r1, r3
 810072a:	480d      	ldr	r0, [pc, #52]	; (8100760 <Raw_Max11046_Init+0x138>)
 810072c:	f001 f858 	bl	81017e0 <HAL_GPIO_Init>
	
	Timer_Config();
 8100730:	f7ff ff10 	bl	8100554 <Timer_Config>
	
	moduleActive = true;
 8100734:	4b03      	ldr	r3, [pc, #12]	; (8100744 <Raw_Max11046_Init+0x11c>)
 8100736:	2201      	movs	r2, #1
 8100738:	701a      	strb	r2, [r3, #0]
}
 810073a:	bf00      	nop
 810073c:	3720      	adds	r7, #32
 810073e:	46bd      	mov	sp, r7
 8100740:	bd80      	pop	{r7, pc}
 8100742:	bf00      	nop
 8100744:	100000bc 	.word	0x100000bc
 8100748:	10000008 	.word	0x10000008
 810074c:	10000000 	.word	0x10000000
 8100750:	58021000 	.word	0x58021000
 8100754:	58022000 	.word	0x58022000
 8100758:	58020800 	.word	0x58020800
 810075c:	11210000 	.word	0x11210000
 8100760:	58021400 	.word	0x58021400

08100764 <Raw_Max11046_Run>:
@details For single conversion mode performs and provides the results in a blocking way.
For continuous conversion mode starts the conversions, after each conversion adc_cont_config_t.callback will be called
@returns uint16_t*- For single conversion mode returns the pointer to the eight acquired values. Returns NULL for continuous conversion mode
*/
uint16_t* Raw_Max11046_Run(void)
{
 8100764:	b580      	push	{r7, lr}
 8100766:	af00      	add	r7, sp, #0
		/* EXTI interrupt init*/
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy1_Pin);
 8100768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810076c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8100770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	__HAL_GPIO_EXTI_CLEAR_IT(maxBusy2_Pin);
 8100774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100778:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 810077c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	 HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8100780:	2200      	movs	r2, #0
 8100782:	2101      	movs	r1, #1
 8100784:	2028      	movs	r0, #40	; 0x28
 8100786:	f000 ffe2 	bl	810174e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 810078a:	2028      	movs	r0, #40	; 0x28
 810078c:	f000 fff9 	bl	8101782 <HAL_NVIC_EnableIRQ>
	
	if(acqType == ADC_MODE_SINGLE)
 8100790:	4b0e      	ldr	r3, [pc, #56]	; (81007cc <Raw_Max11046_Run+0x68>)
 8100792:	781b      	ldrb	r3, [r3, #0]
 8100794:	2b00      	cmp	r3, #0
 8100796:	d10e      	bne.n	81007b6 <Raw_Max11046_Run+0x52>
	{
		// wait for the pending operations to end
		while(HAL_GPIO_ReadPin(maxBusy1_GPIO_Port,maxBusy1_Pin));
 8100798:	bf00      	nop
 810079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810079e:	480c      	ldr	r0, [pc, #48]	; (81007d0 <Raw_Max11046_Run+0x6c>)
 81007a0:	f001 fad8 	bl	8101d54 <HAL_GPIO_ReadPin>
 81007a4:	4603      	mov	r3, r0
 81007a6:	2b00      	cmp	r3, #0
 81007a8:	d1f7      	bne.n	810079a <Raw_Max11046_Run+0x36>
	
		HAL_TIM_OnePulse_Start(&maxTimerHandle,TIM_OPMODE_SINGLE);
 81007aa:	2108      	movs	r1, #8
 81007ac:	4809      	ldr	r0, [pc, #36]	; (81007d4 <Raw_Max11046_Run+0x70>)
 81007ae:	f003 fc17 	bl	8103fe0 <HAL_TIM_OnePulse_Start>
//		ResPending = true;
//		while(ResPending);
		return u16Data;
 81007b2:	4b09      	ldr	r3, [pc, #36]	; (81007d8 <Raw_Max11046_Run+0x74>)
 81007b4:	e008      	b.n	81007c8 <Raw_Max11046_Run+0x64>
	}
	else
	{
		// enable pwm to produce continuous data
		HAL_TIM_PWM_Start(&maxTimerHandle,TIM_CHANNEL_1);
 81007b6:	2100      	movs	r1, #0
 81007b8:	4806      	ldr	r0, [pc, #24]	; (81007d4 <Raw_Max11046_Run+0x70>)
 81007ba:	f003 faaf 	bl	8103d1c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&maxTimerHandle,TIM_CHANNEL_2);
 81007be:	2104      	movs	r1, #4
 81007c0:	4804      	ldr	r0, [pc, #16]	; (81007d4 <Raw_Max11046_Run+0x70>)
 81007c2:	f003 faab 	bl	8103d1c <HAL_TIM_PWM_Start>
		return NULL;
 81007c6:	2300      	movs	r3, #0
	}
}
 81007c8:	4618      	mov	r0, r3
 81007ca:	bd80      	pop	{r7, pc}
 81007cc:	10000008 	.word	0x10000008
 81007d0:	58020800 	.word	0x58020800
 81007d4:	100001ac 	.word	0x100001ac
 81007d8:	100001f8 	.word	0x100001f8

081007dc <HAL_GPIO_EXTI_Callback>:
//	MAX_11046_TIMER->CCR1 = MAX_11046_TIMER->CCR2 = TIMER_PULSE;
//	
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 81007dc:	b580      	push	{r7, lr}
 81007de:	b082      	sub	sp, #8
 81007e0:	af00      	add	r7, sp, #0
 81007e2:	4603      	mov	r3, r0
 81007e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == maxBusy1_Pin)
 81007e6:	88fb      	ldrh	r3, [r7, #6]
 81007e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81007ec:	d109      	bne.n	8100802 <HAL_GPIO_EXTI_Callback+0x26>
	{
		ReadResults();
 81007ee:	f7ff fe81 	bl	81004f4 <ReadResults>
		if(adcContConfig.callback)
 81007f2:	4b06      	ldr	r3, [pc, #24]	; (810080c <HAL_GPIO_EXTI_Callback+0x30>)
 81007f4:	685b      	ldr	r3, [r3, #4]
 81007f6:	2b00      	cmp	r3, #0
 81007f8:	d003      	beq.n	8100802 <HAL_GPIO_EXTI_Callback+0x26>
			adcContConfig.callback(u16Data);
 81007fa:	4b04      	ldr	r3, [pc, #16]	; (810080c <HAL_GPIO_EXTI_Callback+0x30>)
 81007fc:	685b      	ldr	r3, [r3, #4]
 81007fe:	4804      	ldr	r0, [pc, #16]	; (8100810 <HAL_GPIO_EXTI_Callback+0x34>)
 8100800:	4798      	blx	r3
	}
}
 8100802:	bf00      	nop
 8100804:	3708      	adds	r7, #8
 8100806:	46bd      	mov	sp, r7
 8100808:	bd80      	pop	{r7, pc}
 810080a:	bf00      	nop
 810080c:	10000000 	.word	0x10000000
 8100810:	100001f8 	.word	0x100001f8

08100814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100814:	b480      	push	{r7}
 8100816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100818:	4b0b      	ldr	r3, [pc, #44]	; (8100848 <SystemInit+0x34>)
 810081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810081e:	4a0a      	ldr	r2, [pc, #40]	; (8100848 <SystemInit+0x34>)
 8100820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100828:	4b07      	ldr	r3, [pc, #28]	; (8100848 <SystemInit+0x34>)
 810082a:	691b      	ldr	r3, [r3, #16]
 810082c:	4a06      	ldr	r2, [pc, #24]	; (8100848 <SystemInit+0x34>)
 810082e:	f043 0310 	orr.w	r3, r3, #16
 8100832:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100834:	4b04      	ldr	r3, [pc, #16]	; (8100848 <SystemInit+0x34>)
 8100836:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810083a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810083c:	bf00      	nop
 810083e:	46bd      	mov	sp, r7
 8100840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100844:	4770      	bx	lr
 8100846:	bf00      	nop
 8100848:	e000ed00 	.word	0xe000ed00

0810084c <DataProcessingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DataProcessingCallback(adc_measures_t* result)
{
 810084c:	b580      	push	{r7, lr}
 810084e:	b084      	sub	sp, #16
 8100850:	af00      	add	r7, sp, #0
 8100852:	6078      	str	r0, [r7, #4]
	volatile m4_to_m7_data_t* data = &sharedData->m4Tom7;
 8100854:	4b11      	ldr	r3, [pc, #68]	; (810089c <DataProcessingCallback+0x50>)
 8100856:	681b      	ldr	r3, [r3, #0]
 8100858:	60fb      	str	r3, [r7, #12]
	int index = (data->recordIndex + 1) & (MEASURE_SAVE_COUNT - 1);
 810085a:	68fb      	ldr	r3, [r7, #12]
 810085c:	685b      	ldr	r3, [r3, #4]
 810085e:	3301      	adds	r3, #1
 8100860:	f003 031f 	and.w	r3, r3, #31
 8100864:	60bb      	str	r3, [r7, #8]
	memcpy((void*)&(data->dataRecord[index]), result, sizeof(adc_measures_t));
 8100866:	68bb      	ldr	r3, [r7, #8]
 8100868:	019b      	lsls	r3, r3, #6
 810086a:	3348      	adds	r3, #72	; 0x48
 810086c:	68fa      	ldr	r2, [r7, #12]
 810086e:	4413      	add	r3, r2
 8100870:	3304      	adds	r3, #4
 8100872:	2240      	movs	r2, #64	; 0x40
 8100874:	6879      	ldr	r1, [r7, #4]
 8100876:	4618      	mov	r0, r3
 8100878:	f004 f968 	bl	8104b4c <memcpy>
	data->recordIndex = index;
 810087c:	68fb      	ldr	r3, [r7, #12]
 810087e:	68ba      	ldr	r2, [r7, #8]
 8100880:	605a      	str	r2, [r3, #4]
	data->lastDataPointer = &data->dataRecord[index];
 8100882:	68bb      	ldr	r3, [r7, #8]
 8100884:	019b      	lsls	r3, r3, #6
 8100886:	3348      	adds	r3, #72	; 0x48
 8100888:	68fa      	ldr	r2, [r7, #12]
 810088a:	4413      	add	r3, r2
 810088c:	1d1a      	adds	r2, r3, #4
 810088e:	68fb      	ldr	r3, [r7, #12]
 8100890:	609a      	str	r2, [r3, #8]
}
 8100892:	bf00      	nop
 8100894:	3710      	adds	r7, #16
 8100896:	46bd      	mov	sp, r7
 8100898:	bd80      	pop	{r7, pc}
 810089a:	bf00      	nop
 810089c:	08104b90 	.word	0x08104b90

081008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81008a0:	b580      	push	{r7, lr}
 81008a2:	b082      	sub	sp, #8
 81008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memset((void*)&(sharedData->m4Tom7), 0, sizeof(m4_to_m7_data_t));
 81008a6:	4b2c      	ldr	r3, [pc, #176]	; (8100958 <main+0xb8>)
 81008a8:	681b      	ldr	r3, [r3, #0]
 81008aa:	f640 024c 	movw	r2, #2124	; 0x84c
 81008ae:	2100      	movs	r1, #0
 81008b0:	4618      	mov	r0, r3
 81008b2:	f004 f959 	bl	8104b68 <memset>
	sharedData->m4Tom7.lastDataPointer = sharedData->m4Tom7.dataRecord;
 81008b6:	4b28      	ldr	r3, [pc, #160]	; (8100958 <main+0xb8>)
 81008b8:	681a      	ldr	r2, [r3, #0]
 81008ba:	4b27      	ldr	r3, [pc, #156]	; (8100958 <main+0xb8>)
 81008bc:	681b      	ldr	r3, [r3, #0]
 81008be:	324c      	adds	r2, #76	; 0x4c
 81008c0:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81008c2:	4b26      	ldr	r3, [pc, #152]	; (810095c <main+0xbc>)
 81008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008c8:	4a24      	ldr	r2, [pc, #144]	; (810095c <main+0xbc>)
 81008ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81008ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008d2:	4b22      	ldr	r3, [pc, #136]	; (810095c <main+0xbc>)
 81008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81008dc:	607b      	str	r3, [r7, #4]
 81008de:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81008e0:	2001      	movs	r0, #1
 81008e2:	f001 fa83 	bl	8101dec <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81008e6:	f001 fee3 	bl	81026b0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81008ea:	2201      	movs	r2, #1
 81008ec:	2102      	movs	r1, #2
 81008ee:	2000      	movs	r0, #0
 81008f0:	f001 fe64 	bl	81025bc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81008f4:	4b1a      	ldr	r3, [pc, #104]	; (8100960 <main+0xc0>)
 81008f6:	681b      	ldr	r3, [r3, #0]
 81008f8:	091b      	lsrs	r3, r3, #4
 81008fa:	f003 030f 	and.w	r3, r3, #15
 81008fe:	2b07      	cmp	r3, #7
 8100900:	d108      	bne.n	8100914 <main+0x74>
 8100902:	4b18      	ldr	r3, [pc, #96]	; (8100964 <main+0xc4>)
 8100904:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100908:	4a16      	ldr	r2, [pc, #88]	; (8100964 <main+0xc4>)
 810090a:	f043 0301 	orr.w	r3, r3, #1
 810090e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100912:	e007      	b.n	8100924 <main+0x84>
 8100914:	4b13      	ldr	r3, [pc, #76]	; (8100964 <main+0xc4>)
 8100916:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810091a:	4a12      	ldr	r2, [pc, #72]	; (8100964 <main+0xc4>)
 810091c:	f043 0301 	orr.w	r3, r3, #1
 8100920:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100924:	f000 fd84 	bl	8101430 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100928:	f000 f8dc 	bl	8100ae4 <MX_GPIO_Init>
  MX_TIM17_Init();
 810092c:	f000 f860 	bl	81009f0 <MX_TIM17_Init>
  MX_I2C2_Init();
 8100930:	f000 f81e 	bl	8100970 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCDDisplay_Init();
 8100934:	f000 fd72 	bl	810141c <LCDDisplay_Init>
  HAL_TIM_PWM_Start(&htim17,TIM_CHANNEL_1);			// LCD PWM channel
 8100938:	2100      	movs	r1, #0
 810093a:	480b      	ldr	r0, [pc, #44]	; (8100968 <main+0xc8>)
 810093c:	f003 f9ee 	bl	8103d1c <HAL_TIM_PWM_Start>
  MAX11046App_Init(sharedData->m7Tom4.periodUs, DataProcessingCallback);	// Measurements @ 200KHz
 8100940:	4b05      	ldr	r3, [pc, #20]	; (8100958 <main+0xb8>)
 8100942:	681b      	ldr	r3, [r3, #0]
 8100944:	f8d3 3850 	ldr.w	r3, [r3, #2128]	; 0x850
 8100948:	4908      	ldr	r1, [pc, #32]	; (810096c <main+0xcc>)
 810094a:	4618      	mov	r0, r3
 810094c:	f7ff fd0e 	bl	810036c <MAX11046App_Init>
  MAX11046App_Run();
 8100950:	f7ff fd7e 	bl	8100450 <MAX11046App_Run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100954:	e7fe      	b.n	8100954 <main+0xb4>
 8100956:	bf00      	nop
 8100958:	08104b90 	.word	0x08104b90
 810095c:	58024400 	.word	0x58024400
 8100960:	e000ed00 	.word	0xe000ed00
 8100964:	58026400 	.word	0x58026400
 8100968:	10000264 	.word	0x10000264
 810096c:	0810084d 	.word	0x0810084d

08100970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100970:	b580      	push	{r7, lr}
 8100972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100974:	4b1b      	ldr	r3, [pc, #108]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100976:	4a1c      	ldr	r2, [pc, #112]	; (81009e8 <MX_I2C2_Init+0x78>)
 8100978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 810097a:	4b1a      	ldr	r3, [pc, #104]	; (81009e4 <MX_I2C2_Init+0x74>)
 810097c:	4a1b      	ldr	r2, [pc, #108]	; (81009ec <MX_I2C2_Init+0x7c>)
 810097e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100980:	4b18      	ldr	r3, [pc, #96]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100982:	2200      	movs	r2, #0
 8100984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100986:	4b17      	ldr	r3, [pc, #92]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100988:	2201      	movs	r2, #1
 810098a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810098c:	4b15      	ldr	r3, [pc, #84]	; (81009e4 <MX_I2C2_Init+0x74>)
 810098e:	2200      	movs	r2, #0
 8100990:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100992:	4b14      	ldr	r3, [pc, #80]	; (81009e4 <MX_I2C2_Init+0x74>)
 8100994:	2200      	movs	r2, #0
 8100996:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100998:	4b12      	ldr	r3, [pc, #72]	; (81009e4 <MX_I2C2_Init+0x74>)
 810099a:	2200      	movs	r2, #0
 810099c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810099e:	4b11      	ldr	r3, [pc, #68]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009a0:	2200      	movs	r2, #0
 81009a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81009a4:	4b0f      	ldr	r3, [pc, #60]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009a6:	2200      	movs	r2, #0
 81009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81009aa:	480e      	ldr	r0, [pc, #56]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009ac:	f001 fa30 	bl	8101e10 <HAL_I2C_Init>
 81009b0:	4603      	mov	r3, r0
 81009b2:	2b00      	cmp	r3, #0
 81009b4:	d001      	beq.n	81009ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81009b6:	f000 f9c7 	bl	8100d48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81009ba:	2100      	movs	r1, #0
 81009bc:	4809      	ldr	r0, [pc, #36]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009be:	f001 fab6 	bl	8101f2e <HAL_I2CEx_ConfigAnalogFilter>
 81009c2:	4603      	mov	r3, r0
 81009c4:	2b00      	cmp	r3, #0
 81009c6:	d001      	beq.n	81009cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81009c8:	f000 f9be 	bl	8100d48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81009cc:	2100      	movs	r1, #0
 81009ce:	4805      	ldr	r0, [pc, #20]	; (81009e4 <MX_I2C2_Init+0x74>)
 81009d0:	f001 faf8 	bl	8101fc4 <HAL_I2CEx_ConfigDigitalFilter>
 81009d4:	4603      	mov	r3, r0
 81009d6:	2b00      	cmp	r3, #0
 81009d8:	d001      	beq.n	81009de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81009da:	f000 f9b5 	bl	8100d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81009de:	bf00      	nop
 81009e0:	bd80      	pop	{r7, pc}
 81009e2:	bf00      	nop
 81009e4:	10000218 	.word	0x10000218
 81009e8:	40005800 	.word	0x40005800
 81009ec:	307075b1 	.word	0x307075b1

081009f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 81009f0:	b580      	push	{r7, lr}
 81009f2:	b092      	sub	sp, #72	; 0x48
 81009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 81009f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81009fa:	2200      	movs	r2, #0
 81009fc:	601a      	str	r2, [r3, #0]
 81009fe:	605a      	str	r2, [r3, #4]
 8100a00:	609a      	str	r2, [r3, #8]
 8100a02:	60da      	str	r2, [r3, #12]
 8100a04:	611a      	str	r2, [r3, #16]
 8100a06:	615a      	str	r2, [r3, #20]
 8100a08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100a0a:	463b      	mov	r3, r7
 8100a0c:	222c      	movs	r2, #44	; 0x2c
 8100a0e:	2100      	movs	r1, #0
 8100a10:	4618      	mov	r0, r3
 8100a12:	f004 f8a9 	bl	8104b68 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8100a16:	4b31      	ldr	r3, [pc, #196]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a18:	4a31      	ldr	r2, [pc, #196]	; (8100ae0 <MX_TIM17_Init+0xf0>)
 8100a1a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 10;
 8100a1c:	4b2f      	ldr	r3, [pc, #188]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a1e:	220a      	movs	r2, #10
 8100a20:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100a22:	4b2e      	ldr	r3, [pc, #184]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a24:	2200      	movs	r2, #0
 8100a26:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 960;
 8100a28:	4b2c      	ldr	r3, [pc, #176]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a2a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8100a2e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100a30:	4b2a      	ldr	r3, [pc, #168]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a32:	2200      	movs	r2, #0
 8100a34:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8100a36:	4b29      	ldr	r3, [pc, #164]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a38:	2200      	movs	r2, #0
 8100a3a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8100a3c:	4b27      	ldr	r3, [pc, #156]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a3e:	2280      	movs	r2, #128	; 0x80
 8100a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8100a42:	4826      	ldr	r0, [pc, #152]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a44:	f003 f860 	bl	8103b08 <HAL_TIM_Base_Init>
 8100a48:	4603      	mov	r3, r0
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d001      	beq.n	8100a52 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8100a4e:	f000 f97b 	bl	8100d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8100a52:	4822      	ldr	r0, [pc, #136]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a54:	f003 f8af 	bl	8103bb6 <HAL_TIM_PWM_Init>
 8100a58:	4603      	mov	r3, r0
 8100a5a:	2b00      	cmp	r3, #0
 8100a5c:	d001      	beq.n	8100a62 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8100a5e:	f000 f973 	bl	8100d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100a62:	2360      	movs	r3, #96	; 0x60
 8100a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 950;
 8100a66:	f240 33b6 	movw	r3, #950	; 0x3b6
 8100a6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100a6c:	2300      	movs	r3, #0
 8100a6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100a70:	2300      	movs	r3, #0
 8100a72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100a74:	2300      	movs	r3, #0
 8100a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100a78:	2300      	movs	r3, #0
 8100a7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100a7c:	2300      	movs	r3, #0
 8100a7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100a84:	2200      	movs	r2, #0
 8100a86:	4619      	mov	r1, r3
 8100a88:	4814      	ldr	r0, [pc, #80]	; (8100adc <MX_TIM17_Init+0xec>)
 8100a8a:	f003 fb1f 	bl	81040cc <HAL_TIM_PWM_ConfigChannel>
 8100a8e:	4603      	mov	r3, r0
 8100a90:	2b00      	cmp	r3, #0
 8100a92:	d001      	beq.n	8100a98 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8100a94:	f000 f958 	bl	8100d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100a98:	2300      	movs	r3, #0
 8100a9a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100a9c:	2300      	movs	r3, #0
 8100a9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100aa0:	2300      	movs	r3, #0
 8100aa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100aa4:	2300      	movs	r3, #0
 8100aa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100aa8:	2300      	movs	r3, #0
 8100aaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100ab0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100ab2:	2300      	movs	r3, #0
 8100ab4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100ab6:	2300      	movs	r3, #0
 8100ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8100aba:	463b      	mov	r3, r7
 8100abc:	4619      	mov	r1, r3
 8100abe:	4807      	ldr	r0, [pc, #28]	; (8100adc <MX_TIM17_Init+0xec>)
 8100ac0:	f003 ffa2 	bl	8104a08 <HAL_TIMEx_ConfigBreakDeadTime>
 8100ac4:	4603      	mov	r3, r0
 8100ac6:	2b00      	cmp	r3, #0
 8100ac8:	d001      	beq.n	8100ace <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8100aca:	f000 f93d 	bl	8100d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8100ace:	4803      	ldr	r0, [pc, #12]	; (8100adc <MX_TIM17_Init+0xec>)
 8100ad0:	f000 fa02 	bl	8100ed8 <HAL_TIM_MspPostInit>

}
 8100ad4:	bf00      	nop
 8100ad6:	3748      	adds	r7, #72	; 0x48
 8100ad8:	46bd      	mov	sp, r7
 8100ada:	bd80      	pop	{r7, pc}
 8100adc:	10000264 	.word	0x10000264
 8100ae0:	40014800 	.word	0x40014800

08100ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100ae4:	b580      	push	{r7, lr}
 8100ae6:	b08e      	sub	sp, #56	; 0x38
 8100ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100aee:	2200      	movs	r2, #0
 8100af0:	601a      	str	r2, [r3, #0]
 8100af2:	605a      	str	r2, [r3, #4]
 8100af4:	609a      	str	r2, [r3, #8]
 8100af6:	60da      	str	r2, [r3, #12]
 8100af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100afa:	4b8b      	ldr	r3, [pc, #556]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b00:	4a89      	ldr	r2, [pc, #548]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b02:	f043 0310 	orr.w	r3, r3, #16
 8100b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b0a:	4b87      	ldr	r3, [pc, #540]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b10:	f003 0310 	and.w	r3, r3, #16
 8100b14:	623b      	str	r3, [r7, #32]
 8100b16:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100b18:	4b83      	ldr	r3, [pc, #524]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b1e:	4a82      	ldr	r2, [pc, #520]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b28:	4b7f      	ldr	r3, [pc, #508]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100b32:	61fb      	str	r3, [r7, #28]
 8100b34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100b36:	4b7c      	ldr	r3, [pc, #496]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b3c:	4a7a      	ldr	r2, [pc, #488]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b3e:	f043 0304 	orr.w	r3, r3, #4
 8100b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b46:	4b78      	ldr	r3, [pc, #480]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b4c:	f003 0304 	and.w	r3, r3, #4
 8100b50:	61bb      	str	r3, [r7, #24]
 8100b52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b54:	4b74      	ldr	r3, [pc, #464]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b5a:	4a73      	ldr	r2, [pc, #460]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b5c:	f043 0320 	orr.w	r3, r3, #32
 8100b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b64:	4b70      	ldr	r3, [pc, #448]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b6a:	f003 0320 	and.w	r3, r3, #32
 8100b6e:	617b      	str	r3, [r7, #20]
 8100b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100b72:	4b6d      	ldr	r3, [pc, #436]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b78:	4a6b      	ldr	r2, [pc, #428]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b82:	4b69      	ldr	r3, [pc, #420]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100b8c:	613b      	str	r3, [r7, #16]
 8100b8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100b90:	4b65      	ldr	r3, [pc, #404]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b96:	4a64      	ldr	r2, [pc, #400]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100b98:	f043 0302 	orr.w	r3, r3, #2
 8100b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ba0:	4b61      	ldr	r3, [pc, #388]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ba6:	f003 0302 	and.w	r3, r3, #2
 8100baa:	60fb      	str	r3, [r7, #12]
 8100bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100bae:	4b5e      	ldr	r3, [pc, #376]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bb4:	4a5c      	ldr	r2, [pc, #368]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bb6:	f043 0308 	orr.w	r3, r3, #8
 8100bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bbe:	4b5a      	ldr	r3, [pc, #360]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bc4:	f003 0308 	and.w	r3, r3, #8
 8100bc8:	60bb      	str	r3, [r7, #8]
 8100bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100bcc:	4b56      	ldr	r3, [pc, #344]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bd2:	4a55      	ldr	r2, [pc, #340]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8100bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bdc:	4b52      	ldr	r3, [pc, #328]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100be6:	607b      	str	r3, [r7, #4]
 8100be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100bea:	4b4f      	ldr	r3, [pc, #316]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bf0:	4a4d      	ldr	r2, [pc, #308]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bfa:	4b4b      	ldr	r3, [pc, #300]	; (8100d28 <MX_GPIO_Init+0x244>)
 8100bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100c04:	603b      	str	r3, [r7, #0]
 8100c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, maxCS1_Pin|maxCS2_Pin, GPIO_PIN_SET);
 8100c08:	2201      	movs	r2, #1
 8100c0a:	210c      	movs	r1, #12
 8100c0c:	4847      	ldr	r0, [pc, #284]	; (8100d2c <MX_GPIO_Init+0x248>)
 8100c0e:	f001 f8b9 	bl	8101d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, maxWrite_Pin|LCD_Disp_Pin, GPIO_PIN_SET);
 8100c12:	2201      	movs	r2, #1
 8100c14:	f44f 7182 	mov.w	r1, #260	; 0x104
 8100c18:	4845      	ldr	r0, [pc, #276]	; (8100d30 <MX_GPIO_Init+0x24c>)
 8100c1a:	f001 f8b3 	bl	8101d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(maxRead_GPIO_Port, maxRead_Pin, GPIO_PIN_SET);
 8100c1e:	2201      	movs	r2, #1
 8100c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100c24:	4843      	ldr	r0, [pc, #268]	; (8100d34 <MX_GPIO_Init+0x250>)
 8100c26:	f001 f8ad 	bl	8101d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8100c2a:	2201      	movs	r2, #1
 8100c2c:	2108      	movs	r1, #8
 8100c2e:	4842      	ldr	r0, [pc, #264]	; (8100d38 <MX_GPIO_Init+0x254>)
 8100c30:	f001 f8a8 	bl	8101d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : maxCS1_Pin maxCS2_Pin */
  GPIO_InitStruct.Pin = maxCS1_Pin|maxCS2_Pin;
 8100c34:	230c      	movs	r3, #12
 8100c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c38:	2301      	movs	r3, #1
 8100c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c3c:	2300      	movs	r3, #0
 8100c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100c40:	2302      	movs	r3, #2
 8100c42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100c48:	4619      	mov	r1, r3
 8100c4a:	4838      	ldr	r0, [pc, #224]	; (8100d2c <MX_GPIO_Init+0x248>)
 8100c4c:	f000 fdc8 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : maxWrite_Pin LCD_Disp_Pin */
  GPIO_InitStruct.Pin = maxWrite_Pin|LCD_Disp_Pin;
 8100c50:	f44f 7382 	mov.w	r3, #260	; 0x104
 8100c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c56:	2301      	movs	r3, #1
 8100c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c5a:	2300      	movs	r3, #0
 8100c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c5e:	2300      	movs	r3, #0
 8100c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100c66:	4619      	mov	r1, r3
 8100c68:	4831      	ldr	r0, [pc, #196]	; (8100d30 <MX_GPIO_Init+0x24c>)
 8100c6a:	f000 fdb9 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : maxRead_Pin */
  GPIO_InitStruct.Pin = maxRead_Pin;
 8100c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c74:	2301      	movs	r3, #1
 8100c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c78:	2300      	movs	r3, #0
 8100c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c7c:	2300      	movs	r3, #0
 8100c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(maxRead_GPIO_Port, &GPIO_InitStruct);
 8100c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100c84:	4619      	mov	r1, r3
 8100c86:	482b      	ldr	r0, [pc, #172]	; (8100d34 <MX_GPIO_Init+0x250>)
 8100c88:	f000 fdaa 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy1_Pin */
  GPIO_InitStruct.Pin = maxBusy1_Pin;
 8100c8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8100c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100c92:	4b2a      	ldr	r3, [pc, #168]	; (8100d3c <MX_GPIO_Init+0x258>)
 8100c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c96:	2300      	movs	r3, #0
 8100c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(maxBusy1_GPIO_Port, &GPIO_InitStruct);
 8100c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100c9e:	4619      	mov	r1, r3
 8100ca0:	4824      	ldr	r0, [pc, #144]	; (8100d34 <MX_GPIO_Init+0x250>)
 8100ca2:	f000 fd9d 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : maxBusy2_Pin */
  GPIO_InitStruct.Pin = maxBusy2_Pin;
 8100ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8100caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100cac:	2300      	movs	r3, #0
 8100cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cb0:	2300      	movs	r3, #0
 8100cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(maxBusy2_GPIO_Port, &GPIO_InitStruct);
 8100cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100cb8:	4619      	mov	r1, r3
 8100cba:	481e      	ldr	r0, [pc, #120]	; (8100d34 <MX_GPIO_Init+0x250>)
 8100cbc:	f000 fd90 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : maxD0_Pin maxD1_Pin maxD2_Pin maxD3_Pin
                           maxD4_Pin maxD5_Pin maxD6_Pin maxD7_Pin
                           maxD8_Pin maxD9_Pin maxD10_Pin maxD11_Pin
                           maxD12_Pin maxD13_Pin maxD14_Pin maxD15_Pin */
  GPIO_InitStruct.Pin = maxD0_Pin|maxD1_Pin|maxD2_Pin|maxD3_Pin
 8100cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8100cc4:	627b      	str	r3, [r7, #36]	; 0x24
                          |maxD4_Pin|maxD5_Pin|maxD6_Pin|maxD7_Pin
                          |maxD8_Pin|maxD9_Pin|maxD10_Pin|maxD11_Pin
                          |maxD12_Pin|maxD13_Pin|maxD14_Pin|maxD15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100cc6:	2300      	movs	r3, #0
 8100cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cca:	2300      	movs	r3, #0
 8100ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100cd2:	4619      	mov	r1, r3
 8100cd4:	481a      	ldr	r0, [pc, #104]	; (8100d40 <MX_GPIO_Init+0x25c>)
 8100cd6:	f000 fd83 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8100cda:	2304      	movs	r3, #4
 8100cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8100cde:	4b19      	ldr	r3, [pc, #100]	; (8100d44 <MX_GPIO_Init+0x260>)
 8100ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100ce2:	2301      	movs	r3, #1
 8100ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8100ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100cea:	4619      	mov	r1, r3
 8100cec:	4812      	ldr	r0, [pc, #72]	; (8100d38 <MX_GPIO_Init+0x254>)
 8100cee:	f000 fd77 	bl	81017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_RST_Pin */
  GPIO_InitStruct.Pin = CTP_RST_Pin;
 8100cf2:	2308      	movs	r3, #8
 8100cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100cf6:	2301      	movs	r3, #1
 8100cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cfa:	2300      	movs	r3, #0
 8100cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100cfe:	2300      	movs	r3, #0
 8100d00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CTP_RST_GPIO_Port, &GPIO_InitStruct);
 8100d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100d06:	4619      	mov	r1, r3
 8100d08:	480b      	ldr	r0, [pc, #44]	; (8100d38 <MX_GPIO_Init+0x254>)
 8100d0a:	f000 fd69 	bl	81017e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8100d0e:	2200      	movs	r2, #0
 8100d10:	2100      	movs	r1, #0
 8100d12:	2028      	movs	r0, #40	; 0x28
 8100d14:	f000 fd1b 	bl	810174e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8100d18:	2028      	movs	r0, #40	; 0x28
 8100d1a:	f000 fd32 	bl	8101782 <HAL_NVIC_EnableIRQ>

}
 8100d1e:	bf00      	nop
 8100d20:	3738      	adds	r7, #56	; 0x38
 8100d22:	46bd      	mov	sp, r7
 8100d24:	bd80      	pop	{r7, pc}
 8100d26:	bf00      	nop
 8100d28:	58024400 	.word	0x58024400
 8100d2c:	58021000 	.word	0x58021000
 8100d30:	58022000 	.word	0x58022000
 8100d34:	58020800 	.word	0x58020800
 8100d38:	58021800 	.word	0x58021800
 8100d3c:	11210000 	.word	0x11210000
 8100d40:	58021400 	.word	0x58021400
 8100d44:	11110000 	.word	0x11110000

08100d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100d48:	b480      	push	{r7}
 8100d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100d4c:	b672      	cpsid	i
}
 8100d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100d50:	e7fe      	b.n	8100d50 <Error_Handler+0x8>
	...

08100d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100d54:	b480      	push	{r7}
 8100d56:	b083      	sub	sp, #12
 8100d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d5a:	4b0a      	ldr	r3, [pc, #40]	; (8100d84 <HAL_MspInit+0x30>)
 8100d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d60:	4a08      	ldr	r2, [pc, #32]	; (8100d84 <HAL_MspInit+0x30>)
 8100d62:	f043 0302 	orr.w	r3, r3, #2
 8100d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d6a:	4b06      	ldr	r3, [pc, #24]	; (8100d84 <HAL_MspInit+0x30>)
 8100d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d70:	f003 0302 	and.w	r3, r3, #2
 8100d74:	607b      	str	r3, [r7, #4]
 8100d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100d78:	bf00      	nop
 8100d7a:	370c      	adds	r7, #12
 8100d7c:	46bd      	mov	sp, r7
 8100d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d82:	4770      	bx	lr
 8100d84:	58024400 	.word	0x58024400

08100d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100d88:	b580      	push	{r7, lr}
 8100d8a:	b0b8      	sub	sp, #224	; 0xe0
 8100d8c:	af00      	add	r7, sp, #0
 8100d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100d90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100d94:	2200      	movs	r2, #0
 8100d96:	601a      	str	r2, [r3, #0]
 8100d98:	605a      	str	r2, [r3, #4]
 8100d9a:	609a      	str	r2, [r3, #8]
 8100d9c:	60da      	str	r2, [r3, #12]
 8100d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100da0:	f107 0310 	add.w	r3, r7, #16
 8100da4:	22bc      	movs	r2, #188	; 0xbc
 8100da6:	2100      	movs	r1, #0
 8100da8:	4618      	mov	r0, r3
 8100daa:	f003 fedd 	bl	8104b68 <memset>
  if(hi2c->Instance==I2C2)
 8100dae:	687b      	ldr	r3, [r7, #4]
 8100db0:	681b      	ldr	r3, [r3, #0]
 8100db2:	4a24      	ldr	r2, [pc, #144]	; (8100e44 <HAL_I2C_MspInit+0xbc>)
 8100db4:	4293      	cmp	r3, r2
 8100db6:	d141      	bne.n	8100e3c <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8100db8:	2308      	movs	r3, #8
 8100dba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100dbc:	2300      	movs	r3, #0
 8100dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100dc2:	f107 0310 	add.w	r3, r7, #16
 8100dc6:	4618      	mov	r0, r3
 8100dc8:	f001 fdfa 	bl	81029c0 <HAL_RCCEx_PeriphCLKConfig>
 8100dcc:	4603      	mov	r3, r0
 8100dce:	2b00      	cmp	r3, #0
 8100dd0:	d001      	beq.n	8100dd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8100dd2:	f7ff ffb9 	bl	8100d48 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100dd6:	4b1c      	ldr	r3, [pc, #112]	; (8100e48 <HAL_I2C_MspInit+0xc0>)
 8100dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ddc:	4a1a      	ldr	r2, [pc, #104]	; (8100e48 <HAL_I2C_MspInit+0xc0>)
 8100dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100de6:	4b18      	ldr	r3, [pc, #96]	; (8100e48 <HAL_I2C_MspInit+0xc0>)
 8100de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100df0:	60fb      	str	r3, [r7, #12]
 8100df2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = CTP_I2C_SCL_Pin|CTP_I2C_SDA_Pin;
 8100df4:	2330      	movs	r3, #48	; 0x30
 8100df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100dfa:	2312      	movs	r3, #18
 8100dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100e00:	2301      	movs	r3, #1
 8100e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100e06:	2303      	movs	r3, #3
 8100e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100e0c:	2304      	movs	r3, #4
 8100e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100e12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e16:	4619      	mov	r1, r3
 8100e18:	480c      	ldr	r0, [pc, #48]	; (8100e4c <HAL_I2C_MspInit+0xc4>)
 8100e1a:	f000 fce1 	bl	81017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100e1e:	4b0a      	ldr	r3, [pc, #40]	; (8100e48 <HAL_I2C_MspInit+0xc0>)
 8100e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e24:	4a08      	ldr	r2, [pc, #32]	; (8100e48 <HAL_I2C_MspInit+0xc0>)
 8100e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100e2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100e2e:	4b06      	ldr	r3, [pc, #24]	; (8100e48 <HAL_I2C_MspInit+0xc0>)
 8100e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100e38:	60bb      	str	r3, [r7, #8]
 8100e3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8100e3c:	bf00      	nop
 8100e3e:	37e0      	adds	r7, #224	; 0xe0
 8100e40:	46bd      	mov	sp, r7
 8100e42:	bd80      	pop	{r7, pc}
 8100e44:	40005800 	.word	0x40005800
 8100e48:	58024400 	.word	0x58024400
 8100e4c:	58021c00 	.word	0x58021c00

08100e50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8100e50:	b480      	push	{r7}
 8100e52:	b085      	sub	sp, #20
 8100e54:	af00      	add	r7, sp, #0
 8100e56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8100e58:	687b      	ldr	r3, [r7, #4]
 8100e5a:	681b      	ldr	r3, [r3, #0]
 8100e5c:	4a0b      	ldr	r2, [pc, #44]	; (8100e8c <HAL_TIM_PWM_MspInit+0x3c>)
 8100e5e:	4293      	cmp	r3, r2
 8100e60:	d10e      	bne.n	8100e80 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8100e62:	4b0b      	ldr	r3, [pc, #44]	; (8100e90 <HAL_TIM_PWM_MspInit+0x40>)
 8100e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e68:	4a09      	ldr	r2, [pc, #36]	; (8100e90 <HAL_TIM_PWM_MspInit+0x40>)
 8100e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100e72:	4b07      	ldr	r3, [pc, #28]	; (8100e90 <HAL_TIM_PWM_MspInit+0x40>)
 8100e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100e7c:	60fb      	str	r3, [r7, #12]
 8100e7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8100e80:	bf00      	nop
 8100e82:	3714      	adds	r7, #20
 8100e84:	46bd      	mov	sp, r7
 8100e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e8a:	4770      	bx	lr
 8100e8c:	40001800 	.word	0x40001800
 8100e90:	58024400 	.word	0x58024400

08100e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100e94:	b480      	push	{r7}
 8100e96:	b085      	sub	sp, #20
 8100e98:	af00      	add	r7, sp, #0
 8100e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	681b      	ldr	r3, [r3, #0]
 8100ea0:	4a0b      	ldr	r2, [pc, #44]	; (8100ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8100ea2:	4293      	cmp	r3, r2
 8100ea4:	d10e      	bne.n	8100ec4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8100ea6:	4b0b      	ldr	r3, [pc, #44]	; (8100ed4 <HAL_TIM_Base_MspInit+0x40>)
 8100ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100eac:	4a09      	ldr	r2, [pc, #36]	; (8100ed4 <HAL_TIM_Base_MspInit+0x40>)
 8100eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100eb6:	4b07      	ldr	r3, [pc, #28]	; (8100ed4 <HAL_TIM_Base_MspInit+0x40>)
 8100eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100ec0:	60fb      	str	r3, [r7, #12]
 8100ec2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8100ec4:	bf00      	nop
 8100ec6:	3714      	adds	r7, #20
 8100ec8:	46bd      	mov	sp, r7
 8100eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ece:	4770      	bx	lr
 8100ed0:	40014800 	.word	0x40014800
 8100ed4:	58024400 	.word	0x58024400

08100ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100ed8:	b580      	push	{r7, lr}
 8100eda:	b08a      	sub	sp, #40	; 0x28
 8100edc:	af00      	add	r7, sp, #0
 8100ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ee0:	f107 0314 	add.w	r3, r7, #20
 8100ee4:	2200      	movs	r2, #0
 8100ee6:	601a      	str	r2, [r3, #0]
 8100ee8:	605a      	str	r2, [r3, #4]
 8100eea:	609a      	str	r2, [r3, #8]
 8100eec:	60da      	str	r2, [r3, #12]
 8100eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	681b      	ldr	r3, [r3, #0]
 8100ef4:	4a35      	ldr	r2, [pc, #212]	; (8100fcc <HAL_TIM_MspPostInit+0xf4>)
 8100ef6:	4293      	cmp	r3, r2
 8100ef8:	d13f      	bne.n	8100f7a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100efa:	4b35      	ldr	r3, [pc, #212]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f00:	4a33      	ldr	r2, [pc, #204]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f0a:	4b31      	ldr	r3, [pc, #196]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100f14:	613b      	str	r3, [r7, #16]
 8100f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f18:	4b2d      	ldr	r3, [pc, #180]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f1e:	4a2c      	ldr	r2, [pc, #176]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f20:	f043 0302 	orr.w	r3, r3, #2
 8100f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f28:	4b29      	ldr	r3, [pc, #164]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f2e:	f003 0302 	and.w	r3, r3, #2
 8100f32:	60fb      	str	r3, [r7, #12]
 8100f34:	68fb      	ldr	r3, [r7, #12]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = maxCNV1_Pin;
 8100f36:	2340      	movs	r3, #64	; 0x40
 8100f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f3a:	2302      	movs	r3, #2
 8100f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f3e:	2300      	movs	r3, #0
 8100f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f42:	2300      	movs	r3, #0
 8100f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8100f46:	2302      	movs	r3, #2
 8100f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(maxCNV1_GPIO_Port, &GPIO_InitStruct);
 8100f4a:	f107 0314 	add.w	r3, r7, #20
 8100f4e:	4619      	mov	r1, r3
 8100f50:	4820      	ldr	r0, [pc, #128]	; (8100fd4 <HAL_TIM_MspPostInit+0xfc>)
 8100f52:	f000 fc45 	bl	81017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = maxCNV2_Pin;
 8100f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8100f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f5c:	2302      	movs	r3, #2
 8100f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f60:	2300      	movs	r3, #0
 8100f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f64:	2300      	movs	r3, #0
 8100f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8100f68:	2302      	movs	r3, #2
 8100f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(maxCNV2_GPIO_Port, &GPIO_InitStruct);
 8100f6c:	f107 0314 	add.w	r3, r7, #20
 8100f70:	4619      	mov	r1, r3
 8100f72:	4819      	ldr	r0, [pc, #100]	; (8100fd8 <HAL_TIM_MspPostInit+0x100>)
 8100f74:	f000 fc34 	bl	81017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8100f78:	e024      	b.n	8100fc4 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM17)
 8100f7a:	687b      	ldr	r3, [r7, #4]
 8100f7c:	681b      	ldr	r3, [r3, #0]
 8100f7e:	4a17      	ldr	r2, [pc, #92]	; (8100fdc <HAL_TIM_MspPostInit+0x104>)
 8100f80:	4293      	cmp	r3, r2
 8100f82:	d11f      	bne.n	8100fc4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f84:	4b12      	ldr	r3, [pc, #72]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f8a:	4a11      	ldr	r2, [pc, #68]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f8c:	f043 0302 	orr.w	r3, r3, #2
 8100f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f94:	4b0e      	ldr	r3, [pc, #56]	; (8100fd0 <HAL_TIM_MspPostInit+0xf8>)
 8100f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f9a:	f003 0302 	and.w	r3, r3, #2
 8100f9e:	60bb      	str	r3, [r7, #8]
 8100fa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8100fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fa8:	2302      	movs	r3, #2
 8100faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fac:	2300      	movs	r3, #0
 8100fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8100fb0:	2302      	movs	r3, #2
 8100fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8100fb4:	2301      	movs	r3, #1
 8100fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100fb8:	f107 0314 	add.w	r3, r7, #20
 8100fbc:	4619      	mov	r1, r3
 8100fbe:	4806      	ldr	r0, [pc, #24]	; (8100fd8 <HAL_TIM_MspPostInit+0x100>)
 8100fc0:	f000 fc0e 	bl	81017e0 <HAL_GPIO_Init>
}
 8100fc4:	bf00      	nop
 8100fc6:	3728      	adds	r7, #40	; 0x28
 8100fc8:	46bd      	mov	sp, r7
 8100fca:	bd80      	pop	{r7, pc}
 8100fcc:	40001800 	.word	0x40001800
 8100fd0:	58024400 	.word	0x58024400
 8100fd4:	58021c00 	.word	0x58021c00
 8100fd8:	58020400 	.word	0x58020400
 8100fdc:	40014800 	.word	0x40014800

08100fe0 <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 8100fe0:	b480      	push	{r7}
 8100fe2:	b083      	sub	sp, #12
 8100fe4:	af00      	add	r7, sp, #0
 8100fe6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	681b      	ldr	r3, [r3, #0]
 8100fec:	4a08      	ldr	r2, [pc, #32]	; (8101010 <HAL_TIM_PWM_MspDeInit+0x30>)
 8100fee:	4293      	cmp	r3, r2
 8100ff0:	d107      	bne.n	8101002 <HAL_TIM_PWM_MspDeInit+0x22>
  {
  /* USER CODE BEGIN TIM12_MspDeInit 0 */

  /* USER CODE END TIM12_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM12_CLK_DISABLE();
 8100ff2:	4b08      	ldr	r3, [pc, #32]	; (8101014 <HAL_TIM_PWM_MspDeInit+0x34>)
 8100ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100ff8:	4a06      	ldr	r2, [pc, #24]	; (8101014 <HAL_TIM_PWM_MspDeInit+0x34>)
 8100ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8100ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  /* USER CODE BEGIN TIM12_MspDeInit 1 */

  /* USER CODE END TIM12_MspDeInit 1 */
  }

}
 8101002:	bf00      	nop
 8101004:	370c      	adds	r7, #12
 8101006:	46bd      	mov	sp, r7
 8101008:	f85d 7b04 	ldr.w	r7, [sp], #4
 810100c:	4770      	bx	lr
 810100e:	bf00      	nop
 8101010:	40001800 	.word	0x40001800
 8101014:	58024400 	.word	0x58024400

08101018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101018:	b480      	push	{r7}
 810101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810101c:	e7fe      	b.n	810101c <NMI_Handler+0x4>

0810101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810101e:	b480      	push	{r7}
 8101020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101022:	e7fe      	b.n	8101022 <HardFault_Handler+0x4>

08101024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101024:	b480      	push	{r7}
 8101026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101028:	e7fe      	b.n	8101028 <MemManage_Handler+0x4>

0810102a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810102a:	b480      	push	{r7}
 810102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810102e:	e7fe      	b.n	810102e <BusFault_Handler+0x4>

08101030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101030:	b480      	push	{r7}
 8101032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101034:	e7fe      	b.n	8101034 <UsageFault_Handler+0x4>

08101036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101036:	b480      	push	{r7}
 8101038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810103a:	bf00      	nop
 810103c:	46bd      	mov	sp, r7
 810103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101042:	4770      	bx	lr

08101044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101044:	b480      	push	{r7}
 8101046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101048:	bf00      	nop
 810104a:	46bd      	mov	sp, r7
 810104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101050:	4770      	bx	lr

08101052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101052:	b480      	push	{r7}
 8101054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101056:	bf00      	nop
 8101058:	46bd      	mov	sp, r7
 810105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810105e:	4770      	bx	lr

08101060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101060:	b580      	push	{r7, lr}
 8101062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101064:	f000 fa78 	bl	8101558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101068:	bf00      	nop
 810106a:	bd80      	pop	{r7, pc}

0810106c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 810106c:	b580      	push	{r7, lr}
 810106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8101070:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8101074:	f000 fe9f 	bl	8101db6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101078:	bf00      	nop
 810107a:	bd80      	pop	{r7, pc}

0810107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81010b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101080:	f7ff fbc8 	bl	8100814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101084:	480c      	ldr	r0, [pc, #48]	; (81010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101086:	490d      	ldr	r1, [pc, #52]	; (81010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101088:	4a0d      	ldr	r2, [pc, #52]	; (81010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810108c:	e002      	b.n	8101094 <LoopCopyDataInit>

0810108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101092:	3304      	adds	r3, #4

08101094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101098:	d3f9      	bcc.n	810108e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810109a:	4a0a      	ldr	r2, [pc, #40]	; (81010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810109c:	4c0a      	ldr	r4, [pc, #40]	; (81010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 810109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 81010a0:	e001      	b.n	81010a6 <LoopFillZerobss>

081010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81010a4:	3204      	adds	r2, #4

081010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81010a8:	d3fb      	bcc.n	81010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81010aa:	f003 fd2b 	bl	8104b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81010ae:	f7ff fbf7 	bl	81008a0 <main>
  bx  lr
 81010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81010b4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81010b8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81010bc:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 81010c0:	081c03ac 	.word	0x081c03ac
  ldr r2, =_sbss
 81010c4:	1000001c 	.word	0x1000001c
  ldr r4, =_ebss
 81010c8:	10000300 	.word	0x10000300

081010cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81010cc:	e7fe      	b.n	81010cc <ADC3_IRQHandler>
	...

081010d0 <ConfigClock>:
/**
 * @brief Configure the clock for LTDC module
 * @retval None
 */
static void ConfigClock(void)
{
 81010d0:	b580      	push	{r7, lr}
 81010d2:	b0b6      	sub	sp, #216	; 0xd8
 81010d4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81010d6:	f107 031c 	add.w	r3, r7, #28
 81010da:	22bc      	movs	r2, #188	; 0xbc
 81010dc:	2100      	movs	r1, #0
 81010de:	4618      	mov	r0, r3
 81010e0:	f003 fd42 	bl	8104b68 <memset>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 81010e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 81010e8:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL3.PLL3M = 2;
 81010ea:	2302      	movs	r3, #2
 81010ec:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3N = 21;
 81010ee:	2315      	movs	r3, #21
 81010f0:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 81010f2:	2302      	movs	r3, #2
 81010f4:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 81010f6:	2302      	movs	r3, #2
 81010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
#if defined(LCD_AFY800480A0)
	PeriphClkInitStruct.PLL3.PLL3R = 10;
#elif defined(LCD_AFY800480B0)
	PeriphClkInitStruct.PLL3.PLL3R = 7;
 81010fa:	2307      	movs	r3, #7
 81010fc:	653b      	str	r3, [r7, #80]	; 0x50
#else
#error ("No appropriate LCD Module is selected!");
#endif
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 81010fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101102:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8101104:	2300      	movs	r3, #0
 8101106:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8101108:	2300      	movs	r3, #0
 810110a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810110c:	f107 031c 	add.w	r3, r7, #28
 8101110:	4618      	mov	r0, r3
 8101112:	f001 fc55 	bl	81029c0 <HAL_RCCEx_PeriphCLKConfig>
 8101116:	4603      	mov	r3, r0
 8101118:	2b00      	cmp	r3, #0
 810111a:	d001      	beq.n	8101120 <ConfigClock+0x50>
		Error_Handler();
 810111c:	f7ff fe14 	bl	8100d48 <Error_Handler>

	__HAL_RCC_LTDC_CLK_ENABLE();
 8101120:	4b36      	ldr	r3, [pc, #216]	; (81011fc <ConfigClock+0x12c>)
 8101122:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8101126:	4a35      	ldr	r2, [pc, #212]	; (81011fc <ConfigClock+0x12c>)
 8101128:	f043 0308 	orr.w	r3, r3, #8
 810112c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8101130:	4b32      	ldr	r3, [pc, #200]	; (81011fc <ConfigClock+0x12c>)
 8101132:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8101136:	f003 0308 	and.w	r3, r3, #8
 810113a:	61bb      	str	r3, [r7, #24]
 810113c:	69bb      	ldr	r3, [r7, #24]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 810113e:	4b2f      	ldr	r3, [pc, #188]	; (81011fc <ConfigClock+0x12c>)
 8101140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101144:	4a2d      	ldr	r2, [pc, #180]	; (81011fc <ConfigClock+0x12c>)
 8101146:	f043 0310 	orr.w	r3, r3, #16
 810114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810114e:	4b2b      	ldr	r3, [pc, #172]	; (81011fc <ConfigClock+0x12c>)
 8101150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101154:	f003 0310 	and.w	r3, r3, #16
 8101158:	617b      	str	r3, [r7, #20]
 810115a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 810115c:	4b27      	ldr	r3, [pc, #156]	; (81011fc <ConfigClock+0x12c>)
 810115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101162:	4a26      	ldr	r2, [pc, #152]	; (81011fc <ConfigClock+0x12c>)
 8101164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810116c:	4b23      	ldr	r3, [pc, #140]	; (81011fc <ConfigClock+0x12c>)
 810116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101176:	613b      	str	r3, [r7, #16]
 8101178:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 810117a:	4b20      	ldr	r3, [pc, #128]	; (81011fc <ConfigClock+0x12c>)
 810117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101180:	4a1e      	ldr	r2, [pc, #120]	; (81011fc <ConfigClock+0x12c>)
 8101182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810118a:	4b1c      	ldr	r3, [pc, #112]	; (81011fc <ConfigClock+0x12c>)
 810118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101194:	60fb      	str	r3, [r7, #12]
 8101196:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8101198:	4b18      	ldr	r3, [pc, #96]	; (81011fc <ConfigClock+0x12c>)
 810119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810119e:	4a17      	ldr	r2, [pc, #92]	; (81011fc <ConfigClock+0x12c>)
 81011a0:	f043 0308 	orr.w	r3, r3, #8
 81011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011a8:	4b14      	ldr	r3, [pc, #80]	; (81011fc <ConfigClock+0x12c>)
 81011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ae:	f003 0308 	and.w	r3, r3, #8
 81011b2:	60bb      	str	r3, [r7, #8]
 81011b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 81011b6:	4b11      	ldr	r3, [pc, #68]	; (81011fc <ConfigClock+0x12c>)
 81011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011bc:	4a0f      	ldr	r2, [pc, #60]	; (81011fc <ConfigClock+0x12c>)
 81011be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011c6:	4b0d      	ldr	r3, [pc, #52]	; (81011fc <ConfigClock+0x12c>)
 81011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81011d0:	607b      	str	r3, [r7, #4]
 81011d2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 81011d4:	4b09      	ldr	r3, [pc, #36]	; (81011fc <ConfigClock+0x12c>)
 81011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011da:	4a08      	ldr	r2, [pc, #32]	; (81011fc <ConfigClock+0x12c>)
 81011dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011e4:	4b05      	ldr	r3, [pc, #20]	; (81011fc <ConfigClock+0x12c>)
 81011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81011ee:	603b      	str	r3, [r7, #0]
 81011f0:	683b      	ldr	r3, [r7, #0]
}
 81011f2:	bf00      	nop
 81011f4:	37d8      	adds	r7, #216	; 0xd8
 81011f6:	46bd      	mov	sp, r7
 81011f8:	bd80      	pop	{r7, pc}
 81011fa:	bf00      	nop
 81011fc:	58024400 	.word	0x58024400

08101200 <ConfigIO>:
/**
 * @brief Configure the IOs for LCD
 * @retval None
 */
static void ConfigIO(void)
{
 8101200:	b580      	push	{r7, lr}
 8101202:	b086      	sub	sp, #24
 8101204:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101206:	1d3b      	adds	r3, r7, #4
 8101208:	2200      	movs	r2, #0
 810120a:	601a      	str	r2, [r3, #0]
 810120c:	605a      	str	r2, [r3, #4]
 810120e:	609a      	str	r2, [r3, #8]
 8101210:	60da      	str	r2, [r3, #12]
 8101212:	611a      	str	r2, [r3, #16]
	    PI4     ------> LTDC_B4
	    PI5     ------> LTDC_B5
	    PI6     ------> LTDC_B6
	    PI7     ------> LTDC_B7
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
 8101214:	f24e 0370 	movw	r3, #57456	; 0xe070
 8101218:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_14|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810121a:	2302      	movs	r3, #2
 810121c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810121e:	2300      	movs	r3, #0
 8101220:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101222:	2303      	movs	r3, #3
 8101224:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101226:	230e      	movs	r3, #14
 8101228:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810122a:	1d3b      	adds	r3, r7, #4
 810122c:	4619      	mov	r1, r3
 810122e:	4833      	ldr	r0, [pc, #204]	; (81012fc <ConfigIO+0xfc>)
 8101230:	f000 fad6 	bl	81017e0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_4
 8101234:	f240 63f1 	movw	r3, #1777	; 0x6f1
 8101238:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810123a:	2302      	movs	r3, #2
 810123c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810123e:	2300      	movs	r3, #0
 8101240:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101242:	2303      	movs	r3, #3
 8101244:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101246:	230e      	movs	r3, #14
 8101248:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810124a:	1d3b      	adds	r3, r7, #4
 810124c:	4619      	mov	r1, r3
 810124e:	482c      	ldr	r0, [pc, #176]	; (8101300 <ConfigIO+0x100>)
 8101250:	f000 fac6 	bl	81017e0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8101254:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8101258:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810125a:	2302      	movs	r3, #2
 810125c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810125e:	2300      	movs	r3, #0
 8101260:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101262:	2303      	movs	r3, #3
 8101264:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8101266:	2309      	movs	r3, #9
 8101268:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 810126a:	1d3b      	adds	r3, r7, #4
 810126c:	4619      	mov	r1, r3
 810126e:	4824      	ldr	r0, [pc, #144]	; (8101300 <ConfigIO+0x100>)
 8101270:	f000 fab6 	bl	81017e0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8101274:	f64d 730c 	movw	r3, #57100	; 0xdf0c
 8101278:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14
			|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810127a:	2302      	movs	r3, #2
 810127c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810127e:	2300      	movs	r3, #0
 8101280:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101282:	2303      	movs	r3, #3
 8101284:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101286:	230e      	movs	r3, #14
 8101288:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810128a:	1d3b      	adds	r3, r7, #4
 810128c:	4619      	mov	r1, r3
 810128e:	481d      	ldr	r0, [pc, #116]	; (8101304 <ConfigIO+0x104>)
 8101290:	f000 faa6 	bl	81017e0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101298:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810129a:	2302      	movs	r3, #2
 810129c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810129e:	2300      	movs	r3, #0
 81012a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012a2:	2303      	movs	r3, #3
 81012a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81012a6:	230e      	movs	r3, #14
 81012a8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81012aa:	1d3b      	adds	r3, r7, #4
 81012ac:	4619      	mov	r1, r3
 81012ae:	4816      	ldr	r0, [pc, #88]	; (8101308 <ConfigIO+0x108>)
 81012b0:	f000 fa96 	bl	81017e0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 81012b4:	2304      	movs	r3, #4
 81012b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012b8:	2302      	movs	r3, #2
 81012ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012bc:	2300      	movs	r3, #0
 81012be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012c0:	2303      	movs	r3, #3
 81012c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81012c4:	230e      	movs	r3, #14
 81012c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 81012c8:	1d3b      	adds	r3, r7, #4
 81012ca:	4619      	mov	r1, r3
 81012cc:	480f      	ldr	r0, [pc, #60]	; (810130c <ConfigIO+0x10c>)
 81012ce:	f000 fa87 	bl	81017e0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 81012d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 81012d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012d8:	2302      	movs	r3, #2
 81012da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012dc:	2300      	movs	r3, #0
 81012de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012e0:	2303      	movs	r3, #3
 81012e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81012e4:	230e      	movs	r3, #14
 81012e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81012e8:	1d3b      	adds	r3, r7, #4
 81012ea:	4619      	mov	r1, r3
 81012ec:	4808      	ldr	r0, [pc, #32]	; (8101310 <ConfigIO+0x110>)
 81012ee:	f000 fa77 	bl	81017e0 <HAL_GPIO_Init>
}
 81012f2:	bf00      	nop
 81012f4:	3718      	adds	r7, #24
 81012f6:	46bd      	mov	sp, r7
 81012f8:	bd80      	pop	{r7, pc}
 81012fa:	bf00      	nop
 81012fc:	58021000 	.word	0x58021000
 8101300:	58022000 	.word	0x58022000
 8101304:	58021c00 	.word	0x58021c00
 8101308:	58020c00 	.word	0x58020c00
 810130c:	58022800 	.word	0x58022800
 8101310:	58021800 	.word	0x58021800

08101314 <ConfigLTDC>:

void ConfigLTDC()
{
 8101314:	b580      	push	{r7, lr}
 8101316:	b08e      	sub	sp, #56	; 0x38
 8101318:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 810131a:	1d3b      	adds	r3, r7, #4
 810131c:	2234      	movs	r2, #52	; 0x34
 810131e:	2100      	movs	r1, #0
 8101320:	4618      	mov	r0, r3
 8101322:	f003 fc21 	bl	8104b68 <memset>
	hltdc.Instance = LTDC;
 8101326:	4b3a      	ldr	r3, [pc, #232]	; (8101410 <ConfigLTDC+0xfc>)
 8101328:	4a3a      	ldr	r2, [pc, #232]	; (8101414 <ConfigLTDC+0x100>)
 810132a:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 810132c:	4b38      	ldr	r3, [pc, #224]	; (8101410 <ConfigLTDC+0xfc>)
 810132e:	2200      	movs	r2, #0
 8101330:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8101332:	4b37      	ldr	r3, [pc, #220]	; (8101410 <ConfigLTDC+0xfc>)
 8101334:	2200      	movs	r2, #0
 8101336:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8101338:	4b35      	ldr	r3, [pc, #212]	; (8101410 <ConfigLTDC+0xfc>)
 810133a:	2200      	movs	r2, #0
 810133c:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 810133e:	4b34      	ldr	r3, [pc, #208]	; (8101410 <ConfigLTDC+0xfc>)
 8101340:	2200      	movs	r2, #0
 8101342:	611a      	str	r2, [r3, #16]
	hltdc.Init.AccumulatedActiveW = 813;
	hltdc.Init.AccumulatedActiveH = 493;
	hltdc.Init.TotalWidth = 819;
	hltdc.Init.TotalHeigh = 499;
#elif defined(LCD_AFY800480B0)
	hltdc.Init.HorizontalSync = 19;
 8101344:	4b32      	ldr	r3, [pc, #200]	; (8101410 <ConfigLTDC+0xfc>)
 8101346:	2213      	movs	r2, #19
 8101348:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 810134a:	4b31      	ldr	r3, [pc, #196]	; (8101410 <ConfigLTDC+0xfc>)
 810134c:	2209      	movs	r2, #9
 810134e:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 65;
 8101350:	4b2f      	ldr	r3, [pc, #188]	; (8101410 <ConfigLTDC+0xfc>)
 8101352:	2241      	movs	r2, #65	; 0x41
 8101354:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 32;
 8101356:	4b2e      	ldr	r3, [pc, #184]	; (8101410 <ConfigLTDC+0xfc>)
 8101358:	2220      	movs	r2, #32
 810135a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 865;
 810135c:	4b2c      	ldr	r3, [pc, #176]	; (8101410 <ConfigLTDC+0xfc>)
 810135e:	f240 3261 	movw	r2, #865	; 0x361
 8101362:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 512;
 8101364:	4b2a      	ldr	r3, [pc, #168]	; (8101410 <ConfigLTDC+0xfc>)
 8101366:	f44f 7200 	mov.w	r2, #512	; 0x200
 810136a:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 1075;
 810136c:	4b28      	ldr	r3, [pc, #160]	; (8101410 <ConfigLTDC+0xfc>)
 810136e:	f240 4233 	movw	r2, #1075	; 0x433
 8101372:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 534;
 8101374:	4b26      	ldr	r3, [pc, #152]	; (8101410 <ConfigLTDC+0xfc>)
 8101376:	f240 2216 	movw	r2, #534	; 0x216
 810137a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	hltdc.Init.Backcolor.Blue = 0;
 810137c:	4b24      	ldr	r3, [pc, #144]	; (8101410 <ConfigLTDC+0xfc>)
 810137e:	2200      	movs	r2, #0
 8101380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 255;
 8101384:	4b22      	ldr	r3, [pc, #136]	; (8101410 <ConfigLTDC+0xfc>)
 8101386:	22ff      	movs	r2, #255	; 0xff
 8101388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 810138c:	4b20      	ldr	r3, [pc, #128]	; (8101410 <ConfigLTDC+0xfc>)
 810138e:	2200      	movs	r2, #0
 8101390:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8101394:	481e      	ldr	r0, [pc, #120]	; (8101410 <ConfigLTDC+0xfc>)
 8101396:	f000 fe61 	bl	810205c <HAL_LTDC_Init>
 810139a:	4603      	mov	r3, r0
 810139c:	2b00      	cmp	r3, #0
 810139e:	d001      	beq.n	81013a4 <ConfigLTDC+0x90>
		Error_Handler();
 81013a0:	f7ff fcd2 	bl	8100d48 <Error_Handler>
	/* In this case all the active display area is used to display a picture then :
	       Horizontal start = horizontal synchronization + Horizontal back porch = 43
	       Vertical start   = vertical synchronization + vertical back porch     = 12
	       Horizontal stop = Horizontal start + window width -1 = 43 + 480 -1
	       Vertical stop   = Vertical start + window height -1  = 12 + 272 -1      */
	pLayerCfg.WindowX0 = 0;
 81013a4:	2300      	movs	r3, #0
 81013a6:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 800;
 81013a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 81013ac:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 81013ae:	2300      	movs	r3, #0
 81013b0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 81013b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 81013b6:	613b      	str	r3, [r7, #16]

	/* Pixel Format configuration*/
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 81013b8:	2301      	movs	r3, #1
 81013ba:	617b      	str	r3, [r7, #20]

	/* Start Address configuration : frame buffer is located at FLASH memory */
	pLayerCfg.FBStartAdress = (uint32_t)&image_lcd;
 81013bc:	4b16      	ldr	r3, [pc, #88]	; (8101418 <ConfigLTDC+0x104>)
 81013be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Alpha constant (255 == totally opaque) */
	pLayerCfg.Alpha = 255;
 81013c0:	23ff      	movs	r3, #255	; 0xff
 81013c2:	61bb      	str	r3, [r7, #24]

	/* Default Color configuration (configure A,R,G,B component values) : no background color */
	pLayerCfg.Alpha0 = 255; /* fully transparent */
 81013c4:	23ff      	movs	r3, #255	; 0xff
 81013c6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Backcolor.Blue = 255;
 81013c8:	23ff      	movs	r3, #255	; 0xff
 81013ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 255;
 81013ce:	23ff      	movs	r3, #255	; 0xff
 81013d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 255;
 81013d4:	23ff      	movs	r3, #255	; 0xff
 81013d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	/* Configure blending factors */
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 81013da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81013de:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 81013e0:	2305      	movs	r3, #5
 81013e2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Configure the number of lines and number of pixels per line */
	pLayerCfg.ImageWidth  = 800;
 81013e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 81013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 320;
 81013ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 81013ee:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 81013f0:	1d3b      	adds	r3, r7, #4
 81013f2:	2200      	movs	r2, #0
 81013f4:	4619      	mov	r1, r3
 81013f6:	4806      	ldr	r0, [pc, #24]	; (8101410 <ConfigLTDC+0xfc>)
 81013f8:	f000 ff0a 	bl	8102210 <HAL_LTDC_ConfigLayer>
 81013fc:	4603      	mov	r3, r0
 81013fe:	2b00      	cmp	r3, #0
 8101400:	d001      	beq.n	8101406 <ConfigLTDC+0xf2>
		Error_Handler();
 8101402:	f7ff fca1 	bl	8100d48 <Error_Handler>
	/* USER CODE END LTDC_Init 2 */
}
 8101406:	bf00      	nop
 8101408:	3738      	adds	r7, #56	; 0x38
 810140a:	46bd      	mov	sp, r7
 810140c:	bd80      	pop	{r7, pc}
 810140e:	bf00      	nop
 8101410:	100000c0 	.word	0x100000c0
 8101414:	50001000 	.word	0x50001000
 8101418:	08104ba4 	.word	0x08104ba4

0810141c <LCDDisplay_Init>:
 * @brief LCD Display Initialization
 * This function configures the hardware resources for the LCD Display
 * @retval None
 */
void LCDDisplay_Init(void)
{
 810141c:	b580      	push	{r7, lr}
 810141e:	af00      	add	r7, sp, #0
	ConfigClock();
 8101420:	f7ff fe56 	bl	81010d0 <ConfigClock>
	ConfigIO();
 8101424:	f7ff feec 	bl	8101200 <ConfigIO>
	ConfigLTDC();
 8101428:	f7ff ff74 	bl	8101314 <ConfigLTDC>
}
 810142c:	bf00      	nop
 810142e:	bd80      	pop	{r7, pc}

08101430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101430:	b580      	push	{r7, lr}
 8101432:	b082      	sub	sp, #8
 8101434:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101436:	4b28      	ldr	r3, [pc, #160]	; (81014d8 <HAL_Init+0xa8>)
 8101438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810143c:	4a26      	ldr	r2, [pc, #152]	; (81014d8 <HAL_Init+0xa8>)
 810143e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101442:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101446:	4b24      	ldr	r3, [pc, #144]	; (81014d8 <HAL_Init+0xa8>)
 8101448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810144c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101450:	603b      	str	r3, [r7, #0]
 8101452:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101454:	4b21      	ldr	r3, [pc, #132]	; (81014dc <HAL_Init+0xac>)
 8101456:	681b      	ldr	r3, [r3, #0]
 8101458:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810145c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101460:	4a1e      	ldr	r2, [pc, #120]	; (81014dc <HAL_Init+0xac>)
 8101462:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101466:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101468:	4b1c      	ldr	r3, [pc, #112]	; (81014dc <HAL_Init+0xac>)
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	4a1b      	ldr	r2, [pc, #108]	; (81014dc <HAL_Init+0xac>)
 810146e:	f043 0301 	orr.w	r3, r3, #1
 8101472:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101474:	2003      	movs	r0, #3
 8101476:	f000 f95f 	bl	8101738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810147a:	f001 f927 	bl	81026cc <HAL_RCC_GetSysClockFreq>
 810147e:	4602      	mov	r2, r0
 8101480:	4b15      	ldr	r3, [pc, #84]	; (81014d8 <HAL_Init+0xa8>)
 8101482:	699b      	ldr	r3, [r3, #24]
 8101484:	0a1b      	lsrs	r3, r3, #8
 8101486:	f003 030f 	and.w	r3, r3, #15
 810148a:	4915      	ldr	r1, [pc, #84]	; (81014e0 <HAL_Init+0xb0>)
 810148c:	5ccb      	ldrb	r3, [r1, r3]
 810148e:	f003 031f 	and.w	r3, r3, #31
 8101492:	fa22 f303 	lsr.w	r3, r2, r3
 8101496:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101498:	4b0f      	ldr	r3, [pc, #60]	; (81014d8 <HAL_Init+0xa8>)
 810149a:	699b      	ldr	r3, [r3, #24]
 810149c:	f003 030f 	and.w	r3, r3, #15
 81014a0:	4a0f      	ldr	r2, [pc, #60]	; (81014e0 <HAL_Init+0xb0>)
 81014a2:	5cd3      	ldrb	r3, [r2, r3]
 81014a4:	f003 031f 	and.w	r3, r3, #31
 81014a8:	687a      	ldr	r2, [r7, #4]
 81014aa:	fa22 f303 	lsr.w	r3, r2, r3
 81014ae:	4a0d      	ldr	r2, [pc, #52]	; (81014e4 <HAL_Init+0xb4>)
 81014b0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81014b2:	4b0c      	ldr	r3, [pc, #48]	; (81014e4 <HAL_Init+0xb4>)
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	4a0c      	ldr	r2, [pc, #48]	; (81014e8 <HAL_Init+0xb8>)
 81014b8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81014ba:	2000      	movs	r0, #0
 81014bc:	f000 f816 	bl	81014ec <HAL_InitTick>
 81014c0:	4603      	mov	r3, r0
 81014c2:	2b00      	cmp	r3, #0
 81014c4:	d001      	beq.n	81014ca <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81014c6:	2301      	movs	r3, #1
 81014c8:	e002      	b.n	81014d0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81014ca:	f7ff fc43 	bl	8100d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81014ce:	2300      	movs	r3, #0
}
 81014d0:	4618      	mov	r0, r3
 81014d2:	3708      	adds	r7, #8
 81014d4:	46bd      	mov	sp, r7
 81014d6:	bd80      	pop	{r7, pc}
 81014d8:	58024400 	.word	0x58024400
 81014dc:	40024400 	.word	0x40024400
 81014e0:	08104b94 	.word	0x08104b94
 81014e4:	10000010 	.word	0x10000010
 81014e8:	1000000c 	.word	0x1000000c

081014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81014ec:	b580      	push	{r7, lr}
 81014ee:	b082      	sub	sp, #8
 81014f0:	af00      	add	r7, sp, #0
 81014f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81014f4:	4b15      	ldr	r3, [pc, #84]	; (810154c <HAL_InitTick+0x60>)
 81014f6:	781b      	ldrb	r3, [r3, #0]
 81014f8:	2b00      	cmp	r3, #0
 81014fa:	d101      	bne.n	8101500 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81014fc:	2301      	movs	r3, #1
 81014fe:	e021      	b.n	8101544 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101500:	4b13      	ldr	r3, [pc, #76]	; (8101550 <HAL_InitTick+0x64>)
 8101502:	681a      	ldr	r2, [r3, #0]
 8101504:	4b11      	ldr	r3, [pc, #68]	; (810154c <HAL_InitTick+0x60>)
 8101506:	781b      	ldrb	r3, [r3, #0]
 8101508:	4619      	mov	r1, r3
 810150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101512:	fbb2 f3f3 	udiv	r3, r2, r3
 8101516:	4618      	mov	r0, r3
 8101518:	f000 f941 	bl	810179e <HAL_SYSTICK_Config>
 810151c:	4603      	mov	r3, r0
 810151e:	2b00      	cmp	r3, #0
 8101520:	d001      	beq.n	8101526 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101522:	2301      	movs	r3, #1
 8101524:	e00e      	b.n	8101544 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101526:	687b      	ldr	r3, [r7, #4]
 8101528:	2b0f      	cmp	r3, #15
 810152a:	d80a      	bhi.n	8101542 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810152c:	2200      	movs	r2, #0
 810152e:	6879      	ldr	r1, [r7, #4]
 8101530:	f04f 30ff 	mov.w	r0, #4294967295
 8101534:	f000 f90b 	bl	810174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101538:	4a06      	ldr	r2, [pc, #24]	; (8101554 <HAL_InitTick+0x68>)
 810153a:	687b      	ldr	r3, [r7, #4]
 810153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810153e:	2300      	movs	r3, #0
 8101540:	e000      	b.n	8101544 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101542:	2301      	movs	r3, #1
}
 8101544:	4618      	mov	r0, r3
 8101546:	3708      	adds	r7, #8
 8101548:	46bd      	mov	sp, r7
 810154a:	bd80      	pop	{r7, pc}
 810154c:	10000018 	.word	0x10000018
 8101550:	1000000c 	.word	0x1000000c
 8101554:	10000014 	.word	0x10000014

08101558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101558:	b480      	push	{r7}
 810155a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810155c:	4b06      	ldr	r3, [pc, #24]	; (8101578 <HAL_IncTick+0x20>)
 810155e:	781b      	ldrb	r3, [r3, #0]
 8101560:	461a      	mov	r2, r3
 8101562:	4b06      	ldr	r3, [pc, #24]	; (810157c <HAL_IncTick+0x24>)
 8101564:	681b      	ldr	r3, [r3, #0]
 8101566:	4413      	add	r3, r2
 8101568:	4a04      	ldr	r2, [pc, #16]	; (810157c <HAL_IncTick+0x24>)
 810156a:	6013      	str	r3, [r2, #0]
}
 810156c:	bf00      	nop
 810156e:	46bd      	mov	sp, r7
 8101570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101574:	4770      	bx	lr
 8101576:	bf00      	nop
 8101578:	10000018 	.word	0x10000018
 810157c:	100002fc 	.word	0x100002fc

08101580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101580:	b480      	push	{r7}
 8101582:	af00      	add	r7, sp, #0
  return uwTick;
 8101584:	4b03      	ldr	r3, [pc, #12]	; (8101594 <HAL_GetTick+0x14>)
 8101586:	681b      	ldr	r3, [r3, #0]
}
 8101588:	4618      	mov	r0, r3
 810158a:	46bd      	mov	sp, r7
 810158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101590:	4770      	bx	lr
 8101592:	bf00      	nop
 8101594:	100002fc 	.word	0x100002fc

08101598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101598:	b480      	push	{r7}
 810159a:	b085      	sub	sp, #20
 810159c:	af00      	add	r7, sp, #0
 810159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	f003 0307 	and.w	r3, r3, #7
 81015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81015a8:	4b0c      	ldr	r3, [pc, #48]	; (81015dc <__NVIC_SetPriorityGrouping+0x44>)
 81015aa:	68db      	ldr	r3, [r3, #12]
 81015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81015ae:	68ba      	ldr	r2, [r7, #8]
 81015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81015b4:	4013      	ands	r3, r2
 81015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81015b8:	68fb      	ldr	r3, [r7, #12]
 81015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81015bc:	68bb      	ldr	r3, [r7, #8]
 81015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81015ca:	4a04      	ldr	r2, [pc, #16]	; (81015dc <__NVIC_SetPriorityGrouping+0x44>)
 81015cc:	68bb      	ldr	r3, [r7, #8]
 81015ce:	60d3      	str	r3, [r2, #12]
}
 81015d0:	bf00      	nop
 81015d2:	3714      	adds	r7, #20
 81015d4:	46bd      	mov	sp, r7
 81015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015da:	4770      	bx	lr
 81015dc:	e000ed00 	.word	0xe000ed00

081015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81015e0:	b480      	push	{r7}
 81015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81015e4:	4b04      	ldr	r3, [pc, #16]	; (81015f8 <__NVIC_GetPriorityGrouping+0x18>)
 81015e6:	68db      	ldr	r3, [r3, #12]
 81015e8:	0a1b      	lsrs	r3, r3, #8
 81015ea:	f003 0307 	and.w	r3, r3, #7
}
 81015ee:	4618      	mov	r0, r3
 81015f0:	46bd      	mov	sp, r7
 81015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f6:	4770      	bx	lr
 81015f8:	e000ed00 	.word	0xe000ed00

081015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81015fc:	b480      	push	{r7}
 81015fe:	b083      	sub	sp, #12
 8101600:	af00      	add	r7, sp, #0
 8101602:	4603      	mov	r3, r0
 8101604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810160a:	2b00      	cmp	r3, #0
 810160c:	db0b      	blt.n	8101626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810160e:	88fb      	ldrh	r3, [r7, #6]
 8101610:	f003 021f 	and.w	r2, r3, #31
 8101614:	4907      	ldr	r1, [pc, #28]	; (8101634 <__NVIC_EnableIRQ+0x38>)
 8101616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810161a:	095b      	lsrs	r3, r3, #5
 810161c:	2001      	movs	r0, #1
 810161e:	fa00 f202 	lsl.w	r2, r0, r2
 8101622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101626:	bf00      	nop
 8101628:	370c      	adds	r7, #12
 810162a:	46bd      	mov	sp, r7
 810162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101630:	4770      	bx	lr
 8101632:	bf00      	nop
 8101634:	e000e100 	.word	0xe000e100

08101638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101638:	b480      	push	{r7}
 810163a:	b083      	sub	sp, #12
 810163c:	af00      	add	r7, sp, #0
 810163e:	4603      	mov	r3, r0
 8101640:	6039      	str	r1, [r7, #0]
 8101642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101648:	2b00      	cmp	r3, #0
 810164a:	db0a      	blt.n	8101662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810164c:	683b      	ldr	r3, [r7, #0]
 810164e:	b2da      	uxtb	r2, r3
 8101650:	490c      	ldr	r1, [pc, #48]	; (8101684 <__NVIC_SetPriority+0x4c>)
 8101652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101656:	0112      	lsls	r2, r2, #4
 8101658:	b2d2      	uxtb	r2, r2
 810165a:	440b      	add	r3, r1
 810165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101660:	e00a      	b.n	8101678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101662:	683b      	ldr	r3, [r7, #0]
 8101664:	b2da      	uxtb	r2, r3
 8101666:	4908      	ldr	r1, [pc, #32]	; (8101688 <__NVIC_SetPriority+0x50>)
 8101668:	88fb      	ldrh	r3, [r7, #6]
 810166a:	f003 030f 	and.w	r3, r3, #15
 810166e:	3b04      	subs	r3, #4
 8101670:	0112      	lsls	r2, r2, #4
 8101672:	b2d2      	uxtb	r2, r2
 8101674:	440b      	add	r3, r1
 8101676:	761a      	strb	r2, [r3, #24]
}
 8101678:	bf00      	nop
 810167a:	370c      	adds	r7, #12
 810167c:	46bd      	mov	sp, r7
 810167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101682:	4770      	bx	lr
 8101684:	e000e100 	.word	0xe000e100
 8101688:	e000ed00 	.word	0xe000ed00

0810168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810168c:	b480      	push	{r7}
 810168e:	b089      	sub	sp, #36	; 0x24
 8101690:	af00      	add	r7, sp, #0
 8101692:	60f8      	str	r0, [r7, #12]
 8101694:	60b9      	str	r1, [r7, #8]
 8101696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101698:	68fb      	ldr	r3, [r7, #12]
 810169a:	f003 0307 	and.w	r3, r3, #7
 810169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81016a0:	69fb      	ldr	r3, [r7, #28]
 81016a2:	f1c3 0307 	rsb	r3, r3, #7
 81016a6:	2b04      	cmp	r3, #4
 81016a8:	bf28      	it	cs
 81016aa:	2304      	movcs	r3, #4
 81016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81016ae:	69fb      	ldr	r3, [r7, #28]
 81016b0:	3304      	adds	r3, #4
 81016b2:	2b06      	cmp	r3, #6
 81016b4:	d902      	bls.n	81016bc <NVIC_EncodePriority+0x30>
 81016b6:	69fb      	ldr	r3, [r7, #28]
 81016b8:	3b03      	subs	r3, #3
 81016ba:	e000      	b.n	81016be <NVIC_EncodePriority+0x32>
 81016bc:	2300      	movs	r3, #0
 81016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81016c0:	f04f 32ff 	mov.w	r2, #4294967295
 81016c4:	69bb      	ldr	r3, [r7, #24]
 81016c6:	fa02 f303 	lsl.w	r3, r2, r3
 81016ca:	43da      	mvns	r2, r3
 81016cc:	68bb      	ldr	r3, [r7, #8]
 81016ce:	401a      	ands	r2, r3
 81016d0:	697b      	ldr	r3, [r7, #20]
 81016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81016d4:	f04f 31ff 	mov.w	r1, #4294967295
 81016d8:	697b      	ldr	r3, [r7, #20]
 81016da:	fa01 f303 	lsl.w	r3, r1, r3
 81016de:	43d9      	mvns	r1, r3
 81016e0:	687b      	ldr	r3, [r7, #4]
 81016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81016e4:	4313      	orrs	r3, r2
         );
}
 81016e6:	4618      	mov	r0, r3
 81016e8:	3724      	adds	r7, #36	; 0x24
 81016ea:	46bd      	mov	sp, r7
 81016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f0:	4770      	bx	lr
	...

081016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81016f4:	b580      	push	{r7, lr}
 81016f6:	b082      	sub	sp, #8
 81016f8:	af00      	add	r7, sp, #0
 81016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	3b01      	subs	r3, #1
 8101700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101704:	d301      	bcc.n	810170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101706:	2301      	movs	r3, #1
 8101708:	e00f      	b.n	810172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810170a:	4a0a      	ldr	r2, [pc, #40]	; (8101734 <SysTick_Config+0x40>)
 810170c:	687b      	ldr	r3, [r7, #4]
 810170e:	3b01      	subs	r3, #1
 8101710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101712:	210f      	movs	r1, #15
 8101714:	f04f 30ff 	mov.w	r0, #4294967295
 8101718:	f7ff ff8e 	bl	8101638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810171c:	4b05      	ldr	r3, [pc, #20]	; (8101734 <SysTick_Config+0x40>)
 810171e:	2200      	movs	r2, #0
 8101720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101722:	4b04      	ldr	r3, [pc, #16]	; (8101734 <SysTick_Config+0x40>)
 8101724:	2207      	movs	r2, #7
 8101726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101728:	2300      	movs	r3, #0
}
 810172a:	4618      	mov	r0, r3
 810172c:	3708      	adds	r7, #8
 810172e:	46bd      	mov	sp, r7
 8101730:	bd80      	pop	{r7, pc}
 8101732:	bf00      	nop
 8101734:	e000e010 	.word	0xe000e010

08101738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101738:	b580      	push	{r7, lr}
 810173a:	b082      	sub	sp, #8
 810173c:	af00      	add	r7, sp, #0
 810173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101740:	6878      	ldr	r0, [r7, #4]
 8101742:	f7ff ff29 	bl	8101598 <__NVIC_SetPriorityGrouping>
}
 8101746:	bf00      	nop
 8101748:	3708      	adds	r7, #8
 810174a:	46bd      	mov	sp, r7
 810174c:	bd80      	pop	{r7, pc}

0810174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810174e:	b580      	push	{r7, lr}
 8101750:	b086      	sub	sp, #24
 8101752:	af00      	add	r7, sp, #0
 8101754:	4603      	mov	r3, r0
 8101756:	60b9      	str	r1, [r7, #8]
 8101758:	607a      	str	r2, [r7, #4]
 810175a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810175c:	f7ff ff40 	bl	81015e0 <__NVIC_GetPriorityGrouping>
 8101760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101762:	687a      	ldr	r2, [r7, #4]
 8101764:	68b9      	ldr	r1, [r7, #8]
 8101766:	6978      	ldr	r0, [r7, #20]
 8101768:	f7ff ff90 	bl	810168c <NVIC_EncodePriority>
 810176c:	4602      	mov	r2, r0
 810176e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101772:	4611      	mov	r1, r2
 8101774:	4618      	mov	r0, r3
 8101776:	f7ff ff5f 	bl	8101638 <__NVIC_SetPriority>
}
 810177a:	bf00      	nop
 810177c:	3718      	adds	r7, #24
 810177e:	46bd      	mov	sp, r7
 8101780:	bd80      	pop	{r7, pc}

08101782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101782:	b580      	push	{r7, lr}
 8101784:	b082      	sub	sp, #8
 8101786:	af00      	add	r7, sp, #0
 8101788:	4603      	mov	r3, r0
 810178a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101790:	4618      	mov	r0, r3
 8101792:	f7ff ff33 	bl	81015fc <__NVIC_EnableIRQ>
}
 8101796:	bf00      	nop
 8101798:	3708      	adds	r7, #8
 810179a:	46bd      	mov	sp, r7
 810179c:	bd80      	pop	{r7, pc}

0810179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810179e:	b580      	push	{r7, lr}
 81017a0:	b082      	sub	sp, #8
 81017a2:	af00      	add	r7, sp, #0
 81017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81017a6:	6878      	ldr	r0, [r7, #4]
 81017a8:	f7ff ffa4 	bl	81016f4 <SysTick_Config>
 81017ac:	4603      	mov	r3, r0
}
 81017ae:	4618      	mov	r0, r3
 81017b0:	3708      	adds	r7, #8
 81017b2:	46bd      	mov	sp, r7
 81017b4:	bd80      	pop	{r7, pc}
	...

081017b8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81017b8:	b480      	push	{r7}
 81017ba:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81017bc:	4b07      	ldr	r3, [pc, #28]	; (81017dc <HAL_GetCurrentCPUID+0x24>)
 81017be:	681b      	ldr	r3, [r3, #0]
 81017c0:	091b      	lsrs	r3, r3, #4
 81017c2:	f003 030f 	and.w	r3, r3, #15
 81017c6:	2b07      	cmp	r3, #7
 81017c8:	d101      	bne.n	81017ce <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81017ca:	2303      	movs	r3, #3
 81017cc:	e000      	b.n	81017d0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81017ce:	2301      	movs	r3, #1
  }
}
 81017d0:	4618      	mov	r0, r3
 81017d2:	46bd      	mov	sp, r7
 81017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017d8:	4770      	bx	lr
 81017da:	bf00      	nop
 81017dc:	e000ed00 	.word	0xe000ed00

081017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81017e0:	b480      	push	{r7}
 81017e2:	b089      	sub	sp, #36	; 0x24
 81017e4:	af00      	add	r7, sp, #0
 81017e6:	6078      	str	r0, [r7, #4]
 81017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81017ea:	2300      	movs	r3, #0
 81017ec:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81017ee:	4b89      	ldr	r3, [pc, #548]	; (8101a14 <HAL_GPIO_Init+0x234>)
 81017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81017f2:	e194      	b.n	8101b1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81017f4:	683b      	ldr	r3, [r7, #0]
 81017f6:	681a      	ldr	r2, [r3, #0]
 81017f8:	2101      	movs	r1, #1
 81017fa:	69fb      	ldr	r3, [r7, #28]
 81017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8101800:	4013      	ands	r3, r2
 8101802:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101804:	693b      	ldr	r3, [r7, #16]
 8101806:	2b00      	cmp	r3, #0
 8101808:	f000 8186 	beq.w	8101b18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810180c:	683b      	ldr	r3, [r7, #0]
 810180e:	685b      	ldr	r3, [r3, #4]
 8101810:	2b01      	cmp	r3, #1
 8101812:	d00b      	beq.n	810182c <HAL_GPIO_Init+0x4c>
 8101814:	683b      	ldr	r3, [r7, #0]
 8101816:	685b      	ldr	r3, [r3, #4]
 8101818:	2b02      	cmp	r3, #2
 810181a:	d007      	beq.n	810182c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810181c:	683b      	ldr	r3, [r7, #0]
 810181e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101820:	2b11      	cmp	r3, #17
 8101822:	d003      	beq.n	810182c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101824:	683b      	ldr	r3, [r7, #0]
 8101826:	685b      	ldr	r3, [r3, #4]
 8101828:	2b12      	cmp	r3, #18
 810182a:	d130      	bne.n	810188e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810182c:	687b      	ldr	r3, [r7, #4]
 810182e:	689b      	ldr	r3, [r3, #8]
 8101830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101832:	69fb      	ldr	r3, [r7, #28]
 8101834:	005b      	lsls	r3, r3, #1
 8101836:	2203      	movs	r2, #3
 8101838:	fa02 f303 	lsl.w	r3, r2, r3
 810183c:	43db      	mvns	r3, r3
 810183e:	69ba      	ldr	r2, [r7, #24]
 8101840:	4013      	ands	r3, r2
 8101842:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101844:	683b      	ldr	r3, [r7, #0]
 8101846:	68da      	ldr	r2, [r3, #12]
 8101848:	69fb      	ldr	r3, [r7, #28]
 810184a:	005b      	lsls	r3, r3, #1
 810184c:	fa02 f303 	lsl.w	r3, r2, r3
 8101850:	69ba      	ldr	r2, [r7, #24]
 8101852:	4313      	orrs	r3, r2
 8101854:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	69ba      	ldr	r2, [r7, #24]
 810185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	685b      	ldr	r3, [r3, #4]
 8101860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101862:	2201      	movs	r2, #1
 8101864:	69fb      	ldr	r3, [r7, #28]
 8101866:	fa02 f303 	lsl.w	r3, r2, r3
 810186a:	43db      	mvns	r3, r3
 810186c:	69ba      	ldr	r2, [r7, #24]
 810186e:	4013      	ands	r3, r2
 8101870:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101872:	683b      	ldr	r3, [r7, #0]
 8101874:	685b      	ldr	r3, [r3, #4]
 8101876:	091b      	lsrs	r3, r3, #4
 8101878:	f003 0201 	and.w	r2, r3, #1
 810187c:	69fb      	ldr	r3, [r7, #28]
 810187e:	fa02 f303 	lsl.w	r3, r2, r3
 8101882:	69ba      	ldr	r2, [r7, #24]
 8101884:	4313      	orrs	r3, r2
 8101886:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101888:	687b      	ldr	r3, [r7, #4]
 810188a:	69ba      	ldr	r2, [r7, #24]
 810188c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	68db      	ldr	r3, [r3, #12]
 8101892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101894:	69fb      	ldr	r3, [r7, #28]
 8101896:	005b      	lsls	r3, r3, #1
 8101898:	2203      	movs	r2, #3
 810189a:	fa02 f303 	lsl.w	r3, r2, r3
 810189e:	43db      	mvns	r3, r3
 81018a0:	69ba      	ldr	r2, [r7, #24]
 81018a2:	4013      	ands	r3, r2
 81018a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81018a6:	683b      	ldr	r3, [r7, #0]
 81018a8:	689a      	ldr	r2, [r3, #8]
 81018aa:	69fb      	ldr	r3, [r7, #28]
 81018ac:	005b      	lsls	r3, r3, #1
 81018ae:	fa02 f303 	lsl.w	r3, r2, r3
 81018b2:	69ba      	ldr	r2, [r7, #24]
 81018b4:	4313      	orrs	r3, r2
 81018b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	69ba      	ldr	r2, [r7, #24]
 81018bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81018be:	683b      	ldr	r3, [r7, #0]
 81018c0:	685b      	ldr	r3, [r3, #4]
 81018c2:	2b02      	cmp	r3, #2
 81018c4:	d003      	beq.n	81018ce <HAL_GPIO_Init+0xee>
 81018c6:	683b      	ldr	r3, [r7, #0]
 81018c8:	685b      	ldr	r3, [r3, #4]
 81018ca:	2b12      	cmp	r3, #18
 81018cc:	d123      	bne.n	8101916 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81018ce:	69fb      	ldr	r3, [r7, #28]
 81018d0:	08da      	lsrs	r2, r3, #3
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	3208      	adds	r2, #8
 81018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81018dc:	69fb      	ldr	r3, [r7, #28]
 81018de:	f003 0307 	and.w	r3, r3, #7
 81018e2:	009b      	lsls	r3, r3, #2
 81018e4:	220f      	movs	r2, #15
 81018e6:	fa02 f303 	lsl.w	r3, r2, r3
 81018ea:	43db      	mvns	r3, r3
 81018ec:	69ba      	ldr	r2, [r7, #24]
 81018ee:	4013      	ands	r3, r2
 81018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81018f2:	683b      	ldr	r3, [r7, #0]
 81018f4:	691a      	ldr	r2, [r3, #16]
 81018f6:	69fb      	ldr	r3, [r7, #28]
 81018f8:	f003 0307 	and.w	r3, r3, #7
 81018fc:	009b      	lsls	r3, r3, #2
 81018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8101902:	69ba      	ldr	r2, [r7, #24]
 8101904:	4313      	orrs	r3, r2
 8101906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101908:	69fb      	ldr	r3, [r7, #28]
 810190a:	08da      	lsrs	r2, r3, #3
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	3208      	adds	r2, #8
 8101910:	69b9      	ldr	r1, [r7, #24]
 8101912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101916:	687b      	ldr	r3, [r7, #4]
 8101918:	681b      	ldr	r3, [r3, #0]
 810191a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810191c:	69fb      	ldr	r3, [r7, #28]
 810191e:	005b      	lsls	r3, r3, #1
 8101920:	2203      	movs	r2, #3
 8101922:	fa02 f303 	lsl.w	r3, r2, r3
 8101926:	43db      	mvns	r3, r3
 8101928:	69ba      	ldr	r2, [r7, #24]
 810192a:	4013      	ands	r3, r2
 810192c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810192e:	683b      	ldr	r3, [r7, #0]
 8101930:	685b      	ldr	r3, [r3, #4]
 8101932:	f003 0203 	and.w	r2, r3, #3
 8101936:	69fb      	ldr	r3, [r7, #28]
 8101938:	005b      	lsls	r3, r3, #1
 810193a:	fa02 f303 	lsl.w	r3, r2, r3
 810193e:	69ba      	ldr	r2, [r7, #24]
 8101940:	4313      	orrs	r3, r2
 8101942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	69ba      	ldr	r2, [r7, #24]
 8101948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810194a:	683b      	ldr	r3, [r7, #0]
 810194c:	685b      	ldr	r3, [r3, #4]
 810194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101952:	2b00      	cmp	r3, #0
 8101954:	f000 80e0 	beq.w	8101b18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101958:	4b2f      	ldr	r3, [pc, #188]	; (8101a18 <HAL_GPIO_Init+0x238>)
 810195a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810195e:	4a2e      	ldr	r2, [pc, #184]	; (8101a18 <HAL_GPIO_Init+0x238>)
 8101960:	f043 0302 	orr.w	r3, r3, #2
 8101964:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101968:	4b2b      	ldr	r3, [pc, #172]	; (8101a18 <HAL_GPIO_Init+0x238>)
 810196a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810196e:	f003 0302 	and.w	r3, r3, #2
 8101972:	60fb      	str	r3, [r7, #12]
 8101974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101976:	4a29      	ldr	r2, [pc, #164]	; (8101a1c <HAL_GPIO_Init+0x23c>)
 8101978:	69fb      	ldr	r3, [r7, #28]
 810197a:	089b      	lsrs	r3, r3, #2
 810197c:	3302      	adds	r3, #2
 810197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101984:	69fb      	ldr	r3, [r7, #28]
 8101986:	f003 0303 	and.w	r3, r3, #3
 810198a:	009b      	lsls	r3, r3, #2
 810198c:	220f      	movs	r2, #15
 810198e:	fa02 f303 	lsl.w	r3, r2, r3
 8101992:	43db      	mvns	r3, r3
 8101994:	69ba      	ldr	r2, [r7, #24]
 8101996:	4013      	ands	r3, r2
 8101998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	4a20      	ldr	r2, [pc, #128]	; (8101a20 <HAL_GPIO_Init+0x240>)
 810199e:	4293      	cmp	r3, r2
 81019a0:	d052      	beq.n	8101a48 <HAL_GPIO_Init+0x268>
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	4a1f      	ldr	r2, [pc, #124]	; (8101a24 <HAL_GPIO_Init+0x244>)
 81019a6:	4293      	cmp	r3, r2
 81019a8:	d031      	beq.n	8101a0e <HAL_GPIO_Init+0x22e>
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	4a1e      	ldr	r2, [pc, #120]	; (8101a28 <HAL_GPIO_Init+0x248>)
 81019ae:	4293      	cmp	r3, r2
 81019b0:	d02b      	beq.n	8101a0a <HAL_GPIO_Init+0x22a>
 81019b2:	687b      	ldr	r3, [r7, #4]
 81019b4:	4a1d      	ldr	r2, [pc, #116]	; (8101a2c <HAL_GPIO_Init+0x24c>)
 81019b6:	4293      	cmp	r3, r2
 81019b8:	d025      	beq.n	8101a06 <HAL_GPIO_Init+0x226>
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	4a1c      	ldr	r2, [pc, #112]	; (8101a30 <HAL_GPIO_Init+0x250>)
 81019be:	4293      	cmp	r3, r2
 81019c0:	d01f      	beq.n	8101a02 <HAL_GPIO_Init+0x222>
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	4a1b      	ldr	r2, [pc, #108]	; (8101a34 <HAL_GPIO_Init+0x254>)
 81019c6:	4293      	cmp	r3, r2
 81019c8:	d019      	beq.n	81019fe <HAL_GPIO_Init+0x21e>
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	4a1a      	ldr	r2, [pc, #104]	; (8101a38 <HAL_GPIO_Init+0x258>)
 81019ce:	4293      	cmp	r3, r2
 81019d0:	d013      	beq.n	81019fa <HAL_GPIO_Init+0x21a>
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	4a19      	ldr	r2, [pc, #100]	; (8101a3c <HAL_GPIO_Init+0x25c>)
 81019d6:	4293      	cmp	r3, r2
 81019d8:	d00d      	beq.n	81019f6 <HAL_GPIO_Init+0x216>
 81019da:	687b      	ldr	r3, [r7, #4]
 81019dc:	4a18      	ldr	r2, [pc, #96]	; (8101a40 <HAL_GPIO_Init+0x260>)
 81019de:	4293      	cmp	r3, r2
 81019e0:	d007      	beq.n	81019f2 <HAL_GPIO_Init+0x212>
 81019e2:	687b      	ldr	r3, [r7, #4]
 81019e4:	4a17      	ldr	r2, [pc, #92]	; (8101a44 <HAL_GPIO_Init+0x264>)
 81019e6:	4293      	cmp	r3, r2
 81019e8:	d101      	bne.n	81019ee <HAL_GPIO_Init+0x20e>
 81019ea:	2309      	movs	r3, #9
 81019ec:	e02d      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 81019ee:	230a      	movs	r3, #10
 81019f0:	e02b      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 81019f2:	2308      	movs	r3, #8
 81019f4:	e029      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 81019f6:	2307      	movs	r3, #7
 81019f8:	e027      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 81019fa:	2306      	movs	r3, #6
 81019fc:	e025      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 81019fe:	2305      	movs	r3, #5
 8101a00:	e023      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 8101a02:	2304      	movs	r3, #4
 8101a04:	e021      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 8101a06:	2303      	movs	r3, #3
 8101a08:	e01f      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 8101a0a:	2302      	movs	r3, #2
 8101a0c:	e01d      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 8101a0e:	2301      	movs	r3, #1
 8101a10:	e01b      	b.n	8101a4a <HAL_GPIO_Init+0x26a>
 8101a12:	bf00      	nop
 8101a14:	580000c0 	.word	0x580000c0
 8101a18:	58024400 	.word	0x58024400
 8101a1c:	58000400 	.word	0x58000400
 8101a20:	58020000 	.word	0x58020000
 8101a24:	58020400 	.word	0x58020400
 8101a28:	58020800 	.word	0x58020800
 8101a2c:	58020c00 	.word	0x58020c00
 8101a30:	58021000 	.word	0x58021000
 8101a34:	58021400 	.word	0x58021400
 8101a38:	58021800 	.word	0x58021800
 8101a3c:	58021c00 	.word	0x58021c00
 8101a40:	58022000 	.word	0x58022000
 8101a44:	58022400 	.word	0x58022400
 8101a48:	2300      	movs	r3, #0
 8101a4a:	69fa      	ldr	r2, [r7, #28]
 8101a4c:	f002 0203 	and.w	r2, r2, #3
 8101a50:	0092      	lsls	r2, r2, #2
 8101a52:	4093      	lsls	r3, r2
 8101a54:	69ba      	ldr	r2, [r7, #24]
 8101a56:	4313      	orrs	r3, r2
 8101a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101a5a:	4938      	ldr	r1, [pc, #224]	; (8101b3c <HAL_GPIO_Init+0x35c>)
 8101a5c:	69fb      	ldr	r3, [r7, #28]
 8101a5e:	089b      	lsrs	r3, r3, #2
 8101a60:	3302      	adds	r3, #2
 8101a62:	69ba      	ldr	r2, [r7, #24]
 8101a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101a68:	697b      	ldr	r3, [r7, #20]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101a6e:	693b      	ldr	r3, [r7, #16]
 8101a70:	43db      	mvns	r3, r3
 8101a72:	69ba      	ldr	r2, [r7, #24]
 8101a74:	4013      	ands	r3, r2
 8101a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101a78:	683b      	ldr	r3, [r7, #0]
 8101a7a:	685b      	ldr	r3, [r3, #4]
 8101a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101a80:	2b00      	cmp	r3, #0
 8101a82:	d003      	beq.n	8101a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101a84:	69ba      	ldr	r2, [r7, #24]
 8101a86:	693b      	ldr	r3, [r7, #16]
 8101a88:	4313      	orrs	r3, r2
 8101a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101a8c:	697b      	ldr	r3, [r7, #20]
 8101a8e:	69ba      	ldr	r2, [r7, #24]
 8101a90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101a92:	697b      	ldr	r3, [r7, #20]
 8101a94:	685b      	ldr	r3, [r3, #4]
 8101a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101a98:	693b      	ldr	r3, [r7, #16]
 8101a9a:	43db      	mvns	r3, r3
 8101a9c:	69ba      	ldr	r2, [r7, #24]
 8101a9e:	4013      	ands	r3, r2
 8101aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101aa2:	683b      	ldr	r3, [r7, #0]
 8101aa4:	685b      	ldr	r3, [r3, #4]
 8101aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101aaa:	2b00      	cmp	r3, #0
 8101aac:	d003      	beq.n	8101ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101aae:	69ba      	ldr	r2, [r7, #24]
 8101ab0:	693b      	ldr	r3, [r7, #16]
 8101ab2:	4313      	orrs	r3, r2
 8101ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101ab6:	697b      	ldr	r3, [r7, #20]
 8101ab8:	69ba      	ldr	r2, [r7, #24]
 8101aba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101ac0:	681b      	ldr	r3, [r3, #0]
 8101ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ac4:	693b      	ldr	r3, [r7, #16]
 8101ac6:	43db      	mvns	r3, r3
 8101ac8:	69ba      	ldr	r2, [r7, #24]
 8101aca:	4013      	ands	r3, r2
 8101acc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101ace:	683b      	ldr	r3, [r7, #0]
 8101ad0:	685b      	ldr	r3, [r3, #4]
 8101ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101ad6:	2b00      	cmp	r3, #0
 8101ad8:	d003      	beq.n	8101ae2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8101ada:	69ba      	ldr	r2, [r7, #24]
 8101adc:	693b      	ldr	r3, [r7, #16]
 8101ade:	4313      	orrs	r3, r2
 8101ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101ae6:	69bb      	ldr	r3, [r7, #24]
 8101ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101aee:	685b      	ldr	r3, [r3, #4]
 8101af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101af2:	693b      	ldr	r3, [r7, #16]
 8101af4:	43db      	mvns	r3, r3
 8101af6:	69ba      	ldr	r2, [r7, #24]
 8101af8:	4013      	ands	r3, r2
 8101afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101afc:	683b      	ldr	r3, [r7, #0]
 8101afe:	685b      	ldr	r3, [r3, #4]
 8101b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d003      	beq.n	8101b10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101b08:	69ba      	ldr	r2, [r7, #24]
 8101b0a:	693b      	ldr	r3, [r7, #16]
 8101b0c:	4313      	orrs	r3, r2
 8101b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101b14:	69bb      	ldr	r3, [r7, #24]
 8101b16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101b18:	69fb      	ldr	r3, [r7, #28]
 8101b1a:	3301      	adds	r3, #1
 8101b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101b1e:	683b      	ldr	r3, [r7, #0]
 8101b20:	681a      	ldr	r2, [r3, #0]
 8101b22:	69fb      	ldr	r3, [r7, #28]
 8101b24:	fa22 f303 	lsr.w	r3, r2, r3
 8101b28:	2b00      	cmp	r3, #0
 8101b2a:	f47f ae63 	bne.w	81017f4 <HAL_GPIO_Init+0x14>
  }
}
 8101b2e:	bf00      	nop
 8101b30:	bf00      	nop
 8101b32:	3724      	adds	r7, #36	; 0x24
 8101b34:	46bd      	mov	sp, r7
 8101b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b3a:	4770      	bx	lr
 8101b3c:	58000400 	.word	0x58000400

08101b40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8101b40:	b480      	push	{r7}
 8101b42:	b087      	sub	sp, #28
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	6078      	str	r0, [r7, #4]
 8101b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101b4a:	2300      	movs	r3, #0
 8101b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101b4e:	4b75      	ldr	r3, [pc, #468]	; (8101d24 <HAL_GPIO_DeInit+0x1e4>)
 8101b50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8101b52:	e0d9      	b.n	8101d08 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8101b54:	2201      	movs	r2, #1
 8101b56:	697b      	ldr	r3, [r7, #20]
 8101b58:	fa02 f303 	lsl.w	r3, r2, r3
 8101b5c:	683a      	ldr	r2, [r7, #0]
 8101b5e:	4013      	ands	r3, r2
 8101b60:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8101b62:	68fb      	ldr	r3, [r7, #12]
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	f000 80cc 	beq.w	8101d02 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8101b6a:	4a6f      	ldr	r2, [pc, #444]	; (8101d28 <HAL_GPIO_DeInit+0x1e8>)
 8101b6c:	697b      	ldr	r3, [r7, #20]
 8101b6e:	089b      	lsrs	r3, r3, #2
 8101b70:	3302      	adds	r3, #2
 8101b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101b76:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8101b78:	697b      	ldr	r3, [r7, #20]
 8101b7a:	f003 0303 	and.w	r3, r3, #3
 8101b7e:	009b      	lsls	r3, r3, #2
 8101b80:	220f      	movs	r2, #15
 8101b82:	fa02 f303 	lsl.w	r3, r2, r3
 8101b86:	68ba      	ldr	r2, [r7, #8]
 8101b88:	4013      	ands	r3, r2
 8101b8a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8101b8c:	687b      	ldr	r3, [r7, #4]
 8101b8e:	4a67      	ldr	r2, [pc, #412]	; (8101d2c <HAL_GPIO_DeInit+0x1ec>)
 8101b90:	4293      	cmp	r3, r2
 8101b92:	d037      	beq.n	8101c04 <HAL_GPIO_DeInit+0xc4>
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	4a66      	ldr	r2, [pc, #408]	; (8101d30 <HAL_GPIO_DeInit+0x1f0>)
 8101b98:	4293      	cmp	r3, r2
 8101b9a:	d031      	beq.n	8101c00 <HAL_GPIO_DeInit+0xc0>
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	4a65      	ldr	r2, [pc, #404]	; (8101d34 <HAL_GPIO_DeInit+0x1f4>)
 8101ba0:	4293      	cmp	r3, r2
 8101ba2:	d02b      	beq.n	8101bfc <HAL_GPIO_DeInit+0xbc>
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	4a64      	ldr	r2, [pc, #400]	; (8101d38 <HAL_GPIO_DeInit+0x1f8>)
 8101ba8:	4293      	cmp	r3, r2
 8101baa:	d025      	beq.n	8101bf8 <HAL_GPIO_DeInit+0xb8>
 8101bac:	687b      	ldr	r3, [r7, #4]
 8101bae:	4a63      	ldr	r2, [pc, #396]	; (8101d3c <HAL_GPIO_DeInit+0x1fc>)
 8101bb0:	4293      	cmp	r3, r2
 8101bb2:	d01f      	beq.n	8101bf4 <HAL_GPIO_DeInit+0xb4>
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	4a62      	ldr	r2, [pc, #392]	; (8101d40 <HAL_GPIO_DeInit+0x200>)
 8101bb8:	4293      	cmp	r3, r2
 8101bba:	d019      	beq.n	8101bf0 <HAL_GPIO_DeInit+0xb0>
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	4a61      	ldr	r2, [pc, #388]	; (8101d44 <HAL_GPIO_DeInit+0x204>)
 8101bc0:	4293      	cmp	r3, r2
 8101bc2:	d013      	beq.n	8101bec <HAL_GPIO_DeInit+0xac>
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	4a60      	ldr	r2, [pc, #384]	; (8101d48 <HAL_GPIO_DeInit+0x208>)
 8101bc8:	4293      	cmp	r3, r2
 8101bca:	d00d      	beq.n	8101be8 <HAL_GPIO_DeInit+0xa8>
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	4a5f      	ldr	r2, [pc, #380]	; (8101d4c <HAL_GPIO_DeInit+0x20c>)
 8101bd0:	4293      	cmp	r3, r2
 8101bd2:	d007      	beq.n	8101be4 <HAL_GPIO_DeInit+0xa4>
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	4a5e      	ldr	r2, [pc, #376]	; (8101d50 <HAL_GPIO_DeInit+0x210>)
 8101bd8:	4293      	cmp	r3, r2
 8101bda:	d101      	bne.n	8101be0 <HAL_GPIO_DeInit+0xa0>
 8101bdc:	2309      	movs	r3, #9
 8101bde:	e012      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101be0:	230a      	movs	r3, #10
 8101be2:	e010      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101be4:	2308      	movs	r3, #8
 8101be6:	e00e      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101be8:	2307      	movs	r3, #7
 8101bea:	e00c      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101bec:	2306      	movs	r3, #6
 8101bee:	e00a      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101bf0:	2305      	movs	r3, #5
 8101bf2:	e008      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101bf4:	2304      	movs	r3, #4
 8101bf6:	e006      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101bf8:	2303      	movs	r3, #3
 8101bfa:	e004      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101bfc:	2302      	movs	r3, #2
 8101bfe:	e002      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101c00:	2301      	movs	r3, #1
 8101c02:	e000      	b.n	8101c06 <HAL_GPIO_DeInit+0xc6>
 8101c04:	2300      	movs	r3, #0
 8101c06:	697a      	ldr	r2, [r7, #20]
 8101c08:	f002 0203 	and.w	r2, r2, #3
 8101c0c:	0092      	lsls	r2, r2, #2
 8101c0e:	4093      	lsls	r3, r2
 8101c10:	68ba      	ldr	r2, [r7, #8]
 8101c12:	429a      	cmp	r2, r3
 8101c14:	d136      	bne.n	8101c84 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8101c16:	693b      	ldr	r3, [r7, #16]
 8101c18:	681a      	ldr	r2, [r3, #0]
 8101c1a:	68fb      	ldr	r3, [r7, #12]
 8101c1c:	43db      	mvns	r3, r3
 8101c1e:	401a      	ands	r2, r3
 8101c20:	693b      	ldr	r3, [r7, #16]
 8101c22:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8101c24:	693b      	ldr	r3, [r7, #16]
 8101c26:	685a      	ldr	r2, [r3, #4]
 8101c28:	68fb      	ldr	r3, [r7, #12]
 8101c2a:	43db      	mvns	r3, r3
 8101c2c:	401a      	ands	r2, r3
 8101c2e:	693b      	ldr	r3, [r7, #16]
 8101c30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8101c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101c36:	681a      	ldr	r2, [r3, #0]
 8101c38:	68fb      	ldr	r3, [r7, #12]
 8101c3a:	43db      	mvns	r3, r3
 8101c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8101c40:	4013      	ands	r3, r2
 8101c42:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8101c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101c48:	685a      	ldr	r2, [r3, #4]
 8101c4a:	68fb      	ldr	r3, [r7, #12]
 8101c4c:	43db      	mvns	r3, r3
 8101c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8101c52:	4013      	ands	r3, r2
 8101c54:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8101c56:	697b      	ldr	r3, [r7, #20]
 8101c58:	f003 0303 	and.w	r3, r3, #3
 8101c5c:	009b      	lsls	r3, r3, #2
 8101c5e:	220f      	movs	r2, #15
 8101c60:	fa02 f303 	lsl.w	r3, r2, r3
 8101c64:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8101c66:	4a30      	ldr	r2, [pc, #192]	; (8101d28 <HAL_GPIO_DeInit+0x1e8>)
 8101c68:	697b      	ldr	r3, [r7, #20]
 8101c6a:	089b      	lsrs	r3, r3, #2
 8101c6c:	3302      	adds	r3, #2
 8101c6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8101c72:	68bb      	ldr	r3, [r7, #8]
 8101c74:	43da      	mvns	r2, r3
 8101c76:	482c      	ldr	r0, [pc, #176]	; (8101d28 <HAL_GPIO_DeInit+0x1e8>)
 8101c78:	697b      	ldr	r3, [r7, #20]
 8101c7a:	089b      	lsrs	r3, r3, #2
 8101c7c:	400a      	ands	r2, r1
 8101c7e:	3302      	adds	r3, #2
 8101c80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	681a      	ldr	r2, [r3, #0]
 8101c88:	697b      	ldr	r3, [r7, #20]
 8101c8a:	005b      	lsls	r3, r3, #1
 8101c8c:	2103      	movs	r1, #3
 8101c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8101c92:	431a      	orrs	r2, r3
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8101c98:	697b      	ldr	r3, [r7, #20]
 8101c9a:	08da      	lsrs	r2, r3, #3
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	3208      	adds	r2, #8
 8101ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8101ca4:	697b      	ldr	r3, [r7, #20]
 8101ca6:	f003 0307 	and.w	r3, r3, #7
 8101caa:	009b      	lsls	r3, r3, #2
 8101cac:	220f      	movs	r2, #15
 8101cae:	fa02 f303 	lsl.w	r3, r2, r3
 8101cb2:	43db      	mvns	r3, r3
 8101cb4:	697a      	ldr	r2, [r7, #20]
 8101cb6:	08d2      	lsrs	r2, r2, #3
 8101cb8:	4019      	ands	r1, r3
 8101cba:	687b      	ldr	r3, [r7, #4]
 8101cbc:	3208      	adds	r2, #8
 8101cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	68da      	ldr	r2, [r3, #12]
 8101cc6:	697b      	ldr	r3, [r7, #20]
 8101cc8:	005b      	lsls	r3, r3, #1
 8101cca:	2103      	movs	r1, #3
 8101ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8101cd0:	43db      	mvns	r3, r3
 8101cd2:	401a      	ands	r2, r3
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8101cd8:	687b      	ldr	r3, [r7, #4]
 8101cda:	685a      	ldr	r2, [r3, #4]
 8101cdc:	2101      	movs	r1, #1
 8101cde:	697b      	ldr	r3, [r7, #20]
 8101ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8101ce4:	43db      	mvns	r3, r3
 8101ce6:	401a      	ands	r2, r3
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	689a      	ldr	r2, [r3, #8]
 8101cf0:	697b      	ldr	r3, [r7, #20]
 8101cf2:	005b      	lsls	r3, r3, #1
 8101cf4:	2103      	movs	r1, #3
 8101cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8101cfa:	43db      	mvns	r3, r3
 8101cfc:	401a      	ands	r2, r3
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	609a      	str	r2, [r3, #8]
    }

    position++;
 8101d02:	697b      	ldr	r3, [r7, #20]
 8101d04:	3301      	adds	r3, #1
 8101d06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8101d08:	683a      	ldr	r2, [r7, #0]
 8101d0a:	697b      	ldr	r3, [r7, #20]
 8101d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8101d10:	2b00      	cmp	r3, #0
 8101d12:	f47f af1f 	bne.w	8101b54 <HAL_GPIO_DeInit+0x14>
  }
}
 8101d16:	bf00      	nop
 8101d18:	bf00      	nop
 8101d1a:	371c      	adds	r7, #28
 8101d1c:	46bd      	mov	sp, r7
 8101d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d22:	4770      	bx	lr
 8101d24:	580000c0 	.word	0x580000c0
 8101d28:	58000400 	.word	0x58000400
 8101d2c:	58020000 	.word	0x58020000
 8101d30:	58020400 	.word	0x58020400
 8101d34:	58020800 	.word	0x58020800
 8101d38:	58020c00 	.word	0x58020c00
 8101d3c:	58021000 	.word	0x58021000
 8101d40:	58021400 	.word	0x58021400
 8101d44:	58021800 	.word	0x58021800
 8101d48:	58021c00 	.word	0x58021c00
 8101d4c:	58022000 	.word	0x58022000
 8101d50:	58022400 	.word	0x58022400

08101d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101d54:	b480      	push	{r7}
 8101d56:	b085      	sub	sp, #20
 8101d58:	af00      	add	r7, sp, #0
 8101d5a:	6078      	str	r0, [r7, #4]
 8101d5c:	460b      	mov	r3, r1
 8101d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	691a      	ldr	r2, [r3, #16]
 8101d64:	887b      	ldrh	r3, [r7, #2]
 8101d66:	4013      	ands	r3, r2
 8101d68:	2b00      	cmp	r3, #0
 8101d6a:	d002      	beq.n	8101d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8101d6c:	2301      	movs	r3, #1
 8101d6e:	73fb      	strb	r3, [r7, #15]
 8101d70:	e001      	b.n	8101d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8101d72:	2300      	movs	r3, #0
 8101d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8101d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8101d78:	4618      	mov	r0, r3
 8101d7a:	3714      	adds	r7, #20
 8101d7c:	46bd      	mov	sp, r7
 8101d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d82:	4770      	bx	lr

08101d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101d84:	b480      	push	{r7}
 8101d86:	b083      	sub	sp, #12
 8101d88:	af00      	add	r7, sp, #0
 8101d8a:	6078      	str	r0, [r7, #4]
 8101d8c:	460b      	mov	r3, r1
 8101d8e:	807b      	strh	r3, [r7, #2]
 8101d90:	4613      	mov	r3, r2
 8101d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101d94:	787b      	ldrb	r3, [r7, #1]
 8101d96:	2b00      	cmp	r3, #0
 8101d98:	d003      	beq.n	8101da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101d9a:	887a      	ldrh	r2, [r7, #2]
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101da0:	e003      	b.n	8101daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101da2:	887b      	ldrh	r3, [r7, #2]
 8101da4:	041a      	lsls	r2, r3, #16
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	619a      	str	r2, [r3, #24]
}
 8101daa:	bf00      	nop
 8101dac:	370c      	adds	r7, #12
 8101dae:	46bd      	mov	sp, r7
 8101db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101db4:	4770      	bx	lr

08101db6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8101db6:	b580      	push	{r7, lr}
 8101db8:	b082      	sub	sp, #8
 8101dba:	af00      	add	r7, sp, #0
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8101dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101dc4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101dc8:	88fb      	ldrh	r3, [r7, #6]
 8101dca:	4013      	ands	r3, r2
 8101dcc:	2b00      	cmp	r3, #0
 8101dce:	d008      	beq.n	8101de2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8101dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101dd4:	88fb      	ldrh	r3, [r7, #6]
 8101dd6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8101dda:	88fb      	ldrh	r3, [r7, #6]
 8101ddc:	4618      	mov	r0, r3
 8101dde:	f7fe fcfd 	bl	81007dc <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101de2:	bf00      	nop
 8101de4:	3708      	adds	r7, #8
 8101de6:	46bd      	mov	sp, r7
 8101de8:	bd80      	pop	{r7, pc}
	...

08101dec <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101dec:	b480      	push	{r7}
 8101dee:	b083      	sub	sp, #12
 8101df0:	af00      	add	r7, sp, #0
 8101df2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101df4:	4b05      	ldr	r3, [pc, #20]	; (8101e0c <HAL_HSEM_ActivateNotification+0x20>)
 8101df6:	681a      	ldr	r2, [r3, #0]
 8101df8:	4904      	ldr	r1, [pc, #16]	; (8101e0c <HAL_HSEM_ActivateNotification+0x20>)
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	4313      	orrs	r3, r2
 8101dfe:	600b      	str	r3, [r1, #0]
#endif
}
 8101e00:	bf00      	nop
 8101e02:	370c      	adds	r7, #12
 8101e04:	46bd      	mov	sp, r7
 8101e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e0a:	4770      	bx	lr
 8101e0c:	58026510 	.word	0x58026510

08101e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101e10:	b580      	push	{r7, lr}
 8101e12:	b082      	sub	sp, #8
 8101e14:	af00      	add	r7, sp, #0
 8101e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	2b00      	cmp	r3, #0
 8101e1c:	d101      	bne.n	8101e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101e1e:	2301      	movs	r3, #1
 8101e20:	e081      	b.n	8101f26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101e28:	b2db      	uxtb	r3, r3
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d106      	bne.n	8101e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	2200      	movs	r2, #0
 8101e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101e36:	6878      	ldr	r0, [r7, #4]
 8101e38:	f7fe ffa6 	bl	8100d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	2224      	movs	r2, #36	; 0x24
 8101e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101e44:	687b      	ldr	r3, [r7, #4]
 8101e46:	681b      	ldr	r3, [r3, #0]
 8101e48:	681a      	ldr	r2, [r3, #0]
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	681b      	ldr	r3, [r3, #0]
 8101e4e:	f022 0201 	bic.w	r2, r2, #1
 8101e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	685a      	ldr	r2, [r3, #4]
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	681b      	ldr	r3, [r3, #0]
 8101e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8101e60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101e62:	687b      	ldr	r3, [r7, #4]
 8101e64:	681b      	ldr	r3, [r3, #0]
 8101e66:	689a      	ldr	r2, [r3, #8]
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	681b      	ldr	r3, [r3, #0]
 8101e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101e70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	68db      	ldr	r3, [r3, #12]
 8101e76:	2b01      	cmp	r3, #1
 8101e78:	d107      	bne.n	8101e8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	689a      	ldr	r2, [r3, #8]
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	681b      	ldr	r3, [r3, #0]
 8101e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101e86:	609a      	str	r2, [r3, #8]
 8101e88:	e006      	b.n	8101e98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	689a      	ldr	r2, [r3, #8]
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8101e96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	68db      	ldr	r3, [r3, #12]
 8101e9c:	2b02      	cmp	r3, #2
 8101e9e:	d104      	bne.n	8101eaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	681b      	ldr	r3, [r3, #0]
 8101ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	681b      	ldr	r3, [r3, #0]
 8101eae:	685b      	ldr	r3, [r3, #4]
 8101eb0:	687a      	ldr	r2, [r7, #4]
 8101eb2:	6812      	ldr	r2, [r2, #0]
 8101eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	681b      	ldr	r3, [r3, #0]
 8101ec2:	68da      	ldr	r2, [r3, #12]
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	691a      	ldr	r2, [r3, #16]
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	695b      	ldr	r3, [r3, #20]
 8101ed6:	ea42 0103 	orr.w	r1, r2, r3
 8101eda:	687b      	ldr	r3, [r7, #4]
 8101edc:	699b      	ldr	r3, [r3, #24]
 8101ede:	021a      	lsls	r2, r3, #8
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	681b      	ldr	r3, [r3, #0]
 8101ee4:	430a      	orrs	r2, r1
 8101ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8101ee8:	687b      	ldr	r3, [r7, #4]
 8101eea:	69d9      	ldr	r1, [r3, #28]
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	6a1a      	ldr	r2, [r3, #32]
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	430a      	orrs	r2, r1
 8101ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	681b      	ldr	r3, [r3, #0]
 8101efc:	681a      	ldr	r2, [r3, #0]
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	f042 0201 	orr.w	r2, r2, #1
 8101f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	2200      	movs	r2, #0
 8101f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	2220      	movs	r2, #32
 8101f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	2200      	movs	r2, #0
 8101f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	2200      	movs	r2, #0
 8101f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101f24:	2300      	movs	r3, #0
}
 8101f26:	4618      	mov	r0, r3
 8101f28:	3708      	adds	r7, #8
 8101f2a:	46bd      	mov	sp, r7
 8101f2c:	bd80      	pop	{r7, pc}

08101f2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101f2e:	b480      	push	{r7}
 8101f30:	b083      	sub	sp, #12
 8101f32:	af00      	add	r7, sp, #0
 8101f34:	6078      	str	r0, [r7, #4]
 8101f36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101f3e:	b2db      	uxtb	r3, r3
 8101f40:	2b20      	cmp	r3, #32
 8101f42:	d138      	bne.n	8101fb6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101f4a:	2b01      	cmp	r3, #1
 8101f4c:	d101      	bne.n	8101f52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101f4e:	2302      	movs	r3, #2
 8101f50:	e032      	b.n	8101fb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	2201      	movs	r2, #1
 8101f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	2224      	movs	r2, #36	; 0x24
 8101f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101f62:	687b      	ldr	r3, [r7, #4]
 8101f64:	681b      	ldr	r3, [r3, #0]
 8101f66:	681a      	ldr	r2, [r3, #0]
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	f022 0201 	bic.w	r2, r2, #1
 8101f70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	681a      	ldr	r2, [r3, #0]
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8101f80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	681b      	ldr	r3, [r3, #0]
 8101f86:	6819      	ldr	r1, [r3, #0]
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	683a      	ldr	r2, [r7, #0]
 8101f8e:	430a      	orrs	r2, r1
 8101f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	681a      	ldr	r2, [r3, #0]
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	f042 0201 	orr.w	r2, r2, #1
 8101fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	2220      	movs	r2, #32
 8101fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	2200      	movs	r2, #0
 8101fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8101fb2:	2300      	movs	r3, #0
 8101fb4:	e000      	b.n	8101fb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8101fb6:	2302      	movs	r3, #2
  }
}
 8101fb8:	4618      	mov	r0, r3
 8101fba:	370c      	adds	r7, #12
 8101fbc:	46bd      	mov	sp, r7
 8101fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fc2:	4770      	bx	lr

08101fc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8101fc4:	b480      	push	{r7}
 8101fc6:	b085      	sub	sp, #20
 8101fc8:	af00      	add	r7, sp, #0
 8101fca:	6078      	str	r0, [r7, #4]
 8101fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101fd4:	b2db      	uxtb	r3, r3
 8101fd6:	2b20      	cmp	r3, #32
 8101fd8:	d139      	bne.n	810204e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101fe0:	2b01      	cmp	r3, #1
 8101fe2:	d101      	bne.n	8101fe8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101fe4:	2302      	movs	r3, #2
 8101fe6:	e033      	b.n	8102050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	2201      	movs	r2, #1
 8101fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	2224      	movs	r2, #36	; 0x24
 8101ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	681a      	ldr	r2, [r3, #0]
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	f022 0201 	bic.w	r2, r2, #1
 8102006:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	681b      	ldr	r3, [r3, #0]
 810200c:	681b      	ldr	r3, [r3, #0]
 810200e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102010:	68fb      	ldr	r3, [r7, #12]
 8102012:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102016:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102018:	683b      	ldr	r3, [r7, #0]
 810201a:	021b      	lsls	r3, r3, #8
 810201c:	68fa      	ldr	r2, [r7, #12]
 810201e:	4313      	orrs	r3, r2
 8102020:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	681b      	ldr	r3, [r3, #0]
 8102026:	68fa      	ldr	r2, [r7, #12]
 8102028:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	681b      	ldr	r3, [r3, #0]
 810202e:	681a      	ldr	r2, [r3, #0]
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	f042 0201 	orr.w	r2, r2, #1
 8102038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	2220      	movs	r2, #32
 810203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	2200      	movs	r2, #0
 8102046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810204a:	2300      	movs	r3, #0
 810204c:	e000      	b.n	8102050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810204e:	2302      	movs	r3, #2
  }
}
 8102050:	4618      	mov	r0, r3
 8102052:	3714      	adds	r7, #20
 8102054:	46bd      	mov	sp, r7
 8102056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810205a:	4770      	bx	lr

0810205c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 810205c:	b580      	push	{r7, lr}
 810205e:	b084      	sub	sp, #16
 8102060:	af00      	add	r7, sp, #0
 8102062:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	2b00      	cmp	r3, #0
 8102068:	d101      	bne.n	810206e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 810206a:	2301      	movs	r3, #1
 810206c:	e0bf      	b.n	81021ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8102074:	b2db      	uxtb	r3, r3
 8102076:	2b00      	cmp	r3, #0
 8102078:	d106      	bne.n	8102088 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	2200      	movs	r2, #0
 810207e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8102082:	6878      	ldr	r0, [r7, #4]
 8102084:	f000 f8ba 	bl	81021fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	2202      	movs	r2, #2
 810208c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	699a      	ldr	r2, [r3, #24]
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 810209e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	6999      	ldr	r1, [r3, #24]
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	685a      	ldr	r2, [r3, #4]
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	689b      	ldr	r3, [r3, #8]
 81020ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 81020b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 81020b6:	687b      	ldr	r3, [r7, #4]
 81020b8:	691b      	ldr	r3, [r3, #16]
 81020ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	430a      	orrs	r2, r1
 81020c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	681b      	ldr	r3, [r3, #0]
 81020c8:	6899      	ldr	r1, [r3, #8]
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	681a      	ldr	r2, [r3, #0]
 81020ce:	4b4a      	ldr	r3, [pc, #296]	; (81021f8 <HAL_LTDC_Init+0x19c>)
 81020d0:	400b      	ands	r3, r1
 81020d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	695b      	ldr	r3, [r3, #20]
 81020d8:	041b      	lsls	r3, r3, #16
 81020da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	681b      	ldr	r3, [r3, #0]
 81020e0:	6899      	ldr	r1, [r3, #8]
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	699a      	ldr	r2, [r3, #24]
 81020e6:	68fb      	ldr	r3, [r7, #12]
 81020e8:	431a      	orrs	r2, r3
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	681b      	ldr	r3, [r3, #0]
 81020ee:	430a      	orrs	r2, r1
 81020f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	681b      	ldr	r3, [r3, #0]
 81020f6:	68d9      	ldr	r1, [r3, #12]
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681a      	ldr	r2, [r3, #0]
 81020fc:	4b3e      	ldr	r3, [pc, #248]	; (81021f8 <HAL_LTDC_Init+0x19c>)
 81020fe:	400b      	ands	r3, r1
 8102100:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	69db      	ldr	r3, [r3, #28]
 8102106:	041b      	lsls	r3, r3, #16
 8102108:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	681b      	ldr	r3, [r3, #0]
 810210e:	68d9      	ldr	r1, [r3, #12]
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	6a1a      	ldr	r2, [r3, #32]
 8102114:	68fb      	ldr	r3, [r7, #12]
 8102116:	431a      	orrs	r2, r3
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	681b      	ldr	r3, [r3, #0]
 810211c:	430a      	orrs	r2, r1
 810211e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	681b      	ldr	r3, [r3, #0]
 8102124:	6919      	ldr	r1, [r3, #16]
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	681a      	ldr	r2, [r3, #0]
 810212a:	4b33      	ldr	r3, [pc, #204]	; (81021f8 <HAL_LTDC_Init+0x19c>)
 810212c:	400b      	ands	r3, r1
 810212e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102134:	041b      	lsls	r3, r3, #16
 8102136:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	6919      	ldr	r1, [r3, #16]
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102142:	68fb      	ldr	r3, [r7, #12]
 8102144:	431a      	orrs	r2, r3
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	681b      	ldr	r3, [r3, #0]
 810214a:	430a      	orrs	r2, r1
 810214c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	681b      	ldr	r3, [r3, #0]
 8102152:	6959      	ldr	r1, [r3, #20]
 8102154:	687b      	ldr	r3, [r7, #4]
 8102156:	681a      	ldr	r2, [r3, #0]
 8102158:	4b27      	ldr	r3, [pc, #156]	; (81021f8 <HAL_LTDC_Init+0x19c>)
 810215a:	400b      	ands	r3, r1
 810215c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102162:	041b      	lsls	r3, r3, #16
 8102164:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	6959      	ldr	r1, [r3, #20]
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102170:	68fb      	ldr	r3, [r7, #12]
 8102172:	431a      	orrs	r2, r3
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	430a      	orrs	r2, r1
 810217a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102182:	021b      	lsls	r3, r3, #8
 8102184:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 810218c:	041b      	lsls	r3, r3, #16
 810218e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102196:	687b      	ldr	r3, [r7, #4]
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 810219e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	681b      	ldr	r3, [r3, #0]
 81021a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81021a6:	68ba      	ldr	r2, [r7, #8]
 81021a8:	68fb      	ldr	r3, [r7, #12]
 81021aa:	4313      	orrs	r3, r2
 81021ac:	687a      	ldr	r2, [r7, #4]
 81021ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 81021b2:	431a      	orrs	r2, r3
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	430a      	orrs	r2, r1
 81021ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	f042 0206 	orr.w	r2, r2, #6
 81021ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	699a      	ldr	r2, [r3, #24]
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	681b      	ldr	r3, [r3, #0]
 81021d6:	f042 0201 	orr.w	r2, r2, #1
 81021da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	2200      	movs	r2, #0
 81021e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	2201      	movs	r2, #1
 81021e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 81021ec:	2300      	movs	r3, #0
}
 81021ee:	4618      	mov	r0, r3
 81021f0:	3710      	adds	r7, #16
 81021f2:	46bd      	mov	sp, r7
 81021f4:	bd80      	pop	{r7, pc}
 81021f6:	bf00      	nop
 81021f8:	f000f800 	.word	0xf000f800

081021fc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 81021fc:	b480      	push	{r7}
 81021fe:	b083      	sub	sp, #12
 8102200:	af00      	add	r7, sp, #0
 8102202:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8102204:	bf00      	nop
 8102206:	370c      	adds	r7, #12
 8102208:	46bd      	mov	sp, r7
 810220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810220e:	4770      	bx	lr

08102210 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8102210:	b5b0      	push	{r4, r5, r7, lr}
 8102212:	b084      	sub	sp, #16
 8102214:	af00      	add	r7, sp, #0
 8102216:	60f8      	str	r0, [r7, #12]
 8102218:	60b9      	str	r1, [r7, #8]
 810221a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 810221c:	68fb      	ldr	r3, [r7, #12]
 810221e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8102222:	2b01      	cmp	r3, #1
 8102224:	d101      	bne.n	810222a <HAL_LTDC_ConfigLayer+0x1a>
 8102226:	2302      	movs	r3, #2
 8102228:	e02c      	b.n	8102284 <HAL_LTDC_ConfigLayer+0x74>
 810222a:	68fb      	ldr	r3, [r7, #12]
 810222c:	2201      	movs	r2, #1
 810222e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8102232:	68fb      	ldr	r3, [r7, #12]
 8102234:	2202      	movs	r2, #2
 8102236:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 810223a:	68fa      	ldr	r2, [r7, #12]
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	2134      	movs	r1, #52	; 0x34
 8102240:	fb01 f303 	mul.w	r3, r1, r3
 8102244:	4413      	add	r3, r2
 8102246:	f103 0238 	add.w	r2, r3, #56	; 0x38
 810224a:	68bb      	ldr	r3, [r7, #8]
 810224c:	4614      	mov	r4, r2
 810224e:	461d      	mov	r5, r3
 8102250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810225a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810225c:	682b      	ldr	r3, [r5, #0]
 810225e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8102260:	687a      	ldr	r2, [r7, #4]
 8102262:	68b9      	ldr	r1, [r7, #8]
 8102264:	68f8      	ldr	r0, [r7, #12]
 8102266:	f000 f811 	bl	810228c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 810226a:	68fb      	ldr	r3, [r7, #12]
 810226c:	681b      	ldr	r3, [r3, #0]
 810226e:	2201      	movs	r2, #1
 8102270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8102272:	68fb      	ldr	r3, [r7, #12]
 8102274:	2201      	movs	r2, #1
 8102276:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 810227a:	68fb      	ldr	r3, [r7, #12]
 810227c:	2200      	movs	r2, #0
 810227e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8102282:	2300      	movs	r3, #0
}
 8102284:	4618      	mov	r0, r3
 8102286:	3710      	adds	r7, #16
 8102288:	46bd      	mov	sp, r7
 810228a:	bdb0      	pop	{r4, r5, r7, pc}

0810228c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 810228c:	b480      	push	{r7}
 810228e:	b089      	sub	sp, #36	; 0x24
 8102290:	af00      	add	r7, sp, #0
 8102292:	60f8      	str	r0, [r7, #12]
 8102294:	60b9      	str	r1, [r7, #8]
 8102296:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8102298:	68bb      	ldr	r3, [r7, #8]
 810229a:	685a      	ldr	r2, [r3, #4]
 810229c:	68fb      	ldr	r3, [r7, #12]
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	68db      	ldr	r3, [r3, #12]
 81022a2:	0c1b      	lsrs	r3, r3, #16
 81022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81022a8:	4413      	add	r3, r2
 81022aa:	041b      	lsls	r3, r3, #16
 81022ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 81022ae:	68fb      	ldr	r3, [r7, #12]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	461a      	mov	r2, r3
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	01db      	lsls	r3, r3, #7
 81022b8:	4413      	add	r3, r2
 81022ba:	3384      	adds	r3, #132	; 0x84
 81022bc:	685b      	ldr	r3, [r3, #4]
 81022be:	68fa      	ldr	r2, [r7, #12]
 81022c0:	6812      	ldr	r2, [r2, #0]
 81022c2:	4611      	mov	r1, r2
 81022c4:	687a      	ldr	r2, [r7, #4]
 81022c6:	01d2      	lsls	r2, r2, #7
 81022c8:	440a      	add	r2, r1
 81022ca:	3284      	adds	r2, #132	; 0x84
 81022cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 81022d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 81022d2:	68bb      	ldr	r3, [r7, #8]
 81022d4:	681a      	ldr	r2, [r3, #0]
 81022d6:	68fb      	ldr	r3, [r7, #12]
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	68db      	ldr	r3, [r3, #12]
 81022dc:	0c1b      	lsrs	r3, r3, #16
 81022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81022e2:	4413      	add	r3, r2
 81022e4:	1c5a      	adds	r2, r3, #1
 81022e6:	68fb      	ldr	r3, [r7, #12]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	4619      	mov	r1, r3
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	01db      	lsls	r3, r3, #7
 81022f0:	440b      	add	r3, r1
 81022f2:	3384      	adds	r3, #132	; 0x84
 81022f4:	4619      	mov	r1, r3
 81022f6:	69fb      	ldr	r3, [r7, #28]
 81022f8:	4313      	orrs	r3, r2
 81022fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 81022fc:	68bb      	ldr	r3, [r7, #8]
 81022fe:	68da      	ldr	r2, [r3, #12]
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	681b      	ldr	r3, [r3, #0]
 8102304:	68db      	ldr	r3, [r3, #12]
 8102306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810230a:	4413      	add	r3, r2
 810230c:	041b      	lsls	r3, r3, #16
 810230e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8102310:	68fb      	ldr	r3, [r7, #12]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	461a      	mov	r2, r3
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	01db      	lsls	r3, r3, #7
 810231a:	4413      	add	r3, r2
 810231c:	3384      	adds	r3, #132	; 0x84
 810231e:	689b      	ldr	r3, [r3, #8]
 8102320:	68fa      	ldr	r2, [r7, #12]
 8102322:	6812      	ldr	r2, [r2, #0]
 8102324:	4611      	mov	r1, r2
 8102326:	687a      	ldr	r2, [r7, #4]
 8102328:	01d2      	lsls	r2, r2, #7
 810232a:	440a      	add	r2, r1
 810232c:	3284      	adds	r2, #132	; 0x84
 810232e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8102332:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8102334:	68bb      	ldr	r3, [r7, #8]
 8102336:	689a      	ldr	r2, [r3, #8]
 8102338:	68fb      	ldr	r3, [r7, #12]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	68db      	ldr	r3, [r3, #12]
 810233e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8102342:	4413      	add	r3, r2
 8102344:	1c5a      	adds	r2, r3, #1
 8102346:	68fb      	ldr	r3, [r7, #12]
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	4619      	mov	r1, r3
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	01db      	lsls	r3, r3, #7
 8102350:	440b      	add	r3, r1
 8102352:	3384      	adds	r3, #132	; 0x84
 8102354:	4619      	mov	r1, r3
 8102356:	69fb      	ldr	r3, [r7, #28]
 8102358:	4313      	orrs	r3, r2
 810235a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 810235c:	68fb      	ldr	r3, [r7, #12]
 810235e:	681b      	ldr	r3, [r3, #0]
 8102360:	461a      	mov	r2, r3
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	01db      	lsls	r3, r3, #7
 8102366:	4413      	add	r3, r2
 8102368:	3384      	adds	r3, #132	; 0x84
 810236a:	691b      	ldr	r3, [r3, #16]
 810236c:	68fa      	ldr	r2, [r7, #12]
 810236e:	6812      	ldr	r2, [r2, #0]
 8102370:	4611      	mov	r1, r2
 8102372:	687a      	ldr	r2, [r7, #4]
 8102374:	01d2      	lsls	r2, r2, #7
 8102376:	440a      	add	r2, r1
 8102378:	3284      	adds	r2, #132	; 0x84
 810237a:	f023 0307 	bic.w	r3, r3, #7
 810237e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8102380:	68fb      	ldr	r3, [r7, #12]
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	461a      	mov	r2, r3
 8102386:	687b      	ldr	r3, [r7, #4]
 8102388:	01db      	lsls	r3, r3, #7
 810238a:	4413      	add	r3, r2
 810238c:	3384      	adds	r3, #132	; 0x84
 810238e:	461a      	mov	r2, r3
 8102390:	68bb      	ldr	r3, [r7, #8]
 8102392:	691b      	ldr	r3, [r3, #16]
 8102394:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8102396:	68bb      	ldr	r3, [r7, #8]
 8102398:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 810239c:	021b      	lsls	r3, r3, #8
 810239e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 81023a0:	68bb      	ldr	r3, [r7, #8]
 81023a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 81023a6:	041b      	lsls	r3, r3, #16
 81023a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 81023aa:	68bb      	ldr	r3, [r7, #8]
 81023ac:	699b      	ldr	r3, [r3, #24]
 81023ae:	061b      	lsls	r3, r3, #24
 81023b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 81023b2:	68fb      	ldr	r3, [r7, #12]
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	461a      	mov	r2, r3
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	01db      	lsls	r3, r3, #7
 81023bc:	4413      	add	r3, r2
 81023be:	3384      	adds	r3, #132	; 0x84
 81023c0:	699b      	ldr	r3, [r3, #24]
 81023c2:	68fb      	ldr	r3, [r7, #12]
 81023c4:	681b      	ldr	r3, [r3, #0]
 81023c6:	461a      	mov	r2, r3
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	01db      	lsls	r3, r3, #7
 81023cc:	4413      	add	r3, r2
 81023ce:	3384      	adds	r3, #132	; 0x84
 81023d0:	461a      	mov	r2, r3
 81023d2:	2300      	movs	r3, #0
 81023d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 81023d6:	68bb      	ldr	r3, [r7, #8]
 81023d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81023dc:	461a      	mov	r2, r3
 81023de:	69fb      	ldr	r3, [r7, #28]
 81023e0:	431a      	orrs	r2, r3
 81023e2:	69bb      	ldr	r3, [r7, #24]
 81023e4:	431a      	orrs	r2, r3
 81023e6:	68fb      	ldr	r3, [r7, #12]
 81023e8:	681b      	ldr	r3, [r3, #0]
 81023ea:	4619      	mov	r1, r3
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	01db      	lsls	r3, r3, #7
 81023f0:	440b      	add	r3, r1
 81023f2:	3384      	adds	r3, #132	; 0x84
 81023f4:	4619      	mov	r1, r3
 81023f6:	697b      	ldr	r3, [r7, #20]
 81023f8:	4313      	orrs	r3, r2
 81023fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 81023fc:	68fb      	ldr	r3, [r7, #12]
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	461a      	mov	r2, r3
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	01db      	lsls	r3, r3, #7
 8102406:	4413      	add	r3, r2
 8102408:	3384      	adds	r3, #132	; 0x84
 810240a:	695b      	ldr	r3, [r3, #20]
 810240c:	68fa      	ldr	r2, [r7, #12]
 810240e:	6812      	ldr	r2, [r2, #0]
 8102410:	4611      	mov	r1, r2
 8102412:	687a      	ldr	r2, [r7, #4]
 8102414:	01d2      	lsls	r2, r2, #7
 8102416:	440a      	add	r2, r1
 8102418:	3284      	adds	r2, #132	; 0x84
 810241a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810241e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8102420:	68fb      	ldr	r3, [r7, #12]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	461a      	mov	r2, r3
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	01db      	lsls	r3, r3, #7
 810242a:	4413      	add	r3, r2
 810242c:	3384      	adds	r3, #132	; 0x84
 810242e:	461a      	mov	r2, r3
 8102430:	68bb      	ldr	r3, [r7, #8]
 8102432:	695b      	ldr	r3, [r3, #20]
 8102434:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8102436:	68fb      	ldr	r3, [r7, #12]
 8102438:	681b      	ldr	r3, [r3, #0]
 810243a:	461a      	mov	r2, r3
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	01db      	lsls	r3, r3, #7
 8102440:	4413      	add	r3, r2
 8102442:	3384      	adds	r3, #132	; 0x84
 8102444:	69db      	ldr	r3, [r3, #28]
 8102446:	68fa      	ldr	r2, [r7, #12]
 8102448:	6812      	ldr	r2, [r2, #0]
 810244a:	4611      	mov	r1, r2
 810244c:	687a      	ldr	r2, [r7, #4]
 810244e:	01d2      	lsls	r2, r2, #7
 8102450:	440a      	add	r2, r1
 8102452:	3284      	adds	r2, #132	; 0x84
 8102454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8102458:	f023 0307 	bic.w	r3, r3, #7
 810245c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 810245e:	68bb      	ldr	r3, [r7, #8]
 8102460:	69da      	ldr	r2, [r3, #28]
 8102462:	68bb      	ldr	r3, [r7, #8]
 8102464:	6a1b      	ldr	r3, [r3, #32]
 8102466:	68f9      	ldr	r1, [r7, #12]
 8102468:	6809      	ldr	r1, [r1, #0]
 810246a:	4608      	mov	r0, r1
 810246c:	6879      	ldr	r1, [r7, #4]
 810246e:	01c9      	lsls	r1, r1, #7
 8102470:	4401      	add	r1, r0
 8102472:	3184      	adds	r1, #132	; 0x84
 8102474:	4313      	orrs	r3, r2
 8102476:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8102478:	68fb      	ldr	r3, [r7, #12]
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	461a      	mov	r2, r3
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	01db      	lsls	r3, r3, #7
 8102482:	4413      	add	r3, r2
 8102484:	3384      	adds	r3, #132	; 0x84
 8102486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102488:	68fb      	ldr	r3, [r7, #12]
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	461a      	mov	r2, r3
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	01db      	lsls	r3, r3, #7
 8102492:	4413      	add	r3, r2
 8102494:	3384      	adds	r3, #132	; 0x84
 8102496:	461a      	mov	r2, r3
 8102498:	2300      	movs	r3, #0
 810249a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 810249c:	68fb      	ldr	r3, [r7, #12]
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	461a      	mov	r2, r3
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	01db      	lsls	r3, r3, #7
 81024a6:	4413      	add	r3, r2
 81024a8:	3384      	adds	r3, #132	; 0x84
 81024aa:	461a      	mov	r2, r3
 81024ac:	68bb      	ldr	r3, [r7, #8]
 81024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024b0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 81024b2:	68bb      	ldr	r3, [r7, #8]
 81024b4:	691b      	ldr	r3, [r3, #16]
 81024b6:	2b00      	cmp	r3, #0
 81024b8:	d102      	bne.n	81024c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 81024ba:	2304      	movs	r3, #4
 81024bc:	61fb      	str	r3, [r7, #28]
 81024be:	e01b      	b.n	81024f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 81024c0:	68bb      	ldr	r3, [r7, #8]
 81024c2:	691b      	ldr	r3, [r3, #16]
 81024c4:	2b01      	cmp	r3, #1
 81024c6:	d102      	bne.n	81024ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 81024c8:	2303      	movs	r3, #3
 81024ca:	61fb      	str	r3, [r7, #28]
 81024cc:	e014      	b.n	81024f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 81024ce:	68bb      	ldr	r3, [r7, #8]
 81024d0:	691b      	ldr	r3, [r3, #16]
 81024d2:	2b04      	cmp	r3, #4
 81024d4:	d00b      	beq.n	81024ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 81024d6:	68bb      	ldr	r3, [r7, #8]
 81024d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 81024da:	2b02      	cmp	r3, #2
 81024dc:	d007      	beq.n	81024ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 81024de:	68bb      	ldr	r3, [r7, #8]
 81024e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 81024e2:	2b03      	cmp	r3, #3
 81024e4:	d003      	beq.n	81024ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 81024e6:	68bb      	ldr	r3, [r7, #8]
 81024e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 81024ea:	2b07      	cmp	r3, #7
 81024ec:	d102      	bne.n	81024f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 81024ee:	2302      	movs	r3, #2
 81024f0:	61fb      	str	r3, [r7, #28]
 81024f2:	e001      	b.n	81024f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 81024f4:	2301      	movs	r3, #1
 81024f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 81024f8:	68fb      	ldr	r3, [r7, #12]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	461a      	mov	r2, r3
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	01db      	lsls	r3, r3, #7
 8102502:	4413      	add	r3, r2
 8102504:	3384      	adds	r3, #132	; 0x84
 8102506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102508:	68fa      	ldr	r2, [r7, #12]
 810250a:	6812      	ldr	r2, [r2, #0]
 810250c:	4611      	mov	r1, r2
 810250e:	687a      	ldr	r2, [r7, #4]
 8102510:	01d2      	lsls	r2, r2, #7
 8102512:	440a      	add	r2, r1
 8102514:	3284      	adds	r2, #132	; 0x84
 8102516:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 810251a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 810251c:	68bb      	ldr	r3, [r7, #8]
 810251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102520:	69fa      	ldr	r2, [r7, #28]
 8102522:	fb02 f303 	mul.w	r3, r2, r3
 8102526:	041a      	lsls	r2, r3, #16
 8102528:	68bb      	ldr	r3, [r7, #8]
 810252a:	6859      	ldr	r1, [r3, #4]
 810252c:	68bb      	ldr	r3, [r7, #8]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	1acb      	subs	r3, r1, r3
 8102532:	69f9      	ldr	r1, [r7, #28]
 8102534:	fb01 f303 	mul.w	r3, r1, r3
 8102538:	3307      	adds	r3, #7
 810253a:	68f9      	ldr	r1, [r7, #12]
 810253c:	6809      	ldr	r1, [r1, #0]
 810253e:	4608      	mov	r0, r1
 8102540:	6879      	ldr	r1, [r7, #4]
 8102542:	01c9      	lsls	r1, r1, #7
 8102544:	4401      	add	r1, r0
 8102546:	3184      	adds	r1, #132	; 0x84
 8102548:	4313      	orrs	r3, r2
 810254a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 810254c:	68fb      	ldr	r3, [r7, #12]
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	461a      	mov	r2, r3
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	01db      	lsls	r3, r3, #7
 8102556:	4413      	add	r3, r2
 8102558:	3384      	adds	r3, #132	; 0x84
 810255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810255c:	68fa      	ldr	r2, [r7, #12]
 810255e:	6812      	ldr	r2, [r2, #0]
 8102560:	4611      	mov	r1, r2
 8102562:	687a      	ldr	r2, [r7, #4]
 8102564:	01d2      	lsls	r2, r2, #7
 8102566:	440a      	add	r2, r1
 8102568:	3284      	adds	r2, #132	; 0x84
 810256a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 810256e:	f023 0307 	bic.w	r3, r3, #7
 8102572:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8102574:	68fb      	ldr	r3, [r7, #12]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	461a      	mov	r2, r3
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	01db      	lsls	r3, r3, #7
 810257e:	4413      	add	r3, r2
 8102580:	3384      	adds	r3, #132	; 0x84
 8102582:	461a      	mov	r2, r3
 8102584:	68bb      	ldr	r3, [r7, #8]
 8102586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102588:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 810258a:	68fb      	ldr	r3, [r7, #12]
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	461a      	mov	r2, r3
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	01db      	lsls	r3, r3, #7
 8102594:	4413      	add	r3, r2
 8102596:	3384      	adds	r3, #132	; 0x84
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	68fa      	ldr	r2, [r7, #12]
 810259c:	6812      	ldr	r2, [r2, #0]
 810259e:	4611      	mov	r1, r2
 81025a0:	687a      	ldr	r2, [r7, #4]
 81025a2:	01d2      	lsls	r2, r2, #7
 81025a4:	440a      	add	r2, r1
 81025a6:	3284      	adds	r2, #132	; 0x84
 81025a8:	f043 0301 	orr.w	r3, r3, #1
 81025ac:	6013      	str	r3, [r2, #0]
}
 81025ae:	bf00      	nop
 81025b0:	3724      	adds	r7, #36	; 0x24
 81025b2:	46bd      	mov	sp, r7
 81025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025b8:	4770      	bx	lr
	...

081025bc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81025bc:	b580      	push	{r7, lr}
 81025be:	b084      	sub	sp, #16
 81025c0:	af00      	add	r7, sp, #0
 81025c2:	60f8      	str	r0, [r7, #12]
 81025c4:	460b      	mov	r3, r1
 81025c6:	607a      	str	r2, [r7, #4]
 81025c8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81025ca:	4b37      	ldr	r3, [pc, #220]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81025cc:	681b      	ldr	r3, [r3, #0]
 81025ce:	f023 0201 	bic.w	r2, r3, #1
 81025d2:	4935      	ldr	r1, [pc, #212]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81025d4:	68fb      	ldr	r3, [r7, #12]
 81025d6:	4313      	orrs	r3, r2
 81025d8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d123      	bne.n	8102628 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81025e0:	f7ff f8ea 	bl	81017b8 <HAL_GetCurrentCPUID>
 81025e4:	4603      	mov	r3, r0
 81025e6:	2b03      	cmp	r3, #3
 81025e8:	d158      	bne.n	810269c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81025ea:	4b2f      	ldr	r3, [pc, #188]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81025ec:	691b      	ldr	r3, [r3, #16]
 81025ee:	4a2e      	ldr	r2, [pc, #184]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81025f0:	f023 0301 	bic.w	r3, r3, #1
 81025f4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81025f6:	4b2d      	ldr	r3, [pc, #180]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 81025f8:	691b      	ldr	r3, [r3, #16]
 81025fa:	4a2c      	ldr	r2, [pc, #176]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 81025fc:	f043 0304 	orr.w	r3, r3, #4
 8102600:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102602:	f3bf 8f4f 	dsb	sy
}
 8102606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102608:	f3bf 8f6f 	isb	sy
}
 810260c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810260e:	7afb      	ldrb	r3, [r7, #11]
 8102610:	2b01      	cmp	r3, #1
 8102612:	d101      	bne.n	8102618 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102614:	bf30      	wfi
 8102616:	e000      	b.n	810261a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102618:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810261a:	4b24      	ldr	r3, [pc, #144]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810261c:	691b      	ldr	r3, [r3, #16]
 810261e:	4a23      	ldr	r2, [pc, #140]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102620:	f023 0304 	bic.w	r3, r3, #4
 8102624:	6113      	str	r3, [r2, #16]
 8102626:	e03c      	b.n	81026a2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	2b01      	cmp	r3, #1
 810262c:	d123      	bne.n	8102676 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810262e:	f7ff f8c3 	bl	81017b8 <HAL_GetCurrentCPUID>
 8102632:	4603      	mov	r3, r0
 8102634:	2b01      	cmp	r3, #1
 8102636:	d133      	bne.n	81026a0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102638:	4b1b      	ldr	r3, [pc, #108]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810263a:	695b      	ldr	r3, [r3, #20]
 810263c:	4a1a      	ldr	r2, [pc, #104]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810263e:	f023 0302 	bic.w	r3, r3, #2
 8102642:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102644:	4b19      	ldr	r3, [pc, #100]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102646:	691b      	ldr	r3, [r3, #16]
 8102648:	4a18      	ldr	r2, [pc, #96]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810264a:	f043 0304 	orr.w	r3, r3, #4
 810264e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102650:	f3bf 8f4f 	dsb	sy
}
 8102654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102656:	f3bf 8f6f 	isb	sy
}
 810265a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810265c:	7afb      	ldrb	r3, [r7, #11]
 810265e:	2b01      	cmp	r3, #1
 8102660:	d101      	bne.n	8102666 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102662:	bf30      	wfi
 8102664:	e000      	b.n	8102668 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102666:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102668:	4b10      	ldr	r3, [pc, #64]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810266a:	691b      	ldr	r3, [r3, #16]
 810266c:	4a0f      	ldr	r2, [pc, #60]	; (81026ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810266e:	f023 0304 	bic.w	r3, r3, #4
 8102672:	6113      	str	r3, [r2, #16]
 8102674:	e015      	b.n	81026a2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102676:	f7ff f89f 	bl	81017b8 <HAL_GetCurrentCPUID>
 810267a:	4603      	mov	r3, r0
 810267c:	2b03      	cmp	r3, #3
 810267e:	d106      	bne.n	810268e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102680:	4b09      	ldr	r3, [pc, #36]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102682:	691b      	ldr	r3, [r3, #16]
 8102684:	4a08      	ldr	r2, [pc, #32]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102686:	f023 0304 	bic.w	r3, r3, #4
 810268a:	6113      	str	r3, [r2, #16]
 810268c:	e009      	b.n	81026a2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810268e:	4b06      	ldr	r3, [pc, #24]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102690:	695b      	ldr	r3, [r3, #20]
 8102692:	4a05      	ldr	r2, [pc, #20]	; (81026a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102694:	f023 0304 	bic.w	r3, r3, #4
 8102698:	6153      	str	r3, [r2, #20]
 810269a:	e002      	b.n	81026a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810269c:	bf00      	nop
 810269e:	e000      	b.n	81026a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81026a0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81026a2:	3710      	adds	r7, #16
 81026a4:	46bd      	mov	sp, r7
 81026a6:	bd80      	pop	{r7, pc}
 81026a8:	58024800 	.word	0x58024800
 81026ac:	e000ed00 	.word	0xe000ed00

081026b0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81026b0:	b580      	push	{r7, lr}
 81026b2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81026b4:	f7ff f880 	bl	81017b8 <HAL_GetCurrentCPUID>
 81026b8:	4603      	mov	r3, r0
 81026ba:	2b03      	cmp	r3, #3
 81026bc:	d101      	bne.n	81026c2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81026be:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81026c0:	e001      	b.n	81026c6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81026c2:	bf40      	sev
    __WFE ();
 81026c4:	bf20      	wfe
}
 81026c6:	bf00      	nop
 81026c8:	bd80      	pop	{r7, pc}
	...

081026cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81026cc:	b480      	push	{r7}
 81026ce:	b089      	sub	sp, #36	; 0x24
 81026d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81026d2:	4bb3      	ldr	r3, [pc, #716]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81026d4:	691b      	ldr	r3, [r3, #16]
 81026d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81026da:	2b18      	cmp	r3, #24
 81026dc:	f200 8155 	bhi.w	810298a <HAL_RCC_GetSysClockFreq+0x2be>
 81026e0:	a201      	add	r2, pc, #4	; (adr r2, 81026e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81026e6:	bf00      	nop
 81026e8:	0810274d 	.word	0x0810274d
 81026ec:	0810298b 	.word	0x0810298b
 81026f0:	0810298b 	.word	0x0810298b
 81026f4:	0810298b 	.word	0x0810298b
 81026f8:	0810298b 	.word	0x0810298b
 81026fc:	0810298b 	.word	0x0810298b
 8102700:	0810298b 	.word	0x0810298b
 8102704:	0810298b 	.word	0x0810298b
 8102708:	08102773 	.word	0x08102773
 810270c:	0810298b 	.word	0x0810298b
 8102710:	0810298b 	.word	0x0810298b
 8102714:	0810298b 	.word	0x0810298b
 8102718:	0810298b 	.word	0x0810298b
 810271c:	0810298b 	.word	0x0810298b
 8102720:	0810298b 	.word	0x0810298b
 8102724:	0810298b 	.word	0x0810298b
 8102728:	08102779 	.word	0x08102779
 810272c:	0810298b 	.word	0x0810298b
 8102730:	0810298b 	.word	0x0810298b
 8102734:	0810298b 	.word	0x0810298b
 8102738:	0810298b 	.word	0x0810298b
 810273c:	0810298b 	.word	0x0810298b
 8102740:	0810298b 	.word	0x0810298b
 8102744:	0810298b 	.word	0x0810298b
 8102748:	0810277f 	.word	0x0810277f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810274c:	4b94      	ldr	r3, [pc, #592]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	f003 0320 	and.w	r3, r3, #32
 8102754:	2b00      	cmp	r3, #0
 8102756:	d009      	beq.n	810276c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102758:	4b91      	ldr	r3, [pc, #580]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810275a:	681b      	ldr	r3, [r3, #0]
 810275c:	08db      	lsrs	r3, r3, #3
 810275e:	f003 0303 	and.w	r3, r3, #3
 8102762:	4a90      	ldr	r2, [pc, #576]	; (81029a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102764:	fa22 f303 	lsr.w	r3, r2, r3
 8102768:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810276a:	e111      	b.n	8102990 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810276c:	4b8d      	ldr	r3, [pc, #564]	; (81029a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810276e:	61bb      	str	r3, [r7, #24]
    break;
 8102770:	e10e      	b.n	8102990 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102772:	4b8d      	ldr	r3, [pc, #564]	; (81029a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102774:	61bb      	str	r3, [r7, #24]
    break;
 8102776:	e10b      	b.n	8102990 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102778:	4b8c      	ldr	r3, [pc, #560]	; (81029ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 810277a:	61bb      	str	r3, [r7, #24]
    break;
 810277c:	e108      	b.n	8102990 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810277e:	4b88      	ldr	r3, [pc, #544]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102782:	f003 0303 	and.w	r3, r3, #3
 8102786:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102788:	4b85      	ldr	r3, [pc, #532]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810278c:	091b      	lsrs	r3, r3, #4
 810278e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102792:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102794:	4b82      	ldr	r3, [pc, #520]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102798:	f003 0301 	and.w	r3, r3, #1
 810279c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810279e:	4b80      	ldr	r3, [pc, #512]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81027a2:	08db      	lsrs	r3, r3, #3
 81027a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81027a8:	68fa      	ldr	r2, [r7, #12]
 81027aa:	fb02 f303 	mul.w	r3, r2, r3
 81027ae:	ee07 3a90 	vmov	s15, r3
 81027b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81027ba:	693b      	ldr	r3, [r7, #16]
 81027bc:	2b00      	cmp	r3, #0
 81027be:	f000 80e1 	beq.w	8102984 <HAL_RCC_GetSysClockFreq+0x2b8>
 81027c2:	697b      	ldr	r3, [r7, #20]
 81027c4:	2b02      	cmp	r3, #2
 81027c6:	f000 8083 	beq.w	81028d0 <HAL_RCC_GetSysClockFreq+0x204>
 81027ca:	697b      	ldr	r3, [r7, #20]
 81027cc:	2b02      	cmp	r3, #2
 81027ce:	f200 80a1 	bhi.w	8102914 <HAL_RCC_GetSysClockFreq+0x248>
 81027d2:	697b      	ldr	r3, [r7, #20]
 81027d4:	2b00      	cmp	r3, #0
 81027d6:	d003      	beq.n	81027e0 <HAL_RCC_GetSysClockFreq+0x114>
 81027d8:	697b      	ldr	r3, [r7, #20]
 81027da:	2b01      	cmp	r3, #1
 81027dc:	d056      	beq.n	810288c <HAL_RCC_GetSysClockFreq+0x1c0>
 81027de:	e099      	b.n	8102914 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81027e0:	4b6f      	ldr	r3, [pc, #444]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	f003 0320 	and.w	r3, r3, #32
 81027e8:	2b00      	cmp	r3, #0
 81027ea:	d02d      	beq.n	8102848 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81027ec:	4b6c      	ldr	r3, [pc, #432]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	08db      	lsrs	r3, r3, #3
 81027f2:	f003 0303 	and.w	r3, r3, #3
 81027f6:	4a6b      	ldr	r2, [pc, #428]	; (81029a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81027f8:	fa22 f303 	lsr.w	r3, r2, r3
 81027fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	ee07 3a90 	vmov	s15, r3
 8102804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102808:	693b      	ldr	r3, [r7, #16]
 810280a:	ee07 3a90 	vmov	s15, r3
 810280e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102816:	4b62      	ldr	r3, [pc, #392]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810281a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810281e:	ee07 3a90 	vmov	s15, r3
 8102822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102826:	ed97 6a02 	vldr	s12, [r7, #8]
 810282a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810282e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810283a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102842:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102846:	e087      	b.n	8102958 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102848:	693b      	ldr	r3, [r7, #16]
 810284a:	ee07 3a90 	vmov	s15, r3
 810284e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102852:	eddf 6a58 	vldr	s13, [pc, #352]	; 81029b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810285a:	4b51      	ldr	r3, [pc, #324]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810285e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102862:	ee07 3a90 	vmov	s15, r3
 8102866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810286a:	ed97 6a02 	vldr	s12, [r7, #8]
 810286e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810287a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810287e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810288a:	e065      	b.n	8102958 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810288c:	693b      	ldr	r3, [r7, #16]
 810288e:	ee07 3a90 	vmov	s15, r3
 8102892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102896:	eddf 6a48 	vldr	s13, [pc, #288]	; 81029b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810289a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810289e:	4b40      	ldr	r3, [pc, #256]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81028a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028a6:	ee07 3a90 	vmov	s15, r3
 81028aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81028b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81028ce:	e043      	b.n	8102958 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81028d0:	693b      	ldr	r3, [r7, #16]
 81028d2:	ee07 3a90 	vmov	s15, r3
 81028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028da:	eddf 6a38 	vldr	s13, [pc, #224]	; 81029bc <HAL_RCC_GetSysClockFreq+0x2f0>
 81028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028e2:	4b2f      	ldr	r3, [pc, #188]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028ea:	ee07 3a90 	vmov	s15, r3
 81028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81028f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810290e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102912:	e021      	b.n	8102958 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102914:	693b      	ldr	r3, [r7, #16]
 8102916:	ee07 3a90 	vmov	s15, r3
 810291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810291e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81029b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102926:	4b1e      	ldr	r3, [pc, #120]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810292e:	ee07 3a90 	vmov	s15, r3
 8102932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102936:	ed97 6a02 	vldr	s12, [r7, #8]
 810293a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81029b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102956:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102958:	4b11      	ldr	r3, [pc, #68]	; (81029a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810295c:	0a5b      	lsrs	r3, r3, #9
 810295e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102962:	3301      	adds	r3, #1
 8102964:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102966:	683b      	ldr	r3, [r7, #0]
 8102968:	ee07 3a90 	vmov	s15, r3
 810296c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102970:	edd7 6a07 	vldr	s13, [r7, #28]
 8102974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810297c:	ee17 3a90 	vmov	r3, s15
 8102980:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102982:	e005      	b.n	8102990 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102984:	2300      	movs	r3, #0
 8102986:	61bb      	str	r3, [r7, #24]
    break;
 8102988:	e002      	b.n	8102990 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810298a:	4b07      	ldr	r3, [pc, #28]	; (81029a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810298c:	61bb      	str	r3, [r7, #24]
    break;
 810298e:	bf00      	nop
  }

  return sysclockfreq;
 8102990:	69bb      	ldr	r3, [r7, #24]
}
 8102992:	4618      	mov	r0, r3
 8102994:	3724      	adds	r7, #36	; 0x24
 8102996:	46bd      	mov	sp, r7
 8102998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810299c:	4770      	bx	lr
 810299e:	bf00      	nop
 81029a0:	58024400 	.word	0x58024400
 81029a4:	03d09000 	.word	0x03d09000
 81029a8:	003d0900 	.word	0x003d0900
 81029ac:	016e3600 	.word	0x016e3600
 81029b0:	46000000 	.word	0x46000000
 81029b4:	4c742400 	.word	0x4c742400
 81029b8:	4a742400 	.word	0x4a742400
 81029bc:	4bb71b00 	.word	0x4bb71b00

081029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81029c0:	b580      	push	{r7, lr}
 81029c2:	b086      	sub	sp, #24
 81029c4:	af00      	add	r7, sp, #0
 81029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81029c8:	2300      	movs	r3, #0
 81029ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81029cc:	2300      	movs	r3, #0
 81029ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81029d8:	2b00      	cmp	r3, #0
 81029da:	d03f      	beq.n	8102a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81029e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81029e4:	d02a      	beq.n	8102a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81029e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81029ea:	d824      	bhi.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81029ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81029f0:	d018      	beq.n	8102a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81029f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81029f6:	d81e      	bhi.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81029f8:	2b00      	cmp	r3, #0
 81029fa:	d003      	beq.n	8102a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81029fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102a00:	d007      	beq.n	8102a12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102a02:	e018      	b.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a04:	4bab      	ldr	r3, [pc, #684]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a08:	4aaa      	ldr	r2, [pc, #680]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102a10:	e015      	b.n	8102a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	3304      	adds	r3, #4
 8102a16:	2102      	movs	r1, #2
 8102a18:	4618      	mov	r0, r3
 8102a1a:	f000 ff11 	bl	8103840 <RCCEx_PLL2_Config>
 8102a1e:	4603      	mov	r3, r0
 8102a20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102a22:	e00c      	b.n	8102a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	3324      	adds	r3, #36	; 0x24
 8102a28:	2102      	movs	r1, #2
 8102a2a:	4618      	mov	r0, r3
 8102a2c:	f000 ffba 	bl	81039a4 <RCCEx_PLL3_Config>
 8102a30:	4603      	mov	r3, r0
 8102a32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102a34:	e003      	b.n	8102a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a36:	2301      	movs	r3, #1
 8102a38:	75fb      	strb	r3, [r7, #23]
      break;
 8102a3a:	e000      	b.n	8102a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a3e:	7dfb      	ldrb	r3, [r7, #23]
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	d109      	bne.n	8102a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102a44:	4b9b      	ldr	r3, [pc, #620]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102a50:	4998      	ldr	r1, [pc, #608]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a52:	4313      	orrs	r3, r2
 8102a54:	650b      	str	r3, [r1, #80]	; 0x50
 8102a56:	e001      	b.n	8102a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a58:	7dfb      	ldrb	r3, [r7, #23]
 8102a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	d03d      	beq.n	8102ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a6c:	2b04      	cmp	r3, #4
 8102a6e:	d826      	bhi.n	8102abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102a70:	a201      	add	r2, pc, #4	; (adr r2, 8102a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a76:	bf00      	nop
 8102a78:	08102a8d 	.word	0x08102a8d
 8102a7c:	08102a9b 	.word	0x08102a9b
 8102a80:	08102aad 	.word	0x08102aad
 8102a84:	08102ac5 	.word	0x08102ac5
 8102a88:	08102ac5 	.word	0x08102ac5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a8c:	4b89      	ldr	r3, [pc, #548]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a90:	4a88      	ldr	r2, [pc, #544]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102a98:	e015      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	3304      	adds	r3, #4
 8102a9e:	2100      	movs	r1, #0
 8102aa0:	4618      	mov	r0, r3
 8102aa2:	f000 fecd 	bl	8103840 <RCCEx_PLL2_Config>
 8102aa6:	4603      	mov	r3, r0
 8102aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102aaa:	e00c      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	3324      	adds	r3, #36	; 0x24
 8102ab0:	2100      	movs	r1, #0
 8102ab2:	4618      	mov	r0, r3
 8102ab4:	f000 ff76 	bl	81039a4 <RCCEx_PLL3_Config>
 8102ab8:	4603      	mov	r3, r0
 8102aba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102abc:	e003      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102abe:	2301      	movs	r3, #1
 8102ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8102ac2:	e000      	b.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ac6:	7dfb      	ldrb	r3, [r7, #23]
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	d109      	bne.n	8102ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102acc:	4b79      	ldr	r3, [pc, #484]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ad0:	f023 0207 	bic.w	r2, r3, #7
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ad8:	4976      	ldr	r1, [pc, #472]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ada:	4313      	orrs	r3, r2
 8102adc:	650b      	str	r3, [r1, #80]	; 0x50
 8102ade:	e001      	b.n	8102ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ae0:	7dfb      	ldrb	r3, [r7, #23]
 8102ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	681b      	ldr	r3, [r3, #0]
 8102ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102aec:	2b00      	cmp	r3, #0
 8102aee:	d042      	beq.n	8102b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102af8:	d02b      	beq.n	8102b52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102afe:	d825      	bhi.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b00:	2bc0      	cmp	r3, #192	; 0xc0
 8102b02:	d028      	beq.n	8102b56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102b04:	2bc0      	cmp	r3, #192	; 0xc0
 8102b06:	d821      	bhi.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b08:	2b80      	cmp	r3, #128	; 0x80
 8102b0a:	d016      	beq.n	8102b3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102b0c:	2b80      	cmp	r3, #128	; 0x80
 8102b0e:	d81d      	bhi.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102b10:	2b00      	cmp	r3, #0
 8102b12:	d002      	beq.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102b14:	2b40      	cmp	r3, #64	; 0x40
 8102b16:	d007      	beq.n	8102b28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102b18:	e018      	b.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b1a:	4b66      	ldr	r3, [pc, #408]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b1e:	4a65      	ldr	r2, [pc, #404]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102b26:	e017      	b.n	8102b58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	3304      	adds	r3, #4
 8102b2c:	2100      	movs	r1, #0
 8102b2e:	4618      	mov	r0, r3
 8102b30:	f000 fe86 	bl	8103840 <RCCEx_PLL2_Config>
 8102b34:	4603      	mov	r3, r0
 8102b36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102b38:	e00e      	b.n	8102b58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	3324      	adds	r3, #36	; 0x24
 8102b3e:	2100      	movs	r1, #0
 8102b40:	4618      	mov	r0, r3
 8102b42:	f000 ff2f 	bl	81039a4 <RCCEx_PLL3_Config>
 8102b46:	4603      	mov	r3, r0
 8102b48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102b4a:	e005      	b.n	8102b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b4c:	2301      	movs	r3, #1
 8102b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8102b50:	e002      	b.n	8102b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102b52:	bf00      	nop
 8102b54:	e000      	b.n	8102b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b58:	7dfb      	ldrb	r3, [r7, #23]
 8102b5a:	2b00      	cmp	r3, #0
 8102b5c:	d109      	bne.n	8102b72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102b5e:	4b55      	ldr	r3, [pc, #340]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102b62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b6a:	4952      	ldr	r1, [pc, #328]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102b6c:	4313      	orrs	r3, r2
 8102b6e:	650b      	str	r3, [r1, #80]	; 0x50
 8102b70:	e001      	b.n	8102b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b72:	7dfb      	ldrb	r3, [r7, #23]
 8102b74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	681b      	ldr	r3, [r3, #0]
 8102b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d049      	beq.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102b88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102b8c:	d030      	beq.n	8102bf0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102b8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102b92:	d82a      	bhi.n	8102bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102b94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102b98:	d02c      	beq.n	8102bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102b9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102b9e:	d824      	bhi.n	8102bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102ba4:	d018      	beq.n	8102bd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102baa:	d81e      	bhi.n	8102bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102bac:	2b00      	cmp	r3, #0
 8102bae:	d003      	beq.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102bb4:	d007      	beq.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102bb6:	e018      	b.n	8102bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102bb8:	4b3e      	ldr	r3, [pc, #248]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bbc:	4a3d      	ldr	r2, [pc, #244]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102bc4:	e017      	b.n	8102bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	3304      	adds	r3, #4
 8102bca:	2100      	movs	r1, #0
 8102bcc:	4618      	mov	r0, r3
 8102bce:	f000 fe37 	bl	8103840 <RCCEx_PLL2_Config>
 8102bd2:	4603      	mov	r3, r0
 8102bd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102bd6:	e00e      	b.n	8102bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	3324      	adds	r3, #36	; 0x24
 8102bdc:	2100      	movs	r1, #0
 8102bde:	4618      	mov	r0, r3
 8102be0:	f000 fee0 	bl	81039a4 <RCCEx_PLL3_Config>
 8102be4:	4603      	mov	r3, r0
 8102be6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102be8:	e005      	b.n	8102bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102bea:	2301      	movs	r3, #1
 8102bec:	75fb      	strb	r3, [r7, #23]
      break;
 8102bee:	e002      	b.n	8102bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102bf0:	bf00      	nop
 8102bf2:	e000      	b.n	8102bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102bf6:	7dfb      	ldrb	r3, [r7, #23]
 8102bf8:	2b00      	cmp	r3, #0
 8102bfa:	d10a      	bne.n	8102c12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102bfc:	4b2d      	ldr	r3, [pc, #180]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102c0a:	492a      	ldr	r1, [pc, #168]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c0c:	4313      	orrs	r3, r2
 8102c0e:	658b      	str	r3, [r1, #88]	; 0x58
 8102c10:	e001      	b.n	8102c16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c12:	7dfb      	ldrb	r3, [r7, #23]
 8102c14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102c16:	687b      	ldr	r3, [r7, #4]
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102c1e:	2b00      	cmp	r3, #0
 8102c20:	d04c      	beq.n	8102cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102c2c:	d030      	beq.n	8102c90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102c32:	d82a      	bhi.n	8102c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102c34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102c38:	d02c      	beq.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8102c3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102c3e:	d824      	bhi.n	8102c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102c44:	d018      	beq.n	8102c78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102c4a:	d81e      	bhi.n	8102c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102c4c:	2b00      	cmp	r3, #0
 8102c4e:	d003      	beq.n	8102c58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102c54:	d007      	beq.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102c56:	e018      	b.n	8102c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c58:	4b16      	ldr	r3, [pc, #88]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c5c:	4a15      	ldr	r2, [pc, #84]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102c64:	e017      	b.n	8102c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	3304      	adds	r3, #4
 8102c6a:	2100      	movs	r1, #0
 8102c6c:	4618      	mov	r0, r3
 8102c6e:	f000 fde7 	bl	8103840 <RCCEx_PLL2_Config>
 8102c72:	4603      	mov	r3, r0
 8102c74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102c76:	e00e      	b.n	8102c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	3324      	adds	r3, #36	; 0x24
 8102c7c:	2100      	movs	r1, #0
 8102c7e:	4618      	mov	r0, r3
 8102c80:	f000 fe90 	bl	81039a4 <RCCEx_PLL3_Config>
 8102c84:	4603      	mov	r3, r0
 8102c86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102c88:	e005      	b.n	8102c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102c8a:	2301      	movs	r3, #1
 8102c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8102c8e:	e002      	b.n	8102c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102c90:	bf00      	nop
 8102c92:	e000      	b.n	8102c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c96:	7dfb      	ldrb	r3, [r7, #23]
 8102c98:	2b00      	cmp	r3, #0
 8102c9a:	d10d      	bne.n	8102cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102c9c:	4b05      	ldr	r3, [pc, #20]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ca0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102caa:	4902      	ldr	r1, [pc, #8]	; (8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102cac:	4313      	orrs	r3, r2
 8102cae:	658b      	str	r3, [r1, #88]	; 0x58
 8102cb0:	e004      	b.n	8102cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102cb2:	bf00      	nop
 8102cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cb8:	7dfb      	ldrb	r3, [r7, #23]
 8102cba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102cc4:	2b00      	cmp	r3, #0
 8102cc6:	d032      	beq.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102ccc:	2b30      	cmp	r3, #48	; 0x30
 8102cce:	d01c      	beq.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102cd0:	2b30      	cmp	r3, #48	; 0x30
 8102cd2:	d817      	bhi.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102cd4:	2b20      	cmp	r3, #32
 8102cd6:	d00c      	beq.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8102cd8:	2b20      	cmp	r3, #32
 8102cda:	d813      	bhi.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102cdc:	2b00      	cmp	r3, #0
 8102cde:	d016      	beq.n	8102d0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8102ce0:	2b10      	cmp	r3, #16
 8102ce2:	d10f      	bne.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ce4:	4baf      	ldr	r3, [pc, #700]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ce8:	4aae      	ldr	r2, [pc, #696]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102cf0:	e00e      	b.n	8102d10 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	3304      	adds	r3, #4
 8102cf6:	2102      	movs	r1, #2
 8102cf8:	4618      	mov	r0, r3
 8102cfa:	f000 fda1 	bl	8103840 <RCCEx_PLL2_Config>
 8102cfe:	4603      	mov	r3, r0
 8102d00:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102d02:	e005      	b.n	8102d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102d04:	2301      	movs	r3, #1
 8102d06:	75fb      	strb	r3, [r7, #23]
      break;
 8102d08:	e002      	b.n	8102d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102d0a:	bf00      	nop
 8102d0c:	e000      	b.n	8102d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d10:	7dfb      	ldrb	r3, [r7, #23]
 8102d12:	2b00      	cmp	r3, #0
 8102d14:	d109      	bne.n	8102d2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102d16:	4ba3      	ldr	r3, [pc, #652]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102d1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102d22:	49a0      	ldr	r1, [pc, #640]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102d24:	4313      	orrs	r3, r2
 8102d26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102d28:	e001      	b.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d2a:	7dfb      	ldrb	r3, [r7, #23]
 8102d2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d047      	beq.n	8102dca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102d42:	d030      	beq.n	8102da6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8102d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102d48:	d82a      	bhi.n	8102da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102d4e:	d02c      	beq.n	8102daa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8102d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102d54:	d824      	bhi.n	8102da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102d5a:	d018      	beq.n	8102d8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8102d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102d60:	d81e      	bhi.n	8102da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102d62:	2b00      	cmp	r3, #0
 8102d64:	d003      	beq.n	8102d6e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8102d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102d6a:	d007      	beq.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8102d6c:	e018      	b.n	8102da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d6e:	4b8d      	ldr	r3, [pc, #564]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d72:	4a8c      	ldr	r2, [pc, #560]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102d7a:	e017      	b.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	3304      	adds	r3, #4
 8102d80:	2100      	movs	r1, #0
 8102d82:	4618      	mov	r0, r3
 8102d84:	f000 fd5c 	bl	8103840 <RCCEx_PLL2_Config>
 8102d88:	4603      	mov	r3, r0
 8102d8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102d8c:	e00e      	b.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	3324      	adds	r3, #36	; 0x24
 8102d92:	2100      	movs	r1, #0
 8102d94:	4618      	mov	r0, r3
 8102d96:	f000 fe05 	bl	81039a4 <RCCEx_PLL3_Config>
 8102d9a:	4603      	mov	r3, r0
 8102d9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102d9e:	e005      	b.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102da0:	2301      	movs	r3, #1
 8102da2:	75fb      	strb	r3, [r7, #23]
      break;
 8102da4:	e002      	b.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102da6:	bf00      	nop
 8102da8:	e000      	b.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dac:	7dfb      	ldrb	r3, [r7, #23]
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	d109      	bne.n	8102dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102db2:	4b7c      	ldr	r3, [pc, #496]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102db6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102dbe:	4979      	ldr	r1, [pc, #484]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102dc0:	4313      	orrs	r3, r2
 8102dc2:	650b      	str	r3, [r1, #80]	; 0x50
 8102dc4:	e001      	b.n	8102dca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dc6:	7dfb      	ldrb	r3, [r7, #23]
 8102dc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102dd2:	2b00      	cmp	r3, #0
 8102dd4:	d049      	beq.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102dde:	d02e      	beq.n	8102e3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8102de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102de4:	d828      	bhi.n	8102e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102dea:	d02a      	beq.n	8102e42 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8102dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102df0:	d822      	bhi.n	8102e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102df2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102df6:	d026      	beq.n	8102e46 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8102df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102dfc:	d81c      	bhi.n	8102e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e02:	d010      	beq.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8102e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e08:	d816      	bhi.n	8102e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d01d      	beq.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8102e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102e12:	d111      	bne.n	8102e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	3304      	adds	r3, #4
 8102e18:	2101      	movs	r1, #1
 8102e1a:	4618      	mov	r0, r3
 8102e1c:	f000 fd10 	bl	8103840 <RCCEx_PLL2_Config>
 8102e20:	4603      	mov	r3, r0
 8102e22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102e24:	e012      	b.n	8102e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	3324      	adds	r3, #36	; 0x24
 8102e2a:	2101      	movs	r1, #1
 8102e2c:	4618      	mov	r0, r3
 8102e2e:	f000 fdb9 	bl	81039a4 <RCCEx_PLL3_Config>
 8102e32:	4603      	mov	r3, r0
 8102e34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102e36:	e009      	b.n	8102e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e38:	2301      	movs	r3, #1
 8102e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8102e3c:	e006      	b.n	8102e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102e3e:	bf00      	nop
 8102e40:	e004      	b.n	8102e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102e42:	bf00      	nop
 8102e44:	e002      	b.n	8102e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102e46:	bf00      	nop
 8102e48:	e000      	b.n	8102e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e4c:	7dfb      	ldrb	r3, [r7, #23]
 8102e4e:	2b00      	cmp	r3, #0
 8102e50:	d109      	bne.n	8102e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102e52:	4b54      	ldr	r3, [pc, #336]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e5e:	4951      	ldr	r1, [pc, #324]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102e60:	4313      	orrs	r3, r2
 8102e62:	650b      	str	r3, [r1, #80]	; 0x50
 8102e64:	e001      	b.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e66:	7dfb      	ldrb	r3, [r7, #23]
 8102e68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102e6a:	687b      	ldr	r3, [r7, #4]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102e72:	2b00      	cmp	r3, #0
 8102e74:	d04b      	beq.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102e80:	d02e      	beq.n	8102ee0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8102e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102e86:	d828      	bhi.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102e8c:	d02a      	beq.n	8102ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8102e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102e92:	d822      	bhi.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102e98:	d026      	beq.n	8102ee8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8102e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102e9e:	d81c      	bhi.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ea4:	d010      	beq.n	8102ec8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8102ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102eaa:	d816      	bhi.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102eac:	2b00      	cmp	r3, #0
 8102eae:	d01d      	beq.n	8102eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8102eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102eb4:	d111      	bne.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	3304      	adds	r3, #4
 8102eba:	2101      	movs	r1, #1
 8102ebc:	4618      	mov	r0, r3
 8102ebe:	f000 fcbf 	bl	8103840 <RCCEx_PLL2_Config>
 8102ec2:	4603      	mov	r3, r0
 8102ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102ec6:	e012      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	3324      	adds	r3, #36	; 0x24
 8102ecc:	2101      	movs	r1, #1
 8102ece:	4618      	mov	r0, r3
 8102ed0:	f000 fd68 	bl	81039a4 <RCCEx_PLL3_Config>
 8102ed4:	4603      	mov	r3, r0
 8102ed6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102ed8:	e009      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8102eda:	2301      	movs	r3, #1
 8102edc:	75fb      	strb	r3, [r7, #23]
      break;
 8102ede:	e006      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102ee0:	bf00      	nop
 8102ee2:	e004      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102ee4:	bf00      	nop
 8102ee6:	e002      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102ee8:	bf00      	nop
 8102eea:	e000      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102eee:	7dfb      	ldrb	r3, [r7, #23]
 8102ef0:	2b00      	cmp	r3, #0
 8102ef2:	d10a      	bne.n	8102f0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102ef4:	4b2b      	ldr	r3, [pc, #172]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ef8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102f02:	4928      	ldr	r1, [pc, #160]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f04:	4313      	orrs	r3, r2
 8102f06:	658b      	str	r3, [r1, #88]	; 0x58
 8102f08:	e001      	b.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f0a:	7dfb      	ldrb	r3, [r7, #23]
 8102f0c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102f16:	2b00      	cmp	r3, #0
 8102f18:	d02f      	beq.n	8102f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102f22:	d00e      	beq.n	8102f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8102f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102f28:	d814      	bhi.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8102f2a:	2b00      	cmp	r3, #0
 8102f2c:	d015      	beq.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102f32:	d10f      	bne.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f34:	4b1b      	ldr	r3, [pc, #108]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f38:	4a1a      	ldr	r2, [pc, #104]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102f40:	e00c      	b.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	3304      	adds	r3, #4
 8102f46:	2101      	movs	r1, #1
 8102f48:	4618      	mov	r0, r3
 8102f4a:	f000 fc79 	bl	8103840 <RCCEx_PLL2_Config>
 8102f4e:	4603      	mov	r3, r0
 8102f50:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102f52:	e003      	b.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f54:	2301      	movs	r3, #1
 8102f56:	75fb      	strb	r3, [r7, #23]
      break;
 8102f58:	e000      	b.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8102f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f5c:	7dfb      	ldrb	r3, [r7, #23]
 8102f5e:	2b00      	cmp	r3, #0
 8102f60:	d109      	bne.n	8102f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102f62:	4b10      	ldr	r3, [pc, #64]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f6e:	490d      	ldr	r1, [pc, #52]	; (8102fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102f70:	4313      	orrs	r3, r2
 8102f72:	650b      	str	r3, [r1, #80]	; 0x50
 8102f74:	e001      	b.n	8102f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f76:	7dfb      	ldrb	r3, [r7, #23]
 8102f78:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102f82:	2b00      	cmp	r3, #0
 8102f84:	d033      	beq.n	8102fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102f8a:	2b03      	cmp	r3, #3
 8102f8c:	d81c      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102f8e:	a201      	add	r2, pc, #4	; (adr r2, 8102f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8102f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102f94:	08102fcf 	.word	0x08102fcf
 8102f98:	08102fa9 	.word	0x08102fa9
 8102f9c:	08102fb7 	.word	0x08102fb7
 8102fa0:	08102fcf 	.word	0x08102fcf
 8102fa4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fa8:	4bb9      	ldr	r3, [pc, #740]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fac:	4ab8      	ldr	r2, [pc, #736]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102fb4:	e00c      	b.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	3304      	adds	r3, #4
 8102fba:	2102      	movs	r1, #2
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	f000 fc3f 	bl	8103840 <RCCEx_PLL2_Config>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102fc6:	e003      	b.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102fc8:	2301      	movs	r3, #1
 8102fca:	75fb      	strb	r3, [r7, #23]
      break;
 8102fcc:	e000      	b.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8102fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fd0:	7dfb      	ldrb	r3, [r7, #23]
 8102fd2:	2b00      	cmp	r3, #0
 8102fd4:	d109      	bne.n	8102fea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102fd6:	4bae      	ldr	r3, [pc, #696]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102fda:	f023 0203 	bic.w	r2, r3, #3
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102fe2:	49ab      	ldr	r1, [pc, #684]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102fe4:	4313      	orrs	r3, r2
 8102fe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102fe8:	e001      	b.n	8102fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fea:	7dfb      	ldrb	r3, [r7, #23]
 8102fec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102ff6:	2b00      	cmp	r3, #0
 8102ff8:	f000 8088 	beq.w	810310c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102ffc:	4ba5      	ldr	r3, [pc, #660]	; (8103294 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	4aa4      	ldr	r2, [pc, #656]	; (8103294 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103008:	f7fe faba 	bl	8101580 <HAL_GetTick>
 810300c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810300e:	e009      	b.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103010:	f7fe fab6 	bl	8101580 <HAL_GetTick>
 8103014:	4602      	mov	r2, r0
 8103016:	693b      	ldr	r3, [r7, #16]
 8103018:	1ad3      	subs	r3, r2, r3
 810301a:	2b64      	cmp	r3, #100	; 0x64
 810301c:	d902      	bls.n	8103024 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810301e:	2303      	movs	r3, #3
 8103020:	75fb      	strb	r3, [r7, #23]
        break;
 8103022:	e005      	b.n	8103030 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103024:	4b9b      	ldr	r3, [pc, #620]	; (8103294 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810302c:	2b00      	cmp	r3, #0
 810302e:	d0ef      	beq.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103030:	7dfb      	ldrb	r3, [r7, #23]
 8103032:	2b00      	cmp	r3, #0
 8103034:	d168      	bne.n	8103108 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103036:	4b96      	ldr	r3, [pc, #600]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103038:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103040:	4053      	eors	r3, r2
 8103042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103046:	2b00      	cmp	r3, #0
 8103048:	d013      	beq.n	8103072 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810304a:	4b91      	ldr	r3, [pc, #580]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810304e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103052:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103054:	4b8e      	ldr	r3, [pc, #568]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103058:	4a8d      	ldr	r2, [pc, #564]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810305e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103060:	4b8b      	ldr	r3, [pc, #556]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103064:	4a8a      	ldr	r2, [pc, #552]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810306a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810306c:	4a88      	ldr	r2, [pc, #544]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810306e:	68fb      	ldr	r3, [r7, #12]
 8103070:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810307c:	d115      	bne.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810307e:	f7fe fa7f 	bl	8101580 <HAL_GetTick>
 8103082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103084:	e00b      	b.n	810309e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103086:	f7fe fa7b 	bl	8101580 <HAL_GetTick>
 810308a:	4602      	mov	r2, r0
 810308c:	693b      	ldr	r3, [r7, #16]
 810308e:	1ad3      	subs	r3, r2, r3
 8103090:	f241 3288 	movw	r2, #5000	; 0x1388
 8103094:	4293      	cmp	r3, r2
 8103096:	d902      	bls.n	810309e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103098:	2303      	movs	r3, #3
 810309a:	75fb      	strb	r3, [r7, #23]
            break;
 810309c:	e005      	b.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810309e:	4b7c      	ldr	r3, [pc, #496]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81030a2:	f003 0302 	and.w	r3, r3, #2
 81030a6:	2b00      	cmp	r3, #0
 81030a8:	d0ed      	beq.n	8103086 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81030aa:	7dfb      	ldrb	r3, [r7, #23]
 81030ac:	2b00      	cmp	r3, #0
 81030ae:	d128      	bne.n	8103102 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81030ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81030be:	d10f      	bne.n	81030e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81030c0:	4b73      	ldr	r3, [pc, #460]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030c2:	691b      	ldr	r3, [r3, #16]
 81030c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81030ce:	091b      	lsrs	r3, r3, #4
 81030d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81030d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81030d8:	496d      	ldr	r1, [pc, #436]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030da:	4313      	orrs	r3, r2
 81030dc:	610b      	str	r3, [r1, #16]
 81030de:	e005      	b.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81030e0:	4b6b      	ldr	r3, [pc, #428]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030e2:	691b      	ldr	r3, [r3, #16]
 81030e4:	4a6a      	ldr	r2, [pc, #424]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81030ea:	6113      	str	r3, [r2, #16]
 81030ec:	4b68      	ldr	r3, [pc, #416]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81030f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81030fa:	4965      	ldr	r1, [pc, #404]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81030fc:	4313      	orrs	r3, r2
 81030fe:	670b      	str	r3, [r1, #112]	; 0x70
 8103100:	e004      	b.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103102:	7dfb      	ldrb	r3, [r7, #23]
 8103104:	75bb      	strb	r3, [r7, #22]
 8103106:	e001      	b.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103108:	7dfb      	ldrb	r3, [r7, #23]
 810310a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	681b      	ldr	r3, [r3, #0]
 8103110:	f003 0301 	and.w	r3, r3, #1
 8103114:	2b00      	cmp	r3, #0
 8103116:	d07e      	beq.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810311c:	2b28      	cmp	r3, #40	; 0x28
 810311e:	d867      	bhi.n	81031f0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103120:	a201      	add	r2, pc, #4	; (adr r2, 8103128 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103126:	bf00      	nop
 8103128:	081031f7 	.word	0x081031f7
 810312c:	081031f1 	.word	0x081031f1
 8103130:	081031f1 	.word	0x081031f1
 8103134:	081031f1 	.word	0x081031f1
 8103138:	081031f1 	.word	0x081031f1
 810313c:	081031f1 	.word	0x081031f1
 8103140:	081031f1 	.word	0x081031f1
 8103144:	081031f1 	.word	0x081031f1
 8103148:	081031cd 	.word	0x081031cd
 810314c:	081031f1 	.word	0x081031f1
 8103150:	081031f1 	.word	0x081031f1
 8103154:	081031f1 	.word	0x081031f1
 8103158:	081031f1 	.word	0x081031f1
 810315c:	081031f1 	.word	0x081031f1
 8103160:	081031f1 	.word	0x081031f1
 8103164:	081031f1 	.word	0x081031f1
 8103168:	081031df 	.word	0x081031df
 810316c:	081031f1 	.word	0x081031f1
 8103170:	081031f1 	.word	0x081031f1
 8103174:	081031f1 	.word	0x081031f1
 8103178:	081031f1 	.word	0x081031f1
 810317c:	081031f1 	.word	0x081031f1
 8103180:	081031f1 	.word	0x081031f1
 8103184:	081031f1 	.word	0x081031f1
 8103188:	081031f7 	.word	0x081031f7
 810318c:	081031f1 	.word	0x081031f1
 8103190:	081031f1 	.word	0x081031f1
 8103194:	081031f1 	.word	0x081031f1
 8103198:	081031f1 	.word	0x081031f1
 810319c:	081031f1 	.word	0x081031f1
 81031a0:	081031f1 	.word	0x081031f1
 81031a4:	081031f1 	.word	0x081031f1
 81031a8:	081031f7 	.word	0x081031f7
 81031ac:	081031f1 	.word	0x081031f1
 81031b0:	081031f1 	.word	0x081031f1
 81031b4:	081031f1 	.word	0x081031f1
 81031b8:	081031f1 	.word	0x081031f1
 81031bc:	081031f1 	.word	0x081031f1
 81031c0:	081031f1 	.word	0x081031f1
 81031c4:	081031f1 	.word	0x081031f1
 81031c8:	081031f7 	.word	0x081031f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	3304      	adds	r3, #4
 81031d0:	2101      	movs	r1, #1
 81031d2:	4618      	mov	r0, r3
 81031d4:	f000 fb34 	bl	8103840 <RCCEx_PLL2_Config>
 81031d8:	4603      	mov	r3, r0
 81031da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81031dc:	e00c      	b.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	3324      	adds	r3, #36	; 0x24
 81031e2:	2101      	movs	r1, #1
 81031e4:	4618      	mov	r0, r3
 81031e6:	f000 fbdd 	bl	81039a4 <RCCEx_PLL3_Config>
 81031ea:	4603      	mov	r3, r0
 81031ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81031ee:	e003      	b.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81031f0:	2301      	movs	r3, #1
 81031f2:	75fb      	strb	r3, [r7, #23]
      break;
 81031f4:	e000      	b.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81031f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81031f8:	7dfb      	ldrb	r3, [r7, #23]
 81031fa:	2b00      	cmp	r3, #0
 81031fc:	d109      	bne.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81031fe:	4b24      	ldr	r3, [pc, #144]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103202:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810320a:	4921      	ldr	r1, [pc, #132]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810320c:	4313      	orrs	r3, r2
 810320e:	654b      	str	r3, [r1, #84]	; 0x54
 8103210:	e001      	b.n	8103216 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103212:	7dfb      	ldrb	r3, [r7, #23]
 8103214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	f003 0302 	and.w	r3, r3, #2
 810321e:	2b00      	cmp	r3, #0
 8103220:	d03c      	beq.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103226:	2b05      	cmp	r3, #5
 8103228:	d820      	bhi.n	810326c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810322a:	a201      	add	r2, pc, #4	; (adr r2, 8103230 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 810322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103230:	08103273 	.word	0x08103273
 8103234:	08103249 	.word	0x08103249
 8103238:	0810325b 	.word	0x0810325b
 810323c:	08103273 	.word	0x08103273
 8103240:	08103273 	.word	0x08103273
 8103244:	08103273 	.word	0x08103273
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	3304      	adds	r3, #4
 810324c:	2101      	movs	r1, #1
 810324e:	4618      	mov	r0, r3
 8103250:	f000 faf6 	bl	8103840 <RCCEx_PLL2_Config>
 8103254:	4603      	mov	r3, r0
 8103256:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103258:	e00c      	b.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	3324      	adds	r3, #36	; 0x24
 810325e:	2101      	movs	r1, #1
 8103260:	4618      	mov	r0, r3
 8103262:	f000 fb9f 	bl	81039a4 <RCCEx_PLL3_Config>
 8103266:	4603      	mov	r3, r0
 8103268:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810326a:	e003      	b.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810326c:	2301      	movs	r3, #1
 810326e:	75fb      	strb	r3, [r7, #23]
      break;
 8103270:	e000      	b.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103274:	7dfb      	ldrb	r3, [r7, #23]
 8103276:	2b00      	cmp	r3, #0
 8103278:	d10e      	bne.n	8103298 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810327a:	4b05      	ldr	r3, [pc, #20]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810327e:	f023 0207 	bic.w	r2, r3, #7
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103286:	4902      	ldr	r1, [pc, #8]	; (8103290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103288:	4313      	orrs	r3, r2
 810328a:	654b      	str	r3, [r1, #84]	; 0x54
 810328c:	e006      	b.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810328e:	bf00      	nop
 8103290:	58024400 	.word	0x58024400
 8103294:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103298:	7dfb      	ldrb	r3, [r7, #23]
 810329a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810329c:	687b      	ldr	r3, [r7, #4]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	f003 0304 	and.w	r3, r3, #4
 81032a4:	2b00      	cmp	r3, #0
 81032a6:	d039      	beq.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81032ae:	2b05      	cmp	r3, #5
 81032b0:	d820      	bhi.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81032b2:	a201      	add	r2, pc, #4	; (adr r2, 81032b8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032b8:	081032fb 	.word	0x081032fb
 81032bc:	081032d1 	.word	0x081032d1
 81032c0:	081032e3 	.word	0x081032e3
 81032c4:	081032fb 	.word	0x081032fb
 81032c8:	081032fb 	.word	0x081032fb
 81032cc:	081032fb 	.word	0x081032fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	3304      	adds	r3, #4
 81032d4:	2101      	movs	r1, #1
 81032d6:	4618      	mov	r0, r3
 81032d8:	f000 fab2 	bl	8103840 <RCCEx_PLL2_Config>
 81032dc:	4603      	mov	r3, r0
 81032de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81032e0:	e00c      	b.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	3324      	adds	r3, #36	; 0x24
 81032e6:	2101      	movs	r1, #1
 81032e8:	4618      	mov	r0, r3
 81032ea:	f000 fb5b 	bl	81039a4 <RCCEx_PLL3_Config>
 81032ee:	4603      	mov	r3, r0
 81032f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81032f2:	e003      	b.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81032f4:	2301      	movs	r3, #1
 81032f6:	75fb      	strb	r3, [r7, #23]
      break;
 81032f8:	e000      	b.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81032fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032fc:	7dfb      	ldrb	r3, [r7, #23]
 81032fe:	2b00      	cmp	r3, #0
 8103300:	d10a      	bne.n	8103318 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103302:	4bb7      	ldr	r3, [pc, #732]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103306:	f023 0207 	bic.w	r2, r3, #7
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103310:	49b3      	ldr	r1, [pc, #716]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103312:	4313      	orrs	r3, r2
 8103314:	658b      	str	r3, [r1, #88]	; 0x58
 8103316:	e001      	b.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103318:	7dfb      	ldrb	r3, [r7, #23]
 810331a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	f003 0320 	and.w	r3, r3, #32
 8103324:	2b00      	cmp	r3, #0
 8103326:	d04b      	beq.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810332e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103332:	d02e      	beq.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103338:	d828      	bhi.n	810338c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810333e:	d02a      	beq.n	8103396 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103344:	d822      	bhi.n	810338c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810334a:	d026      	beq.n	810339a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810334c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103350:	d81c      	bhi.n	810338c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103356:	d010      	beq.n	810337a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810335c:	d816      	bhi.n	810338c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810335e:	2b00      	cmp	r3, #0
 8103360:	d01d      	beq.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103366:	d111      	bne.n	810338c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	3304      	adds	r3, #4
 810336c:	2100      	movs	r1, #0
 810336e:	4618      	mov	r0, r3
 8103370:	f000 fa66 	bl	8103840 <RCCEx_PLL2_Config>
 8103374:	4603      	mov	r3, r0
 8103376:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103378:	e012      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	3324      	adds	r3, #36	; 0x24
 810337e:	2102      	movs	r1, #2
 8103380:	4618      	mov	r0, r3
 8103382:	f000 fb0f 	bl	81039a4 <RCCEx_PLL3_Config>
 8103386:	4603      	mov	r3, r0
 8103388:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810338a:	e009      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810338c:	2301      	movs	r3, #1
 810338e:	75fb      	strb	r3, [r7, #23]
      break;
 8103390:	e006      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103392:	bf00      	nop
 8103394:	e004      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103396:	bf00      	nop
 8103398:	e002      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810339a:	bf00      	nop
 810339c:	e000      	b.n	81033a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810339e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033a0:	7dfb      	ldrb	r3, [r7, #23]
 81033a2:	2b00      	cmp	r3, #0
 81033a4:	d10a      	bne.n	81033bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81033a6:	4b8e      	ldr	r3, [pc, #568]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81033b4:	498a      	ldr	r1, [pc, #552]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81033b6:	4313      	orrs	r3, r2
 81033b8:	654b      	str	r3, [r1, #84]	; 0x54
 81033ba:	e001      	b.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033bc:	7dfb      	ldrb	r3, [r7, #23]
 81033be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81033c8:	2b00      	cmp	r3, #0
 81033ca:	d04b      	beq.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81033d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81033d6:	d02e      	beq.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81033d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81033dc:	d828      	bhi.n	8103430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81033e2:	d02a      	beq.n	810343a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81033e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81033e8:	d822      	bhi.n	8103430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81033ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81033ee:	d026      	beq.n	810343e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81033f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81033f4:	d81c      	bhi.n	8103430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81033f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81033fa:	d010      	beq.n	810341e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81033fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103400:	d816      	bhi.n	8103430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103402:	2b00      	cmp	r3, #0
 8103404:	d01d      	beq.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810340a:	d111      	bne.n	8103430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	3304      	adds	r3, #4
 8103410:	2100      	movs	r1, #0
 8103412:	4618      	mov	r0, r3
 8103414:	f000 fa14 	bl	8103840 <RCCEx_PLL2_Config>
 8103418:	4603      	mov	r3, r0
 810341a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810341c:	e012      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	3324      	adds	r3, #36	; 0x24
 8103422:	2102      	movs	r1, #2
 8103424:	4618      	mov	r0, r3
 8103426:	f000 fabd 	bl	81039a4 <RCCEx_PLL3_Config>
 810342a:	4603      	mov	r3, r0
 810342c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810342e:	e009      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103430:	2301      	movs	r3, #1
 8103432:	75fb      	strb	r3, [r7, #23]
      break;
 8103434:	e006      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103436:	bf00      	nop
 8103438:	e004      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810343a:	bf00      	nop
 810343c:	e002      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810343e:	bf00      	nop
 8103440:	e000      	b.n	8103444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103444:	7dfb      	ldrb	r3, [r7, #23]
 8103446:	2b00      	cmp	r3, #0
 8103448:	d10a      	bne.n	8103460 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810344a:	4b65      	ldr	r3, [pc, #404]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810344e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103458:	4961      	ldr	r1, [pc, #388]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810345a:	4313      	orrs	r3, r2
 810345c:	658b      	str	r3, [r1, #88]	; 0x58
 810345e:	e001      	b.n	8103464 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103460:	7dfb      	ldrb	r3, [r7, #23]
 8103462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810346c:	2b00      	cmp	r3, #0
 810346e:	d04b      	beq.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103476:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810347a:	d02e      	beq.n	81034da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810347c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103480:	d828      	bhi.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103486:	d02a      	beq.n	81034de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810348c:	d822      	bhi.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810348e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103492:	d026      	beq.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103498:	d81c      	bhi.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810349a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810349e:	d010      	beq.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81034a4:	d816      	bhi.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81034a6:	2b00      	cmp	r3, #0
 81034a8:	d01d      	beq.n	81034e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81034aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81034ae:	d111      	bne.n	81034d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	3304      	adds	r3, #4
 81034b4:	2100      	movs	r1, #0
 81034b6:	4618      	mov	r0, r3
 81034b8:	f000 f9c2 	bl	8103840 <RCCEx_PLL2_Config>
 81034bc:	4603      	mov	r3, r0
 81034be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81034c0:	e012      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	3324      	adds	r3, #36	; 0x24
 81034c6:	2102      	movs	r1, #2
 81034c8:	4618      	mov	r0, r3
 81034ca:	f000 fa6b 	bl	81039a4 <RCCEx_PLL3_Config>
 81034ce:	4603      	mov	r3, r0
 81034d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81034d2:	e009      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034d4:	2301      	movs	r3, #1
 81034d6:	75fb      	strb	r3, [r7, #23]
      break;
 81034d8:	e006      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81034da:	bf00      	nop
 81034dc:	e004      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81034de:	bf00      	nop
 81034e0:	e002      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81034e2:	bf00      	nop
 81034e4:	e000      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034e8:	7dfb      	ldrb	r3, [r7, #23]
 81034ea:	2b00      	cmp	r3, #0
 81034ec:	d10a      	bne.n	8103504 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81034ee:	4b3c      	ldr	r3, [pc, #240]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81034fc:	4938      	ldr	r1, [pc, #224]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81034fe:	4313      	orrs	r3, r2
 8103500:	658b      	str	r3, [r1, #88]	; 0x58
 8103502:	e001      	b.n	8103508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103504:	7dfb      	ldrb	r3, [r7, #23]
 8103506:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	f003 0308 	and.w	r3, r3, #8
 8103510:	2b00      	cmp	r3, #0
 8103512:	d01a      	beq.n	810354a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810351a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810351e:	d10a      	bne.n	8103536 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	3324      	adds	r3, #36	; 0x24
 8103524:	2102      	movs	r1, #2
 8103526:	4618      	mov	r0, r3
 8103528:	f000 fa3c 	bl	81039a4 <RCCEx_PLL3_Config>
 810352c:	4603      	mov	r3, r0
 810352e:	2b00      	cmp	r3, #0
 8103530:	d001      	beq.n	8103536 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103532:	2301      	movs	r3, #1
 8103534:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103536:	4b2a      	ldr	r3, [pc, #168]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810353a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103544:	4926      	ldr	r1, [pc, #152]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103546:	4313      	orrs	r3, r2
 8103548:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	f003 0310 	and.w	r3, r3, #16
 8103552:	2b00      	cmp	r3, #0
 8103554:	d01a      	beq.n	810358c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810355c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103560:	d10a      	bne.n	8103578 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	3324      	adds	r3, #36	; 0x24
 8103566:	2102      	movs	r1, #2
 8103568:	4618      	mov	r0, r3
 810356a:	f000 fa1b 	bl	81039a4 <RCCEx_PLL3_Config>
 810356e:	4603      	mov	r3, r0
 8103570:	2b00      	cmp	r3, #0
 8103572:	d001      	beq.n	8103578 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103574:	2301      	movs	r3, #1
 8103576:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103578:	4b19      	ldr	r3, [pc, #100]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810357c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103586:	4916      	ldr	r1, [pc, #88]	; (81035e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103588:	4313      	orrs	r3, r2
 810358a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103594:	2b00      	cmp	r3, #0
 8103596:	d036      	beq.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810359e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81035a2:	d01f      	beq.n	81035e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81035a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81035a8:	d817      	bhi.n	81035da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d003      	beq.n	81035b6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81035ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81035b2:	d009      	beq.n	81035c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81035b4:	e011      	b.n	81035da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	3304      	adds	r3, #4
 81035ba:	2100      	movs	r1, #0
 81035bc:	4618      	mov	r0, r3
 81035be:	f000 f93f 	bl	8103840 <RCCEx_PLL2_Config>
 81035c2:	4603      	mov	r3, r0
 81035c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81035c6:	e00e      	b.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	3324      	adds	r3, #36	; 0x24
 81035cc:	2102      	movs	r1, #2
 81035ce:	4618      	mov	r0, r3
 81035d0:	f000 f9e8 	bl	81039a4 <RCCEx_PLL3_Config>
 81035d4:	4603      	mov	r3, r0
 81035d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81035d8:	e005      	b.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81035da:	2301      	movs	r3, #1
 81035dc:	75fb      	strb	r3, [r7, #23]
      break;
 81035de:	e002      	b.n	81035e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81035e0:	58024400 	.word	0x58024400
      break;
 81035e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81035e6:	7dfb      	ldrb	r3, [r7, #23]
 81035e8:	2b00      	cmp	r3, #0
 81035ea:	d10a      	bne.n	8103602 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81035ec:	4b93      	ldr	r3, [pc, #588]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81035f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81035fa:	4990      	ldr	r1, [pc, #576]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81035fc:	4313      	orrs	r3, r2
 81035fe:	658b      	str	r3, [r1, #88]	; 0x58
 8103600:	e001      	b.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103602:	7dfb      	ldrb	r3, [r7, #23]
 8103604:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103606:	687b      	ldr	r3, [r7, #4]
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810360e:	2b00      	cmp	r3, #0
 8103610:	d033      	beq.n	810367a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103618:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810361c:	d01c      	beq.n	8103658 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810361e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103622:	d816      	bhi.n	8103652 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103628:	d003      	beq.n	8103632 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810362a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810362e:	d007      	beq.n	8103640 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8103630:	e00f      	b.n	8103652 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103632:	4b82      	ldr	r3, [pc, #520]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103636:	4a81      	ldr	r2, [pc, #516]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810363c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810363e:	e00c      	b.n	810365a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	3324      	adds	r3, #36	; 0x24
 8103644:	2101      	movs	r1, #1
 8103646:	4618      	mov	r0, r3
 8103648:	f000 f9ac 	bl	81039a4 <RCCEx_PLL3_Config>
 810364c:	4603      	mov	r3, r0
 810364e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103650:	e003      	b.n	810365a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103652:	2301      	movs	r3, #1
 8103654:	75fb      	strb	r3, [r7, #23]
      break;
 8103656:	e000      	b.n	810365a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103658:	bf00      	nop
    }

    if(ret == HAL_OK)
 810365a:	7dfb      	ldrb	r3, [r7, #23]
 810365c:	2b00      	cmp	r3, #0
 810365e:	d10a      	bne.n	8103676 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103660:	4b76      	ldr	r3, [pc, #472]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810366e:	4973      	ldr	r1, [pc, #460]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103670:	4313      	orrs	r3, r2
 8103672:	654b      	str	r3, [r1, #84]	; 0x54
 8103674:	e001      	b.n	810367a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103676:	7dfb      	ldrb	r3, [r7, #23]
 8103678:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103682:	2b00      	cmp	r3, #0
 8103684:	d029      	beq.n	81036da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810368a:	2b00      	cmp	r3, #0
 810368c:	d003      	beq.n	8103696 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103692:	d007      	beq.n	81036a4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103694:	e00f      	b.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103696:	4b69      	ldr	r3, [pc, #420]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810369a:	4a68      	ldr	r2, [pc, #416]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810369c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81036a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81036a2:	e00b      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	3304      	adds	r3, #4
 81036a8:	2102      	movs	r1, #2
 81036aa:	4618      	mov	r0, r3
 81036ac:	f000 f8c8 	bl	8103840 <RCCEx_PLL2_Config>
 81036b0:	4603      	mov	r3, r0
 81036b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81036b4:	e002      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81036b6:	2301      	movs	r3, #1
 81036b8:	75fb      	strb	r3, [r7, #23]
      break;
 81036ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036bc:	7dfb      	ldrb	r3, [r7, #23]
 81036be:	2b00      	cmp	r3, #0
 81036c0:	d109      	bne.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81036c2:	4b5e      	ldr	r3, [pc, #376]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81036c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81036ce:	495b      	ldr	r1, [pc, #364]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81036d0:	4313      	orrs	r3, r2
 81036d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81036d4:	e001      	b.n	81036da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036d6:	7dfb      	ldrb	r3, [r7, #23]
 81036d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81036e2:	2b00      	cmp	r3, #0
 81036e4:	d00a      	beq.n	81036fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	3324      	adds	r3, #36	; 0x24
 81036ea:	2102      	movs	r1, #2
 81036ec:	4618      	mov	r0, r3
 81036ee:	f000 f959 	bl	81039a4 <RCCEx_PLL3_Config>
 81036f2:	4603      	mov	r3, r0
 81036f4:	2b00      	cmp	r3, #0
 81036f6:	d001      	beq.n	81036fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81036f8:	2301      	movs	r3, #1
 81036fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103704:	2b00      	cmp	r3, #0
 8103706:	d030      	beq.n	810376a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810370c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103710:	d017      	beq.n	8103742 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103716:	d811      	bhi.n	810373c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810371c:	d013      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810371e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103722:	d80b      	bhi.n	810373c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103724:	2b00      	cmp	r3, #0
 8103726:	d010      	beq.n	810374a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810372c:	d106      	bne.n	810373c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810372e:	4b43      	ldr	r3, [pc, #268]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103732:	4a42      	ldr	r2, [pc, #264]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810373a:	e007      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810373c:	2301      	movs	r3, #1
 810373e:	75fb      	strb	r3, [r7, #23]
      break;
 8103740:	e004      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103742:	bf00      	nop
 8103744:	e002      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103746:	bf00      	nop
 8103748:	e000      	b.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810374a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810374c:	7dfb      	ldrb	r3, [r7, #23]
 810374e:	2b00      	cmp	r3, #0
 8103750:	d109      	bne.n	8103766 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103752:	4b3a      	ldr	r3, [pc, #232]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810375e:	4937      	ldr	r1, [pc, #220]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103760:	4313      	orrs	r3, r2
 8103762:	654b      	str	r3, [r1, #84]	; 0x54
 8103764:	e001      	b.n	810376a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103766:	7dfb      	ldrb	r3, [r7, #23]
 8103768:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103772:	2b00      	cmp	r3, #0
 8103774:	d008      	beq.n	8103788 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103776:	4b31      	ldr	r3, [pc, #196]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810377a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103782:	492e      	ldr	r1, [pc, #184]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103784:	4313      	orrs	r3, r2
 8103786:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103790:	2b00      	cmp	r3, #0
 8103792:	d009      	beq.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103794:	4b29      	ldr	r3, [pc, #164]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103796:	691b      	ldr	r3, [r3, #16]
 8103798:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81037a2:	4926      	ldr	r1, [pc, #152]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037a4:	4313      	orrs	r3, r2
 81037a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81037b0:	2b00      	cmp	r3, #0
 81037b2:	d008      	beq.n	81037c6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81037b4:	4b21      	ldr	r3, [pc, #132]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81037c0:	491e      	ldr	r1, [pc, #120]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037c2:	4313      	orrs	r3, r2
 81037c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81037ce:	2b00      	cmp	r3, #0
 81037d0:	d00d      	beq.n	81037ee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81037d2:	4b1a      	ldr	r3, [pc, #104]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037d4:	691b      	ldr	r3, [r3, #16]
 81037d6:	4a19      	ldr	r2, [pc, #100]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81037dc:	6113      	str	r3, [r2, #16]
 81037de:	4b17      	ldr	r3, [pc, #92]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037e0:	691a      	ldr	r2, [r3, #16]
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81037e8:	4914      	ldr	r1, [pc, #80]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037ea:	4313      	orrs	r3, r2
 81037ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	681b      	ldr	r3, [r3, #0]
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	da08      	bge.n	8103808 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81037f6:	4b11      	ldr	r3, [pc, #68]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81037fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103802:	490e      	ldr	r1, [pc, #56]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103804:	4313      	orrs	r3, r2
 8103806:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103810:	2b00      	cmp	r3, #0
 8103812:	d009      	beq.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103814:	4b09      	ldr	r3, [pc, #36]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103822:	4906      	ldr	r1, [pc, #24]	; (810383c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103824:	4313      	orrs	r3, r2
 8103826:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103828:	7dbb      	ldrb	r3, [r7, #22]
 810382a:	2b00      	cmp	r3, #0
 810382c:	d101      	bne.n	8103832 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810382e:	2300      	movs	r3, #0
 8103830:	e000      	b.n	8103834 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103832:	2301      	movs	r3, #1
}
 8103834:	4618      	mov	r0, r3
 8103836:	3718      	adds	r7, #24
 8103838:	46bd      	mov	sp, r7
 810383a:	bd80      	pop	{r7, pc}
 810383c:	58024400 	.word	0x58024400

08103840 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103840:	b580      	push	{r7, lr}
 8103842:	b084      	sub	sp, #16
 8103844:	af00      	add	r7, sp, #0
 8103846:	6078      	str	r0, [r7, #4]
 8103848:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810384a:	2300      	movs	r3, #0
 810384c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810384e:	4b54      	ldr	r3, [pc, #336]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103852:	f003 0303 	and.w	r3, r3, #3
 8103856:	2b03      	cmp	r3, #3
 8103858:	d101      	bne.n	810385e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810385a:	2301      	movs	r3, #1
 810385c:	e09b      	b.n	8103996 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810385e:	4b50      	ldr	r3, [pc, #320]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103860:	681b      	ldr	r3, [r3, #0]
 8103862:	4a4f      	ldr	r2, [pc, #316]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810386a:	f7fd fe89 	bl	8101580 <HAL_GetTick>
 810386e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103870:	e008      	b.n	8103884 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103872:	f7fd fe85 	bl	8101580 <HAL_GetTick>
 8103876:	4602      	mov	r2, r0
 8103878:	68bb      	ldr	r3, [r7, #8]
 810387a:	1ad3      	subs	r3, r2, r3
 810387c:	2b02      	cmp	r3, #2
 810387e:	d901      	bls.n	8103884 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103880:	2303      	movs	r3, #3
 8103882:	e088      	b.n	8103996 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103884:	4b46      	ldr	r3, [pc, #280]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810388c:	2b00      	cmp	r3, #0
 810388e:	d1f0      	bne.n	8103872 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103890:	4b43      	ldr	r3, [pc, #268]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103894:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	031b      	lsls	r3, r3, #12
 810389e:	4940      	ldr	r1, [pc, #256]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 81038a0:	4313      	orrs	r3, r2
 81038a2:	628b      	str	r3, [r1, #40]	; 0x28
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	685b      	ldr	r3, [r3, #4]
 81038a8:	3b01      	subs	r3, #1
 81038aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	689b      	ldr	r3, [r3, #8]
 81038b2:	3b01      	subs	r3, #1
 81038b4:	025b      	lsls	r3, r3, #9
 81038b6:	b29b      	uxth	r3, r3
 81038b8:	431a      	orrs	r2, r3
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	68db      	ldr	r3, [r3, #12]
 81038be:	3b01      	subs	r3, #1
 81038c0:	041b      	lsls	r3, r3, #16
 81038c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81038c6:	431a      	orrs	r2, r3
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	691b      	ldr	r3, [r3, #16]
 81038cc:	3b01      	subs	r3, #1
 81038ce:	061b      	lsls	r3, r3, #24
 81038d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81038d4:	4932      	ldr	r1, [pc, #200]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 81038d6:	4313      	orrs	r3, r2
 81038d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81038da:	4b31      	ldr	r3, [pc, #196]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 81038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	695b      	ldr	r3, [r3, #20]
 81038e6:	492e      	ldr	r1, [pc, #184]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 81038e8:	4313      	orrs	r3, r2
 81038ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81038ec:	4b2c      	ldr	r3, [pc, #176]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 81038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038f0:	f023 0220 	bic.w	r2, r3, #32
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	699b      	ldr	r3, [r3, #24]
 81038f8:	4929      	ldr	r1, [pc, #164]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 81038fa:	4313      	orrs	r3, r2
 81038fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81038fe:	4b28      	ldr	r3, [pc, #160]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103902:	4a27      	ldr	r2, [pc, #156]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103904:	f023 0310 	bic.w	r3, r3, #16
 8103908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810390a:	4b25      	ldr	r3, [pc, #148]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 810390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810390e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103912:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103916:	687a      	ldr	r2, [r7, #4]
 8103918:	69d2      	ldr	r2, [r2, #28]
 810391a:	00d2      	lsls	r2, r2, #3
 810391c:	4920      	ldr	r1, [pc, #128]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 810391e:	4313      	orrs	r3, r2
 8103920:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103922:	4b1f      	ldr	r3, [pc, #124]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103926:	4a1e      	ldr	r2, [pc, #120]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103928:	f043 0310 	orr.w	r3, r3, #16
 810392c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810392e:	683b      	ldr	r3, [r7, #0]
 8103930:	2b00      	cmp	r3, #0
 8103932:	d106      	bne.n	8103942 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103934:	4b1a      	ldr	r3, [pc, #104]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103938:	4a19      	ldr	r2, [pc, #100]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 810393a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810393e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103940:	e00f      	b.n	8103962 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103942:	683b      	ldr	r3, [r7, #0]
 8103944:	2b01      	cmp	r3, #1
 8103946:	d106      	bne.n	8103956 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103948:	4b15      	ldr	r3, [pc, #84]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 810394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810394c:	4a14      	ldr	r2, [pc, #80]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 810394e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103954:	e005      	b.n	8103962 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103956:	4b12      	ldr	r3, [pc, #72]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810395a:	4a11      	ldr	r2, [pc, #68]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 810395c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103962:	4b0f      	ldr	r3, [pc, #60]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	4a0e      	ldr	r2, [pc, #56]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 8103968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810396c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810396e:	f7fd fe07 	bl	8101580 <HAL_GetTick>
 8103972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103974:	e008      	b.n	8103988 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103976:	f7fd fe03 	bl	8101580 <HAL_GetTick>
 810397a:	4602      	mov	r2, r0
 810397c:	68bb      	ldr	r3, [r7, #8]
 810397e:	1ad3      	subs	r3, r2, r3
 8103980:	2b02      	cmp	r3, #2
 8103982:	d901      	bls.n	8103988 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103984:	2303      	movs	r3, #3
 8103986:	e006      	b.n	8103996 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103988:	4b05      	ldr	r3, [pc, #20]	; (81039a0 <RCCEx_PLL2_Config+0x160>)
 810398a:	681b      	ldr	r3, [r3, #0]
 810398c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103990:	2b00      	cmp	r3, #0
 8103992:	d0f0      	beq.n	8103976 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103994:	7bfb      	ldrb	r3, [r7, #15]
}
 8103996:	4618      	mov	r0, r3
 8103998:	3710      	adds	r7, #16
 810399a:	46bd      	mov	sp, r7
 810399c:	bd80      	pop	{r7, pc}
 810399e:	bf00      	nop
 81039a0:	58024400 	.word	0x58024400

081039a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81039a4:	b580      	push	{r7, lr}
 81039a6:	b084      	sub	sp, #16
 81039a8:	af00      	add	r7, sp, #0
 81039aa:	6078      	str	r0, [r7, #4]
 81039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81039ae:	2300      	movs	r3, #0
 81039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81039b2:	4b54      	ldr	r3, [pc, #336]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 81039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039b6:	f003 0303 	and.w	r3, r3, #3
 81039ba:	2b03      	cmp	r3, #3
 81039bc:	d101      	bne.n	81039c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81039be:	2301      	movs	r3, #1
 81039c0:	e09b      	b.n	8103afa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81039c2:	4b50      	ldr	r3, [pc, #320]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	4a4f      	ldr	r2, [pc, #316]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 81039c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81039ce:	f7fd fdd7 	bl	8101580 <HAL_GetTick>
 81039d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81039d4:	e008      	b.n	81039e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81039d6:	f7fd fdd3 	bl	8101580 <HAL_GetTick>
 81039da:	4602      	mov	r2, r0
 81039dc:	68bb      	ldr	r3, [r7, #8]
 81039de:	1ad3      	subs	r3, r2, r3
 81039e0:	2b02      	cmp	r3, #2
 81039e2:	d901      	bls.n	81039e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81039e4:	2303      	movs	r3, #3
 81039e6:	e088      	b.n	8103afa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81039e8:	4b46      	ldr	r3, [pc, #280]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d1f0      	bne.n	81039d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81039f4:	4b43      	ldr	r3, [pc, #268]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 81039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	681b      	ldr	r3, [r3, #0]
 8103a00:	051b      	lsls	r3, r3, #20
 8103a02:	4940      	ldr	r1, [pc, #256]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a04:	4313      	orrs	r3, r2
 8103a06:	628b      	str	r3, [r1, #40]	; 0x28
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	685b      	ldr	r3, [r3, #4]
 8103a0c:	3b01      	subs	r3, #1
 8103a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	689b      	ldr	r3, [r3, #8]
 8103a16:	3b01      	subs	r3, #1
 8103a18:	025b      	lsls	r3, r3, #9
 8103a1a:	b29b      	uxth	r3, r3
 8103a1c:	431a      	orrs	r2, r3
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	68db      	ldr	r3, [r3, #12]
 8103a22:	3b01      	subs	r3, #1
 8103a24:	041b      	lsls	r3, r3, #16
 8103a26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103a2a:	431a      	orrs	r2, r3
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	691b      	ldr	r3, [r3, #16]
 8103a30:	3b01      	subs	r3, #1
 8103a32:	061b      	lsls	r3, r3, #24
 8103a34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103a38:	4932      	ldr	r1, [pc, #200]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a3a:	4313      	orrs	r3, r2
 8103a3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103a3e:	4b31      	ldr	r3, [pc, #196]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	695b      	ldr	r3, [r3, #20]
 8103a4a:	492e      	ldr	r1, [pc, #184]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a4c:	4313      	orrs	r3, r2
 8103a4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103a50:	4b2c      	ldr	r3, [pc, #176]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	699b      	ldr	r3, [r3, #24]
 8103a5c:	4929      	ldr	r1, [pc, #164]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a5e:	4313      	orrs	r3, r2
 8103a60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103a62:	4b28      	ldr	r3, [pc, #160]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a66:	4a27      	ldr	r2, [pc, #156]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103a6e:	4b25      	ldr	r3, [pc, #148]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103a76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103a7a:	687a      	ldr	r2, [r7, #4]
 8103a7c:	69d2      	ldr	r2, [r2, #28]
 8103a7e:	00d2      	lsls	r2, r2, #3
 8103a80:	4920      	ldr	r1, [pc, #128]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a82:	4313      	orrs	r3, r2
 8103a84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103a86:	4b1f      	ldr	r3, [pc, #124]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a8a:	4a1e      	ldr	r2, [pc, #120]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103a92:	683b      	ldr	r3, [r7, #0]
 8103a94:	2b00      	cmp	r3, #0
 8103a96:	d106      	bne.n	8103aa6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103a98:	4b1a      	ldr	r3, [pc, #104]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a9c:	4a19      	ldr	r2, [pc, #100]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103aa4:	e00f      	b.n	8103ac6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103aa6:	683b      	ldr	r3, [r7, #0]
 8103aa8:	2b01      	cmp	r3, #1
 8103aaa:	d106      	bne.n	8103aba <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103aac:	4b15      	ldr	r3, [pc, #84]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ab0:	4a14      	ldr	r2, [pc, #80]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103ab8:	e005      	b.n	8103ac6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103aba:	4b12      	ldr	r3, [pc, #72]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103abe:	4a11      	ldr	r2, [pc, #68]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103ac6:	4b0f      	ldr	r3, [pc, #60]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	4a0e      	ldr	r2, [pc, #56]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103ad2:	f7fd fd55 	bl	8101580 <HAL_GetTick>
 8103ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103ad8:	e008      	b.n	8103aec <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103ada:	f7fd fd51 	bl	8101580 <HAL_GetTick>
 8103ade:	4602      	mov	r2, r0
 8103ae0:	68bb      	ldr	r3, [r7, #8]
 8103ae2:	1ad3      	subs	r3, r2, r3
 8103ae4:	2b02      	cmp	r3, #2
 8103ae6:	d901      	bls.n	8103aec <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103ae8:	2303      	movs	r3, #3
 8103aea:	e006      	b.n	8103afa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103aec:	4b05      	ldr	r3, [pc, #20]	; (8103b04 <RCCEx_PLL3_Config+0x160>)
 8103aee:	681b      	ldr	r3, [r3, #0]
 8103af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d0f0      	beq.n	8103ada <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8103afa:	4618      	mov	r0, r3
 8103afc:	3710      	adds	r7, #16
 8103afe:	46bd      	mov	sp, r7
 8103b00:	bd80      	pop	{r7, pc}
 8103b02:	bf00      	nop
 8103b04:	58024400 	.word	0x58024400

08103b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103b08:	b580      	push	{r7, lr}
 8103b0a:	b082      	sub	sp, #8
 8103b0c:	af00      	add	r7, sp, #0
 8103b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d101      	bne.n	8103b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103b16:	2301      	movs	r3, #1
 8103b18:	e049      	b.n	8103bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103b20:	b2db      	uxtb	r3, r3
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d106      	bne.n	8103b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	2200      	movs	r2, #0
 8103b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103b2e:	6878      	ldr	r0, [r7, #4]
 8103b30:	f7fd f9b0 	bl	8100e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	2202      	movs	r2, #2
 8103b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681a      	ldr	r2, [r3, #0]
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	3304      	adds	r3, #4
 8103b44:	4619      	mov	r1, r3
 8103b46:	4610      	mov	r0, r2
 8103b48:	f000 fbd0 	bl	81042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	2201      	movs	r2, #1
 8103b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	2201      	movs	r2, #1
 8103b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	2201      	movs	r2, #1
 8103b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	2201      	movs	r2, #1
 8103b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	2201      	movs	r2, #1
 8103b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	2201      	movs	r2, #1
 8103b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	2201      	movs	r2, #1
 8103b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	2201      	movs	r2, #1
 8103b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	2201      	movs	r2, #1
 8103b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	2201      	movs	r2, #1
 8103b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	2201      	movs	r2, #1
 8103ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	2201      	movs	r2, #1
 8103ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103bac:	2300      	movs	r3, #0
}
 8103bae:	4618      	mov	r0, r3
 8103bb0:	3708      	adds	r7, #8
 8103bb2:	46bd      	mov	sp, r7
 8103bb4:	bd80      	pop	{r7, pc}

08103bb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8103bb6:	b580      	push	{r7, lr}
 8103bb8:	b082      	sub	sp, #8
 8103bba:	af00      	add	r7, sp, #0
 8103bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	2b00      	cmp	r3, #0
 8103bc2:	d101      	bne.n	8103bc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8103bc4:	2301      	movs	r3, #1
 8103bc6:	e049      	b.n	8103c5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103bce:	b2db      	uxtb	r3, r3
 8103bd0:	2b00      	cmp	r3, #0
 8103bd2:	d106      	bne.n	8103be2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	2200      	movs	r2, #0
 8103bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8103bdc:	6878      	ldr	r0, [r7, #4]
 8103bde:	f7fd f937 	bl	8100e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	2202      	movs	r2, #2
 8103be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	681a      	ldr	r2, [r3, #0]
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	3304      	adds	r3, #4
 8103bf2:	4619      	mov	r1, r3
 8103bf4:	4610      	mov	r0, r2
 8103bf6:	f000 fb79 	bl	81042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	2201      	movs	r2, #1
 8103bfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	2201      	movs	r2, #1
 8103c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	2201      	movs	r2, #1
 8103c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	2201      	movs	r2, #1
 8103c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	2201      	movs	r2, #1
 8103c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	2201      	movs	r2, #1
 8103c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	2201      	movs	r2, #1
 8103c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	2201      	movs	r2, #1
 8103c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	2201      	movs	r2, #1
 8103c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	2201      	movs	r2, #1
 8103c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	2201      	movs	r2, #1
 8103c4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	2201      	movs	r2, #1
 8103c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103c5a:	2300      	movs	r3, #0
}
 8103c5c:	4618      	mov	r0, r3
 8103c5e:	3708      	adds	r7, #8
 8103c60:	46bd      	mov	sp, r7
 8103c62:	bd80      	pop	{r7, pc}

08103c64 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8103c64:	b580      	push	{r7, lr}
 8103c66:	b082      	sub	sp, #8
 8103c68:	af00      	add	r7, sp, #0
 8103c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	2202      	movs	r2, #2
 8103c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	6a1a      	ldr	r2, [r3, #32]
 8103c7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8103c7e:	4013      	ands	r3, r2
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d10f      	bne.n	8103ca4 <HAL_TIM_PWM_DeInit+0x40>
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	681b      	ldr	r3, [r3, #0]
 8103c88:	6a1a      	ldr	r2, [r3, #32]
 8103c8a:	f240 4344 	movw	r3, #1092	; 0x444
 8103c8e:	4013      	ands	r3, r2
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d107      	bne.n	8103ca4 <HAL_TIM_PWM_DeInit+0x40>
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	681b      	ldr	r3, [r3, #0]
 8103c98:	681a      	ldr	r2, [r3, #0]
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	f022 0201 	bic.w	r2, r2, #1
 8103ca2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8103ca4:	6878      	ldr	r0, [r7, #4]
 8103ca6:	f7fd f99b 	bl	8100fe0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	2200      	movs	r2, #0
 8103cae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	2200      	movs	r2, #0
 8103cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	2200      	movs	r2, #0
 8103cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	2200      	movs	r2, #0
 8103cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	2200      	movs	r2, #0
 8103cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	2200      	movs	r2, #0
 8103cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	2200      	movs	r2, #0
 8103cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	2200      	movs	r2, #0
 8103ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	2200      	movs	r2, #0
 8103cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	2200      	movs	r2, #0
 8103cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	2200      	movs	r2, #0
 8103cfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8103d02:	687b      	ldr	r3, [r7, #4]
 8103d04:	2200      	movs	r2, #0
 8103d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	2200      	movs	r2, #0
 8103d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8103d12:	2300      	movs	r3, #0
}
 8103d14:	4618      	mov	r0, r3
 8103d16:	3708      	adds	r7, #8
 8103d18:	46bd      	mov	sp, r7
 8103d1a:	bd80      	pop	{r7, pc}

08103d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8103d1c:	b580      	push	{r7, lr}
 8103d1e:	b084      	sub	sp, #16
 8103d20:	af00      	add	r7, sp, #0
 8103d22:	6078      	str	r0, [r7, #4]
 8103d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8103d26:	683b      	ldr	r3, [r7, #0]
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	d109      	bne.n	8103d40 <HAL_TIM_PWM_Start+0x24>
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103d32:	b2db      	uxtb	r3, r3
 8103d34:	2b01      	cmp	r3, #1
 8103d36:	bf14      	ite	ne
 8103d38:	2301      	movne	r3, #1
 8103d3a:	2300      	moveq	r3, #0
 8103d3c:	b2db      	uxtb	r3, r3
 8103d3e:	e03c      	b.n	8103dba <HAL_TIM_PWM_Start+0x9e>
 8103d40:	683b      	ldr	r3, [r7, #0]
 8103d42:	2b04      	cmp	r3, #4
 8103d44:	d109      	bne.n	8103d5a <HAL_TIM_PWM_Start+0x3e>
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103d4c:	b2db      	uxtb	r3, r3
 8103d4e:	2b01      	cmp	r3, #1
 8103d50:	bf14      	ite	ne
 8103d52:	2301      	movne	r3, #1
 8103d54:	2300      	moveq	r3, #0
 8103d56:	b2db      	uxtb	r3, r3
 8103d58:	e02f      	b.n	8103dba <HAL_TIM_PWM_Start+0x9e>
 8103d5a:	683b      	ldr	r3, [r7, #0]
 8103d5c:	2b08      	cmp	r3, #8
 8103d5e:	d109      	bne.n	8103d74 <HAL_TIM_PWM_Start+0x58>
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103d66:	b2db      	uxtb	r3, r3
 8103d68:	2b01      	cmp	r3, #1
 8103d6a:	bf14      	ite	ne
 8103d6c:	2301      	movne	r3, #1
 8103d6e:	2300      	moveq	r3, #0
 8103d70:	b2db      	uxtb	r3, r3
 8103d72:	e022      	b.n	8103dba <HAL_TIM_PWM_Start+0x9e>
 8103d74:	683b      	ldr	r3, [r7, #0]
 8103d76:	2b0c      	cmp	r3, #12
 8103d78:	d109      	bne.n	8103d8e <HAL_TIM_PWM_Start+0x72>
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103d80:	b2db      	uxtb	r3, r3
 8103d82:	2b01      	cmp	r3, #1
 8103d84:	bf14      	ite	ne
 8103d86:	2301      	movne	r3, #1
 8103d88:	2300      	moveq	r3, #0
 8103d8a:	b2db      	uxtb	r3, r3
 8103d8c:	e015      	b.n	8103dba <HAL_TIM_PWM_Start+0x9e>
 8103d8e:	683b      	ldr	r3, [r7, #0]
 8103d90:	2b10      	cmp	r3, #16
 8103d92:	d109      	bne.n	8103da8 <HAL_TIM_PWM_Start+0x8c>
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103d9a:	b2db      	uxtb	r3, r3
 8103d9c:	2b01      	cmp	r3, #1
 8103d9e:	bf14      	ite	ne
 8103da0:	2301      	movne	r3, #1
 8103da2:	2300      	moveq	r3, #0
 8103da4:	b2db      	uxtb	r3, r3
 8103da6:	e008      	b.n	8103dba <HAL_TIM_PWM_Start+0x9e>
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8103dae:	b2db      	uxtb	r3, r3
 8103db0:	2b01      	cmp	r3, #1
 8103db2:	bf14      	ite	ne
 8103db4:	2301      	movne	r3, #1
 8103db6:	2300      	moveq	r3, #0
 8103db8:	b2db      	uxtb	r3, r3
 8103dba:	2b00      	cmp	r3, #0
 8103dbc:	d001      	beq.n	8103dc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8103dbe:	2301      	movs	r3, #1
 8103dc0:	e09c      	b.n	8103efc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8103dc2:	683b      	ldr	r3, [r7, #0]
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d104      	bne.n	8103dd2 <HAL_TIM_PWM_Start+0xb6>
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	2202      	movs	r2, #2
 8103dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103dd0:	e023      	b.n	8103e1a <HAL_TIM_PWM_Start+0xfe>
 8103dd2:	683b      	ldr	r3, [r7, #0]
 8103dd4:	2b04      	cmp	r3, #4
 8103dd6:	d104      	bne.n	8103de2 <HAL_TIM_PWM_Start+0xc6>
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	2202      	movs	r2, #2
 8103ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103de0:	e01b      	b.n	8103e1a <HAL_TIM_PWM_Start+0xfe>
 8103de2:	683b      	ldr	r3, [r7, #0]
 8103de4:	2b08      	cmp	r3, #8
 8103de6:	d104      	bne.n	8103df2 <HAL_TIM_PWM_Start+0xd6>
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	2202      	movs	r2, #2
 8103dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103df0:	e013      	b.n	8103e1a <HAL_TIM_PWM_Start+0xfe>
 8103df2:	683b      	ldr	r3, [r7, #0]
 8103df4:	2b0c      	cmp	r3, #12
 8103df6:	d104      	bne.n	8103e02 <HAL_TIM_PWM_Start+0xe6>
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	2202      	movs	r2, #2
 8103dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103e00:	e00b      	b.n	8103e1a <HAL_TIM_PWM_Start+0xfe>
 8103e02:	683b      	ldr	r3, [r7, #0]
 8103e04:	2b10      	cmp	r3, #16
 8103e06:	d104      	bne.n	8103e12 <HAL_TIM_PWM_Start+0xf6>
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	2202      	movs	r2, #2
 8103e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103e10:	e003      	b.n	8103e1a <HAL_TIM_PWM_Start+0xfe>
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	2202      	movs	r2, #2
 8103e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	2201      	movs	r2, #1
 8103e20:	6839      	ldr	r1, [r7, #0]
 8103e22:	4618      	mov	r0, r3
 8103e24:	f000 fdca 	bl	81049bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	681b      	ldr	r3, [r3, #0]
 8103e2c:	4a35      	ldr	r2, [pc, #212]	; (8103f04 <HAL_TIM_PWM_Start+0x1e8>)
 8103e2e:	4293      	cmp	r3, r2
 8103e30:	d013      	beq.n	8103e5a <HAL_TIM_PWM_Start+0x13e>
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	4a34      	ldr	r2, [pc, #208]	; (8103f08 <HAL_TIM_PWM_Start+0x1ec>)
 8103e38:	4293      	cmp	r3, r2
 8103e3a:	d00e      	beq.n	8103e5a <HAL_TIM_PWM_Start+0x13e>
 8103e3c:	687b      	ldr	r3, [r7, #4]
 8103e3e:	681b      	ldr	r3, [r3, #0]
 8103e40:	4a32      	ldr	r2, [pc, #200]	; (8103f0c <HAL_TIM_PWM_Start+0x1f0>)
 8103e42:	4293      	cmp	r3, r2
 8103e44:	d009      	beq.n	8103e5a <HAL_TIM_PWM_Start+0x13e>
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	4a31      	ldr	r2, [pc, #196]	; (8103f10 <HAL_TIM_PWM_Start+0x1f4>)
 8103e4c:	4293      	cmp	r3, r2
 8103e4e:	d004      	beq.n	8103e5a <HAL_TIM_PWM_Start+0x13e>
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	681b      	ldr	r3, [r3, #0]
 8103e54:	4a2f      	ldr	r2, [pc, #188]	; (8103f14 <HAL_TIM_PWM_Start+0x1f8>)
 8103e56:	4293      	cmp	r3, r2
 8103e58:	d101      	bne.n	8103e5e <HAL_TIM_PWM_Start+0x142>
 8103e5a:	2301      	movs	r3, #1
 8103e5c:	e000      	b.n	8103e60 <HAL_TIM_PWM_Start+0x144>
 8103e5e:	2300      	movs	r3, #0
 8103e60:	2b00      	cmp	r3, #0
 8103e62:	d007      	beq.n	8103e74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	681b      	ldr	r3, [r3, #0]
 8103e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103e72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	681b      	ldr	r3, [r3, #0]
 8103e78:	4a22      	ldr	r2, [pc, #136]	; (8103f04 <HAL_TIM_PWM_Start+0x1e8>)
 8103e7a:	4293      	cmp	r3, r2
 8103e7c:	d01d      	beq.n	8103eba <HAL_TIM_PWM_Start+0x19e>
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	681b      	ldr	r3, [r3, #0]
 8103e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e86:	d018      	beq.n	8103eba <HAL_TIM_PWM_Start+0x19e>
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	4a22      	ldr	r2, [pc, #136]	; (8103f18 <HAL_TIM_PWM_Start+0x1fc>)
 8103e8e:	4293      	cmp	r3, r2
 8103e90:	d013      	beq.n	8103eba <HAL_TIM_PWM_Start+0x19e>
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	681b      	ldr	r3, [r3, #0]
 8103e96:	4a21      	ldr	r2, [pc, #132]	; (8103f1c <HAL_TIM_PWM_Start+0x200>)
 8103e98:	4293      	cmp	r3, r2
 8103e9a:	d00e      	beq.n	8103eba <HAL_TIM_PWM_Start+0x19e>
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	4a1f      	ldr	r2, [pc, #124]	; (8103f20 <HAL_TIM_PWM_Start+0x204>)
 8103ea2:	4293      	cmp	r3, r2
 8103ea4:	d009      	beq.n	8103eba <HAL_TIM_PWM_Start+0x19e>
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	681b      	ldr	r3, [r3, #0]
 8103eaa:	4a17      	ldr	r2, [pc, #92]	; (8103f08 <HAL_TIM_PWM_Start+0x1ec>)
 8103eac:	4293      	cmp	r3, r2
 8103eae:	d004      	beq.n	8103eba <HAL_TIM_PWM_Start+0x19e>
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	4a1b      	ldr	r2, [pc, #108]	; (8103f24 <HAL_TIM_PWM_Start+0x208>)
 8103eb6:	4293      	cmp	r3, r2
 8103eb8:	d115      	bne.n	8103ee6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	689a      	ldr	r2, [r3, #8]
 8103ec0:	4b19      	ldr	r3, [pc, #100]	; (8103f28 <HAL_TIM_PWM_Start+0x20c>)
 8103ec2:	4013      	ands	r3, r2
 8103ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103ec6:	68fb      	ldr	r3, [r7, #12]
 8103ec8:	2b06      	cmp	r3, #6
 8103eca:	d015      	beq.n	8103ef8 <HAL_TIM_PWM_Start+0x1dc>
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103ed2:	d011      	beq.n	8103ef8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	681b      	ldr	r3, [r3, #0]
 8103ed8:	681a      	ldr	r2, [r3, #0]
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	681b      	ldr	r3, [r3, #0]
 8103ede:	f042 0201 	orr.w	r2, r2, #1
 8103ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103ee4:	e008      	b.n	8103ef8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	681a      	ldr	r2, [r3, #0]
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	681b      	ldr	r3, [r3, #0]
 8103ef0:	f042 0201 	orr.w	r2, r2, #1
 8103ef4:	601a      	str	r2, [r3, #0]
 8103ef6:	e000      	b.n	8103efa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103efa:	2300      	movs	r3, #0
}
 8103efc:	4618      	mov	r0, r3
 8103efe:	3710      	adds	r7, #16
 8103f00:	46bd      	mov	sp, r7
 8103f02:	bd80      	pop	{r7, pc}
 8103f04:	40010000 	.word	0x40010000
 8103f08:	40010400 	.word	0x40010400
 8103f0c:	40014000 	.word	0x40014000
 8103f10:	40014400 	.word	0x40014400
 8103f14:	40014800 	.word	0x40014800
 8103f18:	40000400 	.word	0x40000400
 8103f1c:	40000800 	.word	0x40000800
 8103f20:	40000c00 	.word	0x40000c00
 8103f24:	40001800 	.word	0x40001800
 8103f28:	00010007 	.word	0x00010007

08103f2c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8103f2c:	b580      	push	{r7, lr}
 8103f2e:	b082      	sub	sp, #8
 8103f30:	af00      	add	r7, sp, #0
 8103f32:	6078      	str	r0, [r7, #4]
 8103f34:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	d101      	bne.n	8103f40 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8103f3c:	2301      	movs	r3, #1
 8103f3e:	e041      	b.n	8103fc4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103f46:	b2db      	uxtb	r3, r3
 8103f48:	2b00      	cmp	r3, #0
 8103f4a:	d106      	bne.n	8103f5a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	2200      	movs	r2, #0
 8103f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8103f54:	6878      	ldr	r0, [r7, #4]
 8103f56:	f000 f839 	bl	8103fcc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	2202      	movs	r2, #2
 8103f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	681a      	ldr	r2, [r3, #0]
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	3304      	adds	r3, #4
 8103f6a:	4619      	mov	r1, r3
 8103f6c:	4610      	mov	r0, r2
 8103f6e:	f000 f9bd 	bl	81042ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	681a      	ldr	r2, [r3, #0]
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	f022 0208 	bic.w	r2, r2, #8
 8103f80:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	6819      	ldr	r1, [r3, #0]
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	683a      	ldr	r2, [r7, #0]
 8103f8e:	430a      	orrs	r2, r1
 8103f90:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	2201      	movs	r2, #1
 8103f96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	2201      	movs	r2, #1
 8103f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	2201      	movs	r2, #1
 8103fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	2201      	movs	r2, #1
 8103fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	2201      	movs	r2, #1
 8103fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	2201      	movs	r2, #1
 8103fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103fc2:	2300      	movs	r3, #0
}
 8103fc4:	4618      	mov	r0, r3
 8103fc6:	3708      	adds	r7, #8
 8103fc8:	46bd      	mov	sp, r7
 8103fca:	bd80      	pop	{r7, pc}

08103fcc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8103fcc:	b480      	push	{r7}
 8103fce:	b083      	sub	sp, #12
 8103fd0:	af00      	add	r7, sp, #0
 8103fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8103fd4:	bf00      	nop
 8103fd6:	370c      	adds	r7, #12
 8103fd8:	46bd      	mov	sp, r7
 8103fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fde:	4770      	bx	lr

08103fe0 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8103fe0:	b580      	push	{r7, lr}
 8103fe2:	b084      	sub	sp, #16
 8103fe4:	af00      	add	r7, sp, #0
 8103fe6:	6078      	str	r0, [r7, #4]
 8103fe8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103ff0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103ff8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8104000:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8104008:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810400a:	7bfb      	ldrb	r3, [r7, #15]
 810400c:	2b01      	cmp	r3, #1
 810400e:	d108      	bne.n	8104022 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8104010:	7bbb      	ldrb	r3, [r7, #14]
 8104012:	2b01      	cmp	r3, #1
 8104014:	d105      	bne.n	8104022 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8104016:	7b7b      	ldrb	r3, [r7, #13]
 8104018:	2b01      	cmp	r3, #1
 810401a:	d102      	bne.n	8104022 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 810401c:	7b3b      	ldrb	r3, [r7, #12]
 810401e:	2b01      	cmp	r3, #1
 8104020:	d001      	beq.n	8104026 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8104022:	2301      	movs	r3, #1
 8104024:	e044      	b.n	81040b0 <HAL_TIM_OnePulse_Start+0xd0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	2202      	movs	r2, #2
 810402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	2202      	movs	r2, #2
 8104032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	2202      	movs	r2, #2
 810403a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	2202      	movs	r2, #2
 8104042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	2201      	movs	r2, #1
 810404c:	2100      	movs	r1, #0
 810404e:	4618      	mov	r0, r3
 8104050:	f000 fcb4 	bl	81049bc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	2201      	movs	r2, #1
 810405a:	2104      	movs	r1, #4
 810405c:	4618      	mov	r0, r3
 810405e:	f000 fcad 	bl	81049bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	4a14      	ldr	r2, [pc, #80]	; (81040b8 <HAL_TIM_OnePulse_Start+0xd8>)
 8104068:	4293      	cmp	r3, r2
 810406a:	d013      	beq.n	8104094 <HAL_TIM_OnePulse_Start+0xb4>
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	681b      	ldr	r3, [r3, #0]
 8104070:	4a12      	ldr	r2, [pc, #72]	; (81040bc <HAL_TIM_OnePulse_Start+0xdc>)
 8104072:	4293      	cmp	r3, r2
 8104074:	d00e      	beq.n	8104094 <HAL_TIM_OnePulse_Start+0xb4>
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	4a11      	ldr	r2, [pc, #68]	; (81040c0 <HAL_TIM_OnePulse_Start+0xe0>)
 810407c:	4293      	cmp	r3, r2
 810407e:	d009      	beq.n	8104094 <HAL_TIM_OnePulse_Start+0xb4>
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	4a0f      	ldr	r2, [pc, #60]	; (81040c4 <HAL_TIM_OnePulse_Start+0xe4>)
 8104086:	4293      	cmp	r3, r2
 8104088:	d004      	beq.n	8104094 <HAL_TIM_OnePulse_Start+0xb4>
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	681b      	ldr	r3, [r3, #0]
 810408e:	4a0e      	ldr	r2, [pc, #56]	; (81040c8 <HAL_TIM_OnePulse_Start+0xe8>)
 8104090:	4293      	cmp	r3, r2
 8104092:	d101      	bne.n	8104098 <HAL_TIM_OnePulse_Start+0xb8>
 8104094:	2301      	movs	r3, #1
 8104096:	e000      	b.n	810409a <HAL_TIM_OnePulse_Start+0xba>
 8104098:	2300      	movs	r3, #0
 810409a:	2b00      	cmp	r3, #0
 810409c:	d007      	beq.n	81040ae <HAL_TIM_OnePulse_Start+0xce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81040ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 81040ae:	2300      	movs	r3, #0
}
 81040b0:	4618      	mov	r0, r3
 81040b2:	3710      	adds	r7, #16
 81040b4:	46bd      	mov	sp, r7
 81040b6:	bd80      	pop	{r7, pc}
 81040b8:	40010000 	.word	0x40010000
 81040bc:	40010400 	.word	0x40010400
 81040c0:	40014000 	.word	0x40014000
 81040c4:	40014400 	.word	0x40014400
 81040c8:	40014800 	.word	0x40014800

081040cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81040cc:	b580      	push	{r7, lr}
 81040ce:	b084      	sub	sp, #16
 81040d0:	af00      	add	r7, sp, #0
 81040d2:	60f8      	str	r0, [r7, #12]
 81040d4:	60b9      	str	r1, [r7, #8]
 81040d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81040d8:	68fb      	ldr	r3, [r7, #12]
 81040da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81040de:	2b01      	cmp	r3, #1
 81040e0:	d101      	bne.n	81040e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 81040e2:	2302      	movs	r3, #2
 81040e4:	e0fd      	b.n	81042e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	2201      	movs	r2, #1
 81040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	2b14      	cmp	r3, #20
 81040f2:	f200 80f0 	bhi.w	81042d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 81040f6:	a201      	add	r2, pc, #4	; (adr r2, 81040fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 81040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040fc:	08104151 	.word	0x08104151
 8104100:	081042d7 	.word	0x081042d7
 8104104:	081042d7 	.word	0x081042d7
 8104108:	081042d7 	.word	0x081042d7
 810410c:	08104191 	.word	0x08104191
 8104110:	081042d7 	.word	0x081042d7
 8104114:	081042d7 	.word	0x081042d7
 8104118:	081042d7 	.word	0x081042d7
 810411c:	081041d3 	.word	0x081041d3
 8104120:	081042d7 	.word	0x081042d7
 8104124:	081042d7 	.word	0x081042d7
 8104128:	081042d7 	.word	0x081042d7
 810412c:	08104213 	.word	0x08104213
 8104130:	081042d7 	.word	0x081042d7
 8104134:	081042d7 	.word	0x081042d7
 8104138:	081042d7 	.word	0x081042d7
 810413c:	08104255 	.word	0x08104255
 8104140:	081042d7 	.word	0x081042d7
 8104144:	081042d7 	.word	0x081042d7
 8104148:	081042d7 	.word	0x081042d7
 810414c:	08104295 	.word	0x08104295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8104150:	68fb      	ldr	r3, [r7, #12]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	68b9      	ldr	r1, [r7, #8]
 8104156:	4618      	mov	r0, r3
 8104158:	f000 f962 	bl	8104420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810415c:	68fb      	ldr	r3, [r7, #12]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	699a      	ldr	r2, [r3, #24]
 8104162:	68fb      	ldr	r3, [r7, #12]
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	f042 0208 	orr.w	r2, r2, #8
 810416a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810416c:	68fb      	ldr	r3, [r7, #12]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	699a      	ldr	r2, [r3, #24]
 8104172:	68fb      	ldr	r3, [r7, #12]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	f022 0204 	bic.w	r2, r2, #4
 810417a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810417c:	68fb      	ldr	r3, [r7, #12]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	6999      	ldr	r1, [r3, #24]
 8104182:	68bb      	ldr	r3, [r7, #8]
 8104184:	691a      	ldr	r2, [r3, #16]
 8104186:	68fb      	ldr	r3, [r7, #12]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	430a      	orrs	r2, r1
 810418c:	619a      	str	r2, [r3, #24]
      break;
 810418e:	e0a3      	b.n	81042d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	68b9      	ldr	r1, [r7, #8]
 8104196:	4618      	mov	r0, r3
 8104198:	f000 f9d2 	bl	8104540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810419c:	68fb      	ldr	r3, [r7, #12]
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	699a      	ldr	r2, [r3, #24]
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81041aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	699a      	ldr	r2, [r3, #24]
 81041b2:	68fb      	ldr	r3, [r7, #12]
 81041b4:	681b      	ldr	r3, [r3, #0]
 81041b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81041ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81041bc:	68fb      	ldr	r3, [r7, #12]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	6999      	ldr	r1, [r3, #24]
 81041c2:	68bb      	ldr	r3, [r7, #8]
 81041c4:	691b      	ldr	r3, [r3, #16]
 81041c6:	021a      	lsls	r2, r3, #8
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	430a      	orrs	r2, r1
 81041ce:	619a      	str	r2, [r3, #24]
      break;
 81041d0:	e082      	b.n	81042d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81041d2:	68fb      	ldr	r3, [r7, #12]
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	68b9      	ldr	r1, [r7, #8]
 81041d8:	4618      	mov	r0, r3
 81041da:	f000 fa3b 	bl	8104654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81041de:	68fb      	ldr	r3, [r7, #12]
 81041e0:	681b      	ldr	r3, [r3, #0]
 81041e2:	69da      	ldr	r2, [r3, #28]
 81041e4:	68fb      	ldr	r3, [r7, #12]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	f042 0208 	orr.w	r2, r2, #8
 81041ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81041ee:	68fb      	ldr	r3, [r7, #12]
 81041f0:	681b      	ldr	r3, [r3, #0]
 81041f2:	69da      	ldr	r2, [r3, #28]
 81041f4:	68fb      	ldr	r3, [r7, #12]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	f022 0204 	bic.w	r2, r2, #4
 81041fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81041fe:	68fb      	ldr	r3, [r7, #12]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	69d9      	ldr	r1, [r3, #28]
 8104204:	68bb      	ldr	r3, [r7, #8]
 8104206:	691a      	ldr	r2, [r3, #16]
 8104208:	68fb      	ldr	r3, [r7, #12]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	430a      	orrs	r2, r1
 810420e:	61da      	str	r2, [r3, #28]
      break;
 8104210:	e062      	b.n	81042d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8104212:	68fb      	ldr	r3, [r7, #12]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	68b9      	ldr	r1, [r7, #8]
 8104218:	4618      	mov	r0, r3
 810421a:	f000 faa1 	bl	8104760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810421e:	68fb      	ldr	r3, [r7, #12]
 8104220:	681b      	ldr	r3, [r3, #0]
 8104222:	69da      	ldr	r2, [r3, #28]
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810422c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810422e:	68fb      	ldr	r3, [r7, #12]
 8104230:	681b      	ldr	r3, [r3, #0]
 8104232:	69da      	ldr	r2, [r3, #28]
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810423c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810423e:	68fb      	ldr	r3, [r7, #12]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	69d9      	ldr	r1, [r3, #28]
 8104244:	68bb      	ldr	r3, [r7, #8]
 8104246:	691b      	ldr	r3, [r3, #16]
 8104248:	021a      	lsls	r2, r3, #8
 810424a:	68fb      	ldr	r3, [r7, #12]
 810424c:	681b      	ldr	r3, [r3, #0]
 810424e:	430a      	orrs	r2, r1
 8104250:	61da      	str	r2, [r3, #28]
      break;
 8104252:	e041      	b.n	81042d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8104254:	68fb      	ldr	r3, [r7, #12]
 8104256:	681b      	ldr	r3, [r3, #0]
 8104258:	68b9      	ldr	r1, [r7, #8]
 810425a:	4618      	mov	r0, r3
 810425c:	f000 fae8 	bl	8104830 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104266:	68fb      	ldr	r3, [r7, #12]
 8104268:	681b      	ldr	r3, [r3, #0]
 810426a:	f042 0208 	orr.w	r2, r2, #8
 810426e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8104270:	68fb      	ldr	r3, [r7, #12]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104276:	68fb      	ldr	r3, [r7, #12]
 8104278:	681b      	ldr	r3, [r3, #0]
 810427a:	f022 0204 	bic.w	r2, r2, #4
 810427e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104280:	68fb      	ldr	r3, [r7, #12]
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104286:	68bb      	ldr	r3, [r7, #8]
 8104288:	691a      	ldr	r2, [r3, #16]
 810428a:	68fb      	ldr	r3, [r7, #12]
 810428c:	681b      	ldr	r3, [r3, #0]
 810428e:	430a      	orrs	r2, r1
 8104290:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104292:	e021      	b.n	81042d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8104294:	68fb      	ldr	r3, [r7, #12]
 8104296:	681b      	ldr	r3, [r3, #0]
 8104298:	68b9      	ldr	r1, [r7, #8]
 810429a:	4618      	mov	r0, r3
 810429c:	f000 fb2a 	bl	81048f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81042a6:	68fb      	ldr	r3, [r7, #12]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81042ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81042b0:	68fb      	ldr	r3, [r7, #12]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81042b6:	68fb      	ldr	r3, [r7, #12]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81042be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81042c0:	68fb      	ldr	r3, [r7, #12]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81042c6:	68bb      	ldr	r3, [r7, #8]
 81042c8:	691b      	ldr	r3, [r3, #16]
 81042ca:	021a      	lsls	r2, r3, #8
 81042cc:	68fb      	ldr	r3, [r7, #12]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	430a      	orrs	r2, r1
 81042d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81042d4:	e000      	b.n	81042d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 81042d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81042d8:	68fb      	ldr	r3, [r7, #12]
 81042da:	2200      	movs	r2, #0
 81042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81042e0:	2300      	movs	r3, #0
}
 81042e2:	4618      	mov	r0, r3
 81042e4:	3710      	adds	r7, #16
 81042e6:	46bd      	mov	sp, r7
 81042e8:	bd80      	pop	{r7, pc}
 81042ea:	bf00      	nop

081042ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81042ec:	b480      	push	{r7}
 81042ee:	b085      	sub	sp, #20
 81042f0:	af00      	add	r7, sp, #0
 81042f2:	6078      	str	r0, [r7, #4]
 81042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	4a40      	ldr	r2, [pc, #256]	; (8104400 <TIM_Base_SetConfig+0x114>)
 8104300:	4293      	cmp	r3, r2
 8104302:	d013      	beq.n	810432c <TIM_Base_SetConfig+0x40>
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810430a:	d00f      	beq.n	810432c <TIM_Base_SetConfig+0x40>
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	4a3d      	ldr	r2, [pc, #244]	; (8104404 <TIM_Base_SetConfig+0x118>)
 8104310:	4293      	cmp	r3, r2
 8104312:	d00b      	beq.n	810432c <TIM_Base_SetConfig+0x40>
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	4a3c      	ldr	r2, [pc, #240]	; (8104408 <TIM_Base_SetConfig+0x11c>)
 8104318:	4293      	cmp	r3, r2
 810431a:	d007      	beq.n	810432c <TIM_Base_SetConfig+0x40>
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	4a3b      	ldr	r2, [pc, #236]	; (810440c <TIM_Base_SetConfig+0x120>)
 8104320:	4293      	cmp	r3, r2
 8104322:	d003      	beq.n	810432c <TIM_Base_SetConfig+0x40>
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	4a3a      	ldr	r2, [pc, #232]	; (8104410 <TIM_Base_SetConfig+0x124>)
 8104328:	4293      	cmp	r3, r2
 810432a:	d108      	bne.n	810433e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810432c:	68fb      	ldr	r3, [r7, #12]
 810432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8104334:	683b      	ldr	r3, [r7, #0]
 8104336:	685b      	ldr	r3, [r3, #4]
 8104338:	68fa      	ldr	r2, [r7, #12]
 810433a:	4313      	orrs	r3, r2
 810433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	4a2f      	ldr	r2, [pc, #188]	; (8104400 <TIM_Base_SetConfig+0x114>)
 8104342:	4293      	cmp	r3, r2
 8104344:	d01f      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810434c:	d01b      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	4a2c      	ldr	r2, [pc, #176]	; (8104404 <TIM_Base_SetConfig+0x118>)
 8104352:	4293      	cmp	r3, r2
 8104354:	d017      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	4a2b      	ldr	r2, [pc, #172]	; (8104408 <TIM_Base_SetConfig+0x11c>)
 810435a:	4293      	cmp	r3, r2
 810435c:	d013      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	4a2a      	ldr	r2, [pc, #168]	; (810440c <TIM_Base_SetConfig+0x120>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d00f      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	4a29      	ldr	r2, [pc, #164]	; (8104410 <TIM_Base_SetConfig+0x124>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d00b      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	4a28      	ldr	r2, [pc, #160]	; (8104414 <TIM_Base_SetConfig+0x128>)
 8104372:	4293      	cmp	r3, r2
 8104374:	d007      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	4a27      	ldr	r2, [pc, #156]	; (8104418 <TIM_Base_SetConfig+0x12c>)
 810437a:	4293      	cmp	r3, r2
 810437c:	d003      	beq.n	8104386 <TIM_Base_SetConfig+0x9a>
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	4a26      	ldr	r2, [pc, #152]	; (810441c <TIM_Base_SetConfig+0x130>)
 8104382:	4293      	cmp	r3, r2
 8104384:	d108      	bne.n	8104398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810438c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810438e:	683b      	ldr	r3, [r7, #0]
 8104390:	68db      	ldr	r3, [r3, #12]
 8104392:	68fa      	ldr	r2, [r7, #12]
 8104394:	4313      	orrs	r3, r2
 8104396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810439e:	683b      	ldr	r3, [r7, #0]
 81043a0:	695b      	ldr	r3, [r3, #20]
 81043a2:	4313      	orrs	r3, r2
 81043a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	68fa      	ldr	r2, [r7, #12]
 81043aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81043ac:	683b      	ldr	r3, [r7, #0]
 81043ae:	689a      	ldr	r2, [r3, #8]
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81043b4:	683b      	ldr	r3, [r7, #0]
 81043b6:	681a      	ldr	r2, [r3, #0]
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	4a10      	ldr	r2, [pc, #64]	; (8104400 <TIM_Base_SetConfig+0x114>)
 81043c0:	4293      	cmp	r3, r2
 81043c2:	d00f      	beq.n	81043e4 <TIM_Base_SetConfig+0xf8>
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	4a12      	ldr	r2, [pc, #72]	; (8104410 <TIM_Base_SetConfig+0x124>)
 81043c8:	4293      	cmp	r3, r2
 81043ca:	d00b      	beq.n	81043e4 <TIM_Base_SetConfig+0xf8>
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	4a11      	ldr	r2, [pc, #68]	; (8104414 <TIM_Base_SetConfig+0x128>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d007      	beq.n	81043e4 <TIM_Base_SetConfig+0xf8>
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	4a10      	ldr	r2, [pc, #64]	; (8104418 <TIM_Base_SetConfig+0x12c>)
 81043d8:	4293      	cmp	r3, r2
 81043da:	d003      	beq.n	81043e4 <TIM_Base_SetConfig+0xf8>
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	4a0f      	ldr	r2, [pc, #60]	; (810441c <TIM_Base_SetConfig+0x130>)
 81043e0:	4293      	cmp	r3, r2
 81043e2:	d103      	bne.n	81043ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81043e4:	683b      	ldr	r3, [r7, #0]
 81043e6:	691a      	ldr	r2, [r3, #16]
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	2201      	movs	r2, #1
 81043f0:	615a      	str	r2, [r3, #20]
}
 81043f2:	bf00      	nop
 81043f4:	3714      	adds	r7, #20
 81043f6:	46bd      	mov	sp, r7
 81043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043fc:	4770      	bx	lr
 81043fe:	bf00      	nop
 8104400:	40010000 	.word	0x40010000
 8104404:	40000400 	.word	0x40000400
 8104408:	40000800 	.word	0x40000800
 810440c:	40000c00 	.word	0x40000c00
 8104410:	40010400 	.word	0x40010400
 8104414:	40014000 	.word	0x40014000
 8104418:	40014400 	.word	0x40014400
 810441c:	40014800 	.word	0x40014800

08104420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104420:	b480      	push	{r7}
 8104422:	b087      	sub	sp, #28
 8104424:	af00      	add	r7, sp, #0
 8104426:	6078      	str	r0, [r7, #4]
 8104428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	6a1b      	ldr	r3, [r3, #32]
 810442e:	f023 0201 	bic.w	r2, r3, #1
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	6a1b      	ldr	r3, [r3, #32]
 810443a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	685b      	ldr	r3, [r3, #4]
 8104440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	699b      	ldr	r3, [r3, #24]
 8104446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8104454:	68fb      	ldr	r3, [r7, #12]
 8104456:	f023 0303 	bic.w	r3, r3, #3
 810445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810445c:	683b      	ldr	r3, [r7, #0]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	68fa      	ldr	r2, [r7, #12]
 8104462:	4313      	orrs	r3, r2
 8104464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8104466:	697b      	ldr	r3, [r7, #20]
 8104468:	f023 0302 	bic.w	r3, r3, #2
 810446c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810446e:	683b      	ldr	r3, [r7, #0]
 8104470:	689b      	ldr	r3, [r3, #8]
 8104472:	697a      	ldr	r2, [r7, #20]
 8104474:	4313      	orrs	r3, r2
 8104476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8104478:	687b      	ldr	r3, [r7, #4]
 810447a:	4a2c      	ldr	r2, [pc, #176]	; (810452c <TIM_OC1_SetConfig+0x10c>)
 810447c:	4293      	cmp	r3, r2
 810447e:	d00f      	beq.n	81044a0 <TIM_OC1_SetConfig+0x80>
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	4a2b      	ldr	r2, [pc, #172]	; (8104530 <TIM_OC1_SetConfig+0x110>)
 8104484:	4293      	cmp	r3, r2
 8104486:	d00b      	beq.n	81044a0 <TIM_OC1_SetConfig+0x80>
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	4a2a      	ldr	r2, [pc, #168]	; (8104534 <TIM_OC1_SetConfig+0x114>)
 810448c:	4293      	cmp	r3, r2
 810448e:	d007      	beq.n	81044a0 <TIM_OC1_SetConfig+0x80>
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	4a29      	ldr	r2, [pc, #164]	; (8104538 <TIM_OC1_SetConfig+0x118>)
 8104494:	4293      	cmp	r3, r2
 8104496:	d003      	beq.n	81044a0 <TIM_OC1_SetConfig+0x80>
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	4a28      	ldr	r2, [pc, #160]	; (810453c <TIM_OC1_SetConfig+0x11c>)
 810449c:	4293      	cmp	r3, r2
 810449e:	d10c      	bne.n	81044ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81044a0:	697b      	ldr	r3, [r7, #20]
 81044a2:	f023 0308 	bic.w	r3, r3, #8
 81044a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81044a8:	683b      	ldr	r3, [r7, #0]
 81044aa:	68db      	ldr	r3, [r3, #12]
 81044ac:	697a      	ldr	r2, [r7, #20]
 81044ae:	4313      	orrs	r3, r2
 81044b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81044b2:	697b      	ldr	r3, [r7, #20]
 81044b4:	f023 0304 	bic.w	r3, r3, #4
 81044b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	4a1b      	ldr	r2, [pc, #108]	; (810452c <TIM_OC1_SetConfig+0x10c>)
 81044be:	4293      	cmp	r3, r2
 81044c0:	d00f      	beq.n	81044e2 <TIM_OC1_SetConfig+0xc2>
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	4a1a      	ldr	r2, [pc, #104]	; (8104530 <TIM_OC1_SetConfig+0x110>)
 81044c6:	4293      	cmp	r3, r2
 81044c8:	d00b      	beq.n	81044e2 <TIM_OC1_SetConfig+0xc2>
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	4a19      	ldr	r2, [pc, #100]	; (8104534 <TIM_OC1_SetConfig+0x114>)
 81044ce:	4293      	cmp	r3, r2
 81044d0:	d007      	beq.n	81044e2 <TIM_OC1_SetConfig+0xc2>
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	4a18      	ldr	r2, [pc, #96]	; (8104538 <TIM_OC1_SetConfig+0x118>)
 81044d6:	4293      	cmp	r3, r2
 81044d8:	d003      	beq.n	81044e2 <TIM_OC1_SetConfig+0xc2>
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	4a17      	ldr	r2, [pc, #92]	; (810453c <TIM_OC1_SetConfig+0x11c>)
 81044de:	4293      	cmp	r3, r2
 81044e0:	d111      	bne.n	8104506 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81044e2:	693b      	ldr	r3, [r7, #16]
 81044e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81044e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81044ea:	693b      	ldr	r3, [r7, #16]
 81044ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81044f2:	683b      	ldr	r3, [r7, #0]
 81044f4:	695b      	ldr	r3, [r3, #20]
 81044f6:	693a      	ldr	r2, [r7, #16]
 81044f8:	4313      	orrs	r3, r2
 81044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81044fc:	683b      	ldr	r3, [r7, #0]
 81044fe:	699b      	ldr	r3, [r3, #24]
 8104500:	693a      	ldr	r2, [r7, #16]
 8104502:	4313      	orrs	r3, r2
 8104504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104506:	687b      	ldr	r3, [r7, #4]
 8104508:	693a      	ldr	r2, [r7, #16]
 810450a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	68fa      	ldr	r2, [r7, #12]
 8104510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8104512:	683b      	ldr	r3, [r7, #0]
 8104514:	685a      	ldr	r2, [r3, #4]
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	697a      	ldr	r2, [r7, #20]
 810451e:	621a      	str	r2, [r3, #32]
}
 8104520:	bf00      	nop
 8104522:	371c      	adds	r7, #28
 8104524:	46bd      	mov	sp, r7
 8104526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810452a:	4770      	bx	lr
 810452c:	40010000 	.word	0x40010000
 8104530:	40010400 	.word	0x40010400
 8104534:	40014000 	.word	0x40014000
 8104538:	40014400 	.word	0x40014400
 810453c:	40014800 	.word	0x40014800

08104540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104540:	b480      	push	{r7}
 8104542:	b087      	sub	sp, #28
 8104544:	af00      	add	r7, sp, #0
 8104546:	6078      	str	r0, [r7, #4]
 8104548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	6a1b      	ldr	r3, [r3, #32]
 810454e:	f023 0210 	bic.w	r2, r3, #16
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	6a1b      	ldr	r3, [r3, #32]
 810455a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	685b      	ldr	r3, [r3, #4]
 8104560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	699b      	ldr	r3, [r3, #24]
 8104566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810456e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8104574:	68fb      	ldr	r3, [r7, #12]
 8104576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810457a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810457c:	683b      	ldr	r3, [r7, #0]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	021b      	lsls	r3, r3, #8
 8104582:	68fa      	ldr	r2, [r7, #12]
 8104584:	4313      	orrs	r3, r2
 8104586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8104588:	697b      	ldr	r3, [r7, #20]
 810458a:	f023 0320 	bic.w	r3, r3, #32
 810458e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8104590:	683b      	ldr	r3, [r7, #0]
 8104592:	689b      	ldr	r3, [r3, #8]
 8104594:	011b      	lsls	r3, r3, #4
 8104596:	697a      	ldr	r2, [r7, #20]
 8104598:	4313      	orrs	r3, r2
 810459a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	4a28      	ldr	r2, [pc, #160]	; (8104640 <TIM_OC2_SetConfig+0x100>)
 81045a0:	4293      	cmp	r3, r2
 81045a2:	d003      	beq.n	81045ac <TIM_OC2_SetConfig+0x6c>
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	4a27      	ldr	r2, [pc, #156]	; (8104644 <TIM_OC2_SetConfig+0x104>)
 81045a8:	4293      	cmp	r3, r2
 81045aa:	d10d      	bne.n	81045c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81045ac:	697b      	ldr	r3, [r7, #20]
 81045ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81045b4:	683b      	ldr	r3, [r7, #0]
 81045b6:	68db      	ldr	r3, [r3, #12]
 81045b8:	011b      	lsls	r3, r3, #4
 81045ba:	697a      	ldr	r2, [r7, #20]
 81045bc:	4313      	orrs	r3, r2
 81045be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81045c0:	697b      	ldr	r3, [r7, #20]
 81045c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81045c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	4a1d      	ldr	r2, [pc, #116]	; (8104640 <TIM_OC2_SetConfig+0x100>)
 81045cc:	4293      	cmp	r3, r2
 81045ce:	d00f      	beq.n	81045f0 <TIM_OC2_SetConfig+0xb0>
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	4a1c      	ldr	r2, [pc, #112]	; (8104644 <TIM_OC2_SetConfig+0x104>)
 81045d4:	4293      	cmp	r3, r2
 81045d6:	d00b      	beq.n	81045f0 <TIM_OC2_SetConfig+0xb0>
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	4a1b      	ldr	r2, [pc, #108]	; (8104648 <TIM_OC2_SetConfig+0x108>)
 81045dc:	4293      	cmp	r3, r2
 81045de:	d007      	beq.n	81045f0 <TIM_OC2_SetConfig+0xb0>
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	4a1a      	ldr	r2, [pc, #104]	; (810464c <TIM_OC2_SetConfig+0x10c>)
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d003      	beq.n	81045f0 <TIM_OC2_SetConfig+0xb0>
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	4a19      	ldr	r2, [pc, #100]	; (8104650 <TIM_OC2_SetConfig+0x110>)
 81045ec:	4293      	cmp	r3, r2
 81045ee:	d113      	bne.n	8104618 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81045f0:	693b      	ldr	r3, [r7, #16]
 81045f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81045f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81045f8:	693b      	ldr	r3, [r7, #16]
 81045fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81045fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8104600:	683b      	ldr	r3, [r7, #0]
 8104602:	695b      	ldr	r3, [r3, #20]
 8104604:	009b      	lsls	r3, r3, #2
 8104606:	693a      	ldr	r2, [r7, #16]
 8104608:	4313      	orrs	r3, r2
 810460a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810460c:	683b      	ldr	r3, [r7, #0]
 810460e:	699b      	ldr	r3, [r3, #24]
 8104610:	009b      	lsls	r3, r3, #2
 8104612:	693a      	ldr	r2, [r7, #16]
 8104614:	4313      	orrs	r3, r2
 8104616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	693a      	ldr	r2, [r7, #16]
 810461c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	68fa      	ldr	r2, [r7, #12]
 8104622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8104624:	683b      	ldr	r3, [r7, #0]
 8104626:	685a      	ldr	r2, [r3, #4]
 8104628:	687b      	ldr	r3, [r7, #4]
 810462a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	697a      	ldr	r2, [r7, #20]
 8104630:	621a      	str	r2, [r3, #32]
}
 8104632:	bf00      	nop
 8104634:	371c      	adds	r7, #28
 8104636:	46bd      	mov	sp, r7
 8104638:	f85d 7b04 	ldr.w	r7, [sp], #4
 810463c:	4770      	bx	lr
 810463e:	bf00      	nop
 8104640:	40010000 	.word	0x40010000
 8104644:	40010400 	.word	0x40010400
 8104648:	40014000 	.word	0x40014000
 810464c:	40014400 	.word	0x40014400
 8104650:	40014800 	.word	0x40014800

08104654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104654:	b480      	push	{r7}
 8104656:	b087      	sub	sp, #28
 8104658:	af00      	add	r7, sp, #0
 810465a:	6078      	str	r0, [r7, #4]
 810465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	6a1b      	ldr	r3, [r3, #32]
 8104662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	6a1b      	ldr	r3, [r3, #32]
 810466e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	685b      	ldr	r3, [r3, #4]
 8104674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	69db      	ldr	r3, [r3, #28]
 810467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8104684:	68fb      	ldr	r3, [r7, #12]
 8104686:	f023 0303 	bic.w	r3, r3, #3
 810468a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810468c:	683b      	ldr	r3, [r7, #0]
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	68fa      	ldr	r2, [r7, #12]
 8104692:	4313      	orrs	r3, r2
 8104694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8104696:	697b      	ldr	r3, [r7, #20]
 8104698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810469c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810469e:	683b      	ldr	r3, [r7, #0]
 81046a0:	689b      	ldr	r3, [r3, #8]
 81046a2:	021b      	lsls	r3, r3, #8
 81046a4:	697a      	ldr	r2, [r7, #20]
 81046a6:	4313      	orrs	r3, r2
 81046a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	4a27      	ldr	r2, [pc, #156]	; (810474c <TIM_OC3_SetConfig+0xf8>)
 81046ae:	4293      	cmp	r3, r2
 81046b0:	d003      	beq.n	81046ba <TIM_OC3_SetConfig+0x66>
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	4a26      	ldr	r2, [pc, #152]	; (8104750 <TIM_OC3_SetConfig+0xfc>)
 81046b6:	4293      	cmp	r3, r2
 81046b8:	d10d      	bne.n	81046d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81046ba:	697b      	ldr	r3, [r7, #20]
 81046bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81046c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81046c2:	683b      	ldr	r3, [r7, #0]
 81046c4:	68db      	ldr	r3, [r3, #12]
 81046c6:	021b      	lsls	r3, r3, #8
 81046c8:	697a      	ldr	r2, [r7, #20]
 81046ca:	4313      	orrs	r3, r2
 81046cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81046ce:	697b      	ldr	r3, [r7, #20]
 81046d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81046d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	4a1c      	ldr	r2, [pc, #112]	; (810474c <TIM_OC3_SetConfig+0xf8>)
 81046da:	4293      	cmp	r3, r2
 81046dc:	d00f      	beq.n	81046fe <TIM_OC3_SetConfig+0xaa>
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	4a1b      	ldr	r2, [pc, #108]	; (8104750 <TIM_OC3_SetConfig+0xfc>)
 81046e2:	4293      	cmp	r3, r2
 81046e4:	d00b      	beq.n	81046fe <TIM_OC3_SetConfig+0xaa>
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	4a1a      	ldr	r2, [pc, #104]	; (8104754 <TIM_OC3_SetConfig+0x100>)
 81046ea:	4293      	cmp	r3, r2
 81046ec:	d007      	beq.n	81046fe <TIM_OC3_SetConfig+0xaa>
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	4a19      	ldr	r2, [pc, #100]	; (8104758 <TIM_OC3_SetConfig+0x104>)
 81046f2:	4293      	cmp	r3, r2
 81046f4:	d003      	beq.n	81046fe <TIM_OC3_SetConfig+0xaa>
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	4a18      	ldr	r2, [pc, #96]	; (810475c <TIM_OC3_SetConfig+0x108>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d113      	bne.n	8104726 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81046fe:	693b      	ldr	r3, [r7, #16]
 8104700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8104704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8104706:	693b      	ldr	r3, [r7, #16]
 8104708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810470c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810470e:	683b      	ldr	r3, [r7, #0]
 8104710:	695b      	ldr	r3, [r3, #20]
 8104712:	011b      	lsls	r3, r3, #4
 8104714:	693a      	ldr	r2, [r7, #16]
 8104716:	4313      	orrs	r3, r2
 8104718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810471a:	683b      	ldr	r3, [r7, #0]
 810471c:	699b      	ldr	r3, [r3, #24]
 810471e:	011b      	lsls	r3, r3, #4
 8104720:	693a      	ldr	r2, [r7, #16]
 8104722:	4313      	orrs	r3, r2
 8104724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	693a      	ldr	r2, [r7, #16]
 810472a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	68fa      	ldr	r2, [r7, #12]
 8104730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8104732:	683b      	ldr	r3, [r7, #0]
 8104734:	685a      	ldr	r2, [r3, #4]
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	697a      	ldr	r2, [r7, #20]
 810473e:	621a      	str	r2, [r3, #32]
}
 8104740:	bf00      	nop
 8104742:	371c      	adds	r7, #28
 8104744:	46bd      	mov	sp, r7
 8104746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810474a:	4770      	bx	lr
 810474c:	40010000 	.word	0x40010000
 8104750:	40010400 	.word	0x40010400
 8104754:	40014000 	.word	0x40014000
 8104758:	40014400 	.word	0x40014400
 810475c:	40014800 	.word	0x40014800

08104760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104760:	b480      	push	{r7}
 8104762:	b087      	sub	sp, #28
 8104764:	af00      	add	r7, sp, #0
 8104766:	6078      	str	r0, [r7, #4]
 8104768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810476a:	687b      	ldr	r3, [r7, #4]
 810476c:	6a1b      	ldr	r3, [r3, #32]
 810476e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	6a1b      	ldr	r3, [r3, #32]
 810477a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	685b      	ldr	r3, [r3, #4]
 8104780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	69db      	ldr	r3, [r3, #28]
 8104786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8104788:	68fb      	ldr	r3, [r7, #12]
 810478a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104798:	683b      	ldr	r3, [r7, #0]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	021b      	lsls	r3, r3, #8
 810479e:	68fa      	ldr	r2, [r7, #12]
 81047a0:	4313      	orrs	r3, r2
 81047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81047a4:	693b      	ldr	r3, [r7, #16]
 81047a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81047aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81047ac:	683b      	ldr	r3, [r7, #0]
 81047ae:	689b      	ldr	r3, [r3, #8]
 81047b0:	031b      	lsls	r3, r3, #12
 81047b2:	693a      	ldr	r2, [r7, #16]
 81047b4:	4313      	orrs	r3, r2
 81047b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	4a18      	ldr	r2, [pc, #96]	; (810481c <TIM_OC4_SetConfig+0xbc>)
 81047bc:	4293      	cmp	r3, r2
 81047be:	d00f      	beq.n	81047e0 <TIM_OC4_SetConfig+0x80>
 81047c0:	687b      	ldr	r3, [r7, #4]
 81047c2:	4a17      	ldr	r2, [pc, #92]	; (8104820 <TIM_OC4_SetConfig+0xc0>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d00b      	beq.n	81047e0 <TIM_OC4_SetConfig+0x80>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	4a16      	ldr	r2, [pc, #88]	; (8104824 <TIM_OC4_SetConfig+0xc4>)
 81047cc:	4293      	cmp	r3, r2
 81047ce:	d007      	beq.n	81047e0 <TIM_OC4_SetConfig+0x80>
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	4a15      	ldr	r2, [pc, #84]	; (8104828 <TIM_OC4_SetConfig+0xc8>)
 81047d4:	4293      	cmp	r3, r2
 81047d6:	d003      	beq.n	81047e0 <TIM_OC4_SetConfig+0x80>
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	4a14      	ldr	r2, [pc, #80]	; (810482c <TIM_OC4_SetConfig+0xcc>)
 81047dc:	4293      	cmp	r3, r2
 81047de:	d109      	bne.n	81047f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81047e0:	697b      	ldr	r3, [r7, #20]
 81047e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81047e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81047e8:	683b      	ldr	r3, [r7, #0]
 81047ea:	695b      	ldr	r3, [r3, #20]
 81047ec:	019b      	lsls	r3, r3, #6
 81047ee:	697a      	ldr	r2, [r7, #20]
 81047f0:	4313      	orrs	r3, r2
 81047f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81047f4:	687b      	ldr	r3, [r7, #4]
 81047f6:	697a      	ldr	r2, [r7, #20]
 81047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	68fa      	ldr	r2, [r7, #12]
 81047fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8104800:	683b      	ldr	r3, [r7, #0]
 8104802:	685a      	ldr	r2, [r3, #4]
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	693a      	ldr	r2, [r7, #16]
 810480c:	621a      	str	r2, [r3, #32]
}
 810480e:	bf00      	nop
 8104810:	371c      	adds	r7, #28
 8104812:	46bd      	mov	sp, r7
 8104814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104818:	4770      	bx	lr
 810481a:	bf00      	nop
 810481c:	40010000 	.word	0x40010000
 8104820:	40010400 	.word	0x40010400
 8104824:	40014000 	.word	0x40014000
 8104828:	40014400 	.word	0x40014400
 810482c:	40014800 	.word	0x40014800

08104830 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8104830:	b480      	push	{r7}
 8104832:	b087      	sub	sp, #28
 8104834:	af00      	add	r7, sp, #0
 8104836:	6078      	str	r0, [r7, #4]
 8104838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	6a1b      	ldr	r3, [r3, #32]
 810483e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	6a1b      	ldr	r3, [r3, #32]
 810484a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	685b      	ldr	r3, [r3, #4]
 8104850:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104860:	683b      	ldr	r3, [r7, #0]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	68fa      	ldr	r2, [r7, #12]
 8104866:	4313      	orrs	r3, r2
 8104868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810486a:	693b      	ldr	r3, [r7, #16]
 810486c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8104870:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8104872:	683b      	ldr	r3, [r7, #0]
 8104874:	689b      	ldr	r3, [r3, #8]
 8104876:	041b      	lsls	r3, r3, #16
 8104878:	693a      	ldr	r2, [r7, #16]
 810487a:	4313      	orrs	r3, r2
 810487c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	4a17      	ldr	r2, [pc, #92]	; (81048e0 <TIM_OC5_SetConfig+0xb0>)
 8104882:	4293      	cmp	r3, r2
 8104884:	d00f      	beq.n	81048a6 <TIM_OC5_SetConfig+0x76>
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	4a16      	ldr	r2, [pc, #88]	; (81048e4 <TIM_OC5_SetConfig+0xb4>)
 810488a:	4293      	cmp	r3, r2
 810488c:	d00b      	beq.n	81048a6 <TIM_OC5_SetConfig+0x76>
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	4a15      	ldr	r2, [pc, #84]	; (81048e8 <TIM_OC5_SetConfig+0xb8>)
 8104892:	4293      	cmp	r3, r2
 8104894:	d007      	beq.n	81048a6 <TIM_OC5_SetConfig+0x76>
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	4a14      	ldr	r2, [pc, #80]	; (81048ec <TIM_OC5_SetConfig+0xbc>)
 810489a:	4293      	cmp	r3, r2
 810489c:	d003      	beq.n	81048a6 <TIM_OC5_SetConfig+0x76>
 810489e:	687b      	ldr	r3, [r7, #4]
 81048a0:	4a13      	ldr	r2, [pc, #76]	; (81048f0 <TIM_OC5_SetConfig+0xc0>)
 81048a2:	4293      	cmp	r3, r2
 81048a4:	d109      	bne.n	81048ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81048a6:	697b      	ldr	r3, [r7, #20]
 81048a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81048ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81048ae:	683b      	ldr	r3, [r7, #0]
 81048b0:	695b      	ldr	r3, [r3, #20]
 81048b2:	021b      	lsls	r3, r3, #8
 81048b4:	697a      	ldr	r2, [r7, #20]
 81048b6:	4313      	orrs	r3, r2
 81048b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	697a      	ldr	r2, [r7, #20]
 81048be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	68fa      	ldr	r2, [r7, #12]
 81048c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81048c6:	683b      	ldr	r3, [r7, #0]
 81048c8:	685a      	ldr	r2, [r3, #4]
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	693a      	ldr	r2, [r7, #16]
 81048d2:	621a      	str	r2, [r3, #32]
}
 81048d4:	bf00      	nop
 81048d6:	371c      	adds	r7, #28
 81048d8:	46bd      	mov	sp, r7
 81048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048de:	4770      	bx	lr
 81048e0:	40010000 	.word	0x40010000
 81048e4:	40010400 	.word	0x40010400
 81048e8:	40014000 	.word	0x40014000
 81048ec:	40014400 	.word	0x40014400
 81048f0:	40014800 	.word	0x40014800

081048f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81048f4:	b480      	push	{r7}
 81048f6:	b087      	sub	sp, #28
 81048f8:	af00      	add	r7, sp, #0
 81048fa:	6078      	str	r0, [r7, #4]
 81048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	6a1b      	ldr	r3, [r3, #32]
 8104902:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	6a1b      	ldr	r3, [r3, #32]
 810490e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	685b      	ldr	r3, [r3, #4]
 8104914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810491c:	68fb      	ldr	r3, [r7, #12]
 810491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104924:	683b      	ldr	r3, [r7, #0]
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	021b      	lsls	r3, r3, #8
 810492a:	68fa      	ldr	r2, [r7, #12]
 810492c:	4313      	orrs	r3, r2
 810492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8104930:	693b      	ldr	r3, [r7, #16]
 8104932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8104936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8104938:	683b      	ldr	r3, [r7, #0]
 810493a:	689b      	ldr	r3, [r3, #8]
 810493c:	051b      	lsls	r3, r3, #20
 810493e:	693a      	ldr	r2, [r7, #16]
 8104940:	4313      	orrs	r3, r2
 8104942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	4a18      	ldr	r2, [pc, #96]	; (81049a8 <TIM_OC6_SetConfig+0xb4>)
 8104948:	4293      	cmp	r3, r2
 810494a:	d00f      	beq.n	810496c <TIM_OC6_SetConfig+0x78>
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	4a17      	ldr	r2, [pc, #92]	; (81049ac <TIM_OC6_SetConfig+0xb8>)
 8104950:	4293      	cmp	r3, r2
 8104952:	d00b      	beq.n	810496c <TIM_OC6_SetConfig+0x78>
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	4a16      	ldr	r2, [pc, #88]	; (81049b0 <TIM_OC6_SetConfig+0xbc>)
 8104958:	4293      	cmp	r3, r2
 810495a:	d007      	beq.n	810496c <TIM_OC6_SetConfig+0x78>
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	4a15      	ldr	r2, [pc, #84]	; (81049b4 <TIM_OC6_SetConfig+0xc0>)
 8104960:	4293      	cmp	r3, r2
 8104962:	d003      	beq.n	810496c <TIM_OC6_SetConfig+0x78>
 8104964:	687b      	ldr	r3, [r7, #4]
 8104966:	4a14      	ldr	r2, [pc, #80]	; (81049b8 <TIM_OC6_SetConfig+0xc4>)
 8104968:	4293      	cmp	r3, r2
 810496a:	d109      	bne.n	8104980 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810496c:	697b      	ldr	r3, [r7, #20]
 810496e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8104972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8104974:	683b      	ldr	r3, [r7, #0]
 8104976:	695b      	ldr	r3, [r3, #20]
 8104978:	029b      	lsls	r3, r3, #10
 810497a:	697a      	ldr	r2, [r7, #20]
 810497c:	4313      	orrs	r3, r2
 810497e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	697a      	ldr	r2, [r7, #20]
 8104984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	68fa      	ldr	r2, [r7, #12]
 810498a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810498c:	683b      	ldr	r3, [r7, #0]
 810498e:	685a      	ldr	r2, [r3, #4]
 8104990:	687b      	ldr	r3, [r7, #4]
 8104992:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	693a      	ldr	r2, [r7, #16]
 8104998:	621a      	str	r2, [r3, #32]
}
 810499a:	bf00      	nop
 810499c:	371c      	adds	r7, #28
 810499e:	46bd      	mov	sp, r7
 81049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049a4:	4770      	bx	lr
 81049a6:	bf00      	nop
 81049a8:	40010000 	.word	0x40010000
 81049ac:	40010400 	.word	0x40010400
 81049b0:	40014000 	.word	0x40014000
 81049b4:	40014400 	.word	0x40014400
 81049b8:	40014800 	.word	0x40014800

081049bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81049bc:	b480      	push	{r7}
 81049be:	b087      	sub	sp, #28
 81049c0:	af00      	add	r7, sp, #0
 81049c2:	60f8      	str	r0, [r7, #12]
 81049c4:	60b9      	str	r1, [r7, #8]
 81049c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81049c8:	68bb      	ldr	r3, [r7, #8]
 81049ca:	f003 031f 	and.w	r3, r3, #31
 81049ce:	2201      	movs	r2, #1
 81049d0:	fa02 f303 	lsl.w	r3, r2, r3
 81049d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81049d6:	68fb      	ldr	r3, [r7, #12]
 81049d8:	6a1a      	ldr	r2, [r3, #32]
 81049da:	697b      	ldr	r3, [r7, #20]
 81049dc:	43db      	mvns	r3, r3
 81049de:	401a      	ands	r2, r3
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81049e4:	68fb      	ldr	r3, [r7, #12]
 81049e6:	6a1a      	ldr	r2, [r3, #32]
 81049e8:	68bb      	ldr	r3, [r7, #8]
 81049ea:	f003 031f 	and.w	r3, r3, #31
 81049ee:	6879      	ldr	r1, [r7, #4]
 81049f0:	fa01 f303 	lsl.w	r3, r1, r3
 81049f4:	431a      	orrs	r2, r3
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	621a      	str	r2, [r3, #32]
}
 81049fa:	bf00      	nop
 81049fc:	371c      	adds	r7, #28
 81049fe:	46bd      	mov	sp, r7
 8104a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a04:	4770      	bx	lr
	...

08104a08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8104a08:	b480      	push	{r7}
 8104a0a:	b085      	sub	sp, #20
 8104a0c:	af00      	add	r7, sp, #0
 8104a0e:	6078      	str	r0, [r7, #4]
 8104a10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8104a12:	2300      	movs	r3, #0
 8104a14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104a1c:	2b01      	cmp	r3, #1
 8104a1e:	d101      	bne.n	8104a24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8104a20:	2302      	movs	r3, #2
 8104a22:	e065      	b.n	8104af0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	2201      	movs	r2, #1
 8104a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8104a2c:	68fb      	ldr	r3, [r7, #12]
 8104a2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104a32:	683b      	ldr	r3, [r7, #0]
 8104a34:	68db      	ldr	r3, [r3, #12]
 8104a36:	4313      	orrs	r3, r2
 8104a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8104a3a:	68fb      	ldr	r3, [r7, #12]
 8104a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104a40:	683b      	ldr	r3, [r7, #0]
 8104a42:	689b      	ldr	r3, [r3, #8]
 8104a44:	4313      	orrs	r3, r2
 8104a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8104a48:	68fb      	ldr	r3, [r7, #12]
 8104a4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8104a4e:	683b      	ldr	r3, [r7, #0]
 8104a50:	685b      	ldr	r3, [r3, #4]
 8104a52:	4313      	orrs	r3, r2
 8104a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8104a5c:	683b      	ldr	r3, [r7, #0]
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	4313      	orrs	r3, r2
 8104a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8104a64:	68fb      	ldr	r3, [r7, #12]
 8104a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104a6a:	683b      	ldr	r3, [r7, #0]
 8104a6c:	691b      	ldr	r3, [r3, #16]
 8104a6e:	4313      	orrs	r3, r2
 8104a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8104a72:	68fb      	ldr	r3, [r7, #12]
 8104a74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8104a78:	683b      	ldr	r3, [r7, #0]
 8104a7a:	695b      	ldr	r3, [r3, #20]
 8104a7c:	4313      	orrs	r3, r2
 8104a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8104a80:	68fb      	ldr	r3, [r7, #12]
 8104a82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104a86:	683b      	ldr	r3, [r7, #0]
 8104a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a8a:	4313      	orrs	r3, r2
 8104a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8104a8e:	68fb      	ldr	r3, [r7, #12]
 8104a90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8104a94:	683b      	ldr	r3, [r7, #0]
 8104a96:	699b      	ldr	r3, [r3, #24]
 8104a98:	041b      	lsls	r3, r3, #16
 8104a9a:	4313      	orrs	r3, r2
 8104a9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	4a16      	ldr	r2, [pc, #88]	; (8104afc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8104aa4:	4293      	cmp	r3, r2
 8104aa6:	d004      	beq.n	8104ab2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	681b      	ldr	r3, [r3, #0]
 8104aac:	4a14      	ldr	r2, [pc, #80]	; (8104b00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8104aae:	4293      	cmp	r3, r2
 8104ab0:	d115      	bne.n	8104ade <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8104ab2:	68fb      	ldr	r3, [r7, #12]
 8104ab4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8104ab8:	683b      	ldr	r3, [r7, #0]
 8104aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104abc:	051b      	lsls	r3, r3, #20
 8104abe:	4313      	orrs	r3, r2
 8104ac0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8104ac2:	68fb      	ldr	r3, [r7, #12]
 8104ac4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104ac8:	683b      	ldr	r3, [r7, #0]
 8104aca:	69db      	ldr	r3, [r3, #28]
 8104acc:	4313      	orrs	r3, r2
 8104ace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8104ad0:	68fb      	ldr	r3, [r7, #12]
 8104ad2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8104ad6:	683b      	ldr	r3, [r7, #0]
 8104ad8:	6a1b      	ldr	r3, [r3, #32]
 8104ada:	4313      	orrs	r3, r2
 8104adc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8104ade:	687b      	ldr	r3, [r7, #4]
 8104ae0:	681b      	ldr	r3, [r3, #0]
 8104ae2:	68fa      	ldr	r2, [r7, #12]
 8104ae4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	2200      	movs	r2, #0
 8104aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104aee:	2300      	movs	r3, #0
}
 8104af0:	4618      	mov	r0, r3
 8104af2:	3714      	adds	r7, #20
 8104af4:	46bd      	mov	sp, r7
 8104af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104afa:	4770      	bx	lr
 8104afc:	40010000 	.word	0x40010000
 8104b00:	40010400 	.word	0x40010400

08104b04 <__libc_init_array>:
 8104b04:	b570      	push	{r4, r5, r6, lr}
 8104b06:	4d0d      	ldr	r5, [pc, #52]	; (8104b3c <__libc_init_array+0x38>)
 8104b08:	4c0d      	ldr	r4, [pc, #52]	; (8104b40 <__libc_init_array+0x3c>)
 8104b0a:	1b64      	subs	r4, r4, r5
 8104b0c:	10a4      	asrs	r4, r4, #2
 8104b0e:	2600      	movs	r6, #0
 8104b10:	42a6      	cmp	r6, r4
 8104b12:	d109      	bne.n	8104b28 <__libc_init_array+0x24>
 8104b14:	4d0b      	ldr	r5, [pc, #44]	; (8104b44 <__libc_init_array+0x40>)
 8104b16:	4c0c      	ldr	r4, [pc, #48]	; (8104b48 <__libc_init_array+0x44>)
 8104b18:	f000 f82e 	bl	8104b78 <_init>
 8104b1c:	1b64      	subs	r4, r4, r5
 8104b1e:	10a4      	asrs	r4, r4, #2
 8104b20:	2600      	movs	r6, #0
 8104b22:	42a6      	cmp	r6, r4
 8104b24:	d105      	bne.n	8104b32 <__libc_init_array+0x2e>
 8104b26:	bd70      	pop	{r4, r5, r6, pc}
 8104b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8104b2c:	4798      	blx	r3
 8104b2e:	3601      	adds	r6, #1
 8104b30:	e7ee      	b.n	8104b10 <__libc_init_array+0xc>
 8104b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8104b36:	4798      	blx	r3
 8104b38:	3601      	adds	r6, #1
 8104b3a:	e7f2      	b.n	8104b22 <__libc_init_array+0x1e>
 8104b3c:	081c03a4 	.word	0x081c03a4
 8104b40:	081c03a4 	.word	0x081c03a4
 8104b44:	081c03a4 	.word	0x081c03a4
 8104b48:	081c03a8 	.word	0x081c03a8

08104b4c <memcpy>:
 8104b4c:	440a      	add	r2, r1
 8104b4e:	4291      	cmp	r1, r2
 8104b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8104b54:	d100      	bne.n	8104b58 <memcpy+0xc>
 8104b56:	4770      	bx	lr
 8104b58:	b510      	push	{r4, lr}
 8104b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8104b62:	4291      	cmp	r1, r2
 8104b64:	d1f9      	bne.n	8104b5a <memcpy+0xe>
 8104b66:	bd10      	pop	{r4, pc}

08104b68 <memset>:
 8104b68:	4402      	add	r2, r0
 8104b6a:	4603      	mov	r3, r0
 8104b6c:	4293      	cmp	r3, r2
 8104b6e:	d100      	bne.n	8104b72 <memset+0xa>
 8104b70:	4770      	bx	lr
 8104b72:	f803 1b01 	strb.w	r1, [r3], #1
 8104b76:	e7f9      	b.n	8104b6c <memset+0x4>

08104b78 <_init>:
 8104b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104b7a:	bf00      	nop
 8104b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104b7e:	bc08      	pop	{r3}
 8104b80:	469e      	mov	lr, r3
 8104b82:	4770      	bx	lr

08104b84 <_fini>:
 8104b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104b86:	bf00      	nop
 8104b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104b8a:	bc08      	pop	{r3}
 8104b8c:	469e      	mov	lr, r3
 8104b8e:	4770      	bx	lr
