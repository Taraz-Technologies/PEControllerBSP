
PELab_OpenLoopVFD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006d80  08006d80  00016d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f98  08006f98  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08006f98  08006f98  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f98  08006f98  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  24000000  08006fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  24000178  08007118  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000394  08007118  00020394  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026351  00000000  00000000  000201a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6f  00000000  00000000  000464f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00049f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0004b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b391  00000000  00000000  0004c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c13  00000000  00000000  00087879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018f466  00000000  00000000  0009f48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022e8f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c0  00000000  00000000  0022e948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000178 	.word	0x24000178
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006d64 	.word	0x08006d64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400017c 	.word	0x2400017c
 80002d4:	08006d64 	.word	0x08006d64

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <MAX11046_Poll>:
	Raw_Max11046_Run();
}
#endif
#ifdef CORE_CM7
void MAX11046_Poll(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	if(sharedData->m4Tom7.lastDataPointer != NULL)
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MAX11046_Poll+0x24>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d007      	beq.n	800066e <MAX11046_Poll+0x1e>
		memcpy((void*)&adcVals, (void*)sharedData->m4Tom7.lastDataPointer, sizeof(adc_measures_t));
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MAX11046_Poll+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	2240      	movs	r2, #64	; 0x40
 8000666:	4619      	mov	r1, r3
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <MAX11046_Poll+0x28>)
 800066a:	f006 fa7f 	bl	8006b6c <memcpy>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08006d80 	.word	0x08006d80
 8000678:	24000228 	.word	0x24000228

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3f      	ldr	r3, [pc, #252]	; (8000780 <SystemInit+0x104>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3e      	ldr	r2, [pc, #248]	; (8000780 <SystemInit+0x104>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <SystemInit+0x104>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a3a      	ldr	r2, [pc, #232]	; (8000780 <SystemInit+0x104>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <SystemInit+0x108>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a34      	ldr	r2, [pc, #208]	; (8000784 <SystemInit+0x108>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <SystemInit+0x10c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a32      	ldr	r2, [pc, #200]	; (8000788 <SystemInit+0x10c>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b30      	ldr	r3, [pc, #192]	; (8000788 <SystemInit+0x10c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <SystemInit+0x10c>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492e      	ldr	r1, [pc, #184]	; (8000788 <SystemInit+0x10c>)
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <SystemInit+0x110>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <SystemInit+0x108>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a26      	ldr	r2, [pc, #152]	; (8000784 <SystemInit+0x108>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemInit+0x10c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x10c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <SystemInit+0x114>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemInit+0x10c>)
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemInit+0x118>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x10c>)
 8000712:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x11c>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x10c>)
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <SystemInit+0x11c>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x10c>)
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <SystemInit+0x11c>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x10c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <SystemInit+0x10c>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <SystemInit+0x10c>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <SystemInit+0x120>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <SystemInit+0x120>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <SystemInit+0x124>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x128>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x12c>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x130>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SystemInit+0x104>)
 8000770:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000774:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <DoutController_SelectMode>:
};
/*******************************************************************************
 * Code
 ******************************************************************************/
const dout_pin_t* DoutController_SelectMode(uint32_t pinNo, pwm_fnc_t fnc, GPIO_PinState state)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
 80007bc:	4613      	mov	r3, r2
 80007be:	70bb      	strb	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
	pinNo--;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
	const dout_pin_t* pin = &doutPins[pinNo];
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <DoutController_SelectMode+0x84>)
 80007e2:	4413      	add	r3, r2
 80007e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pin = pin->pin.pinMask;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	617b      	str	r3, [r7, #20]
	if (fnc == PWM_FNC_IO)
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d10a      	bne.n	8000810 <DoutController_SelectMode+0x60>
	{
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(pin->pin.GPIO, pin->pin.pinMask, state);
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	889b      	ldrh	r3, [r3, #4]
 8000806:	78ba      	ldrb	r2, [r7, #2]
 8000808:	4619      	mov	r1, r3
 800080a:	f001 f9b9 	bl	8001b80 <HAL_GPIO_WritePin>
 800080e:	e004      	b.n	800081a <DoutController_SelectMode+0x6a>
	}
	else
	{
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = pin->AlternateFnc;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	61bb      	str	r3, [r7, #24]
	}
  HAL_GPIO_Init(pin->pin.GPIO, &GPIO_InitStruct);
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fffb 	bl	8001820 <HAL_GPIO_Init>
	return pin;
 800082a:	69fb      	ldr	r3, [r7, #28]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08006d94 	.word	0x08006d94

08000838 <PWMDriver_ConfigPair>:
extern TIM_HandleTypeDef htim1;
/*******************************************************************************
 * Code
 ******************************************************************************/
static UpdatePWMPair PWMDriver_ConfigPair(uint16_t pwmNo, pwm_pair_config_t* config)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	80fb      	strh	r3, [r7, #6]
	if(pwmNo <= 10)
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	2b0a      	cmp	r3, #10
 8000848:	d808      	bhi.n	800085c <PWMDriver_ConfigPair+0x24>
	{
		PWM1_10_Drivers_Init();
 800084a:	f000 fc9d 	bl	8001188 <PWM1_10_Drivers_Init>
		return PWM1_10_ConfigPair(pwmNo, config);
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	6839      	ldr	r1, [r7, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fd76 	bl	8001344 <PWM1_10_ConfigPair>
 8000858:	4603      	mov	r3, r0
 800085a:	e00d      	b.n	8000878 <PWMDriver_ConfigPair+0x40>
	}
	else if (pwmNo <= 16)
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	2b10      	cmp	r3, #16
 8000860:	d809      	bhi.n	8000876 <PWMDriver_ConfigPair+0x3e>
	{
		PWM11_16_Drivers_Init(config);
 8000862:	6838      	ldr	r0, [r7, #0]
 8000864:	f000 fb7c 	bl	8000f60 <PWM11_16_Drivers_Init>
		return PWM11_16_ConfigPair(pwmNo, config);
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	6839      	ldr	r1, [r7, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fc61 	bl	8001134 <PWM11_16_ConfigPair>
 8000872:	4603      	mov	r3, r0
 8000874:	e000      	b.n	8000878 <PWMDriver_ConfigPair+0x40>
	}
	return NULL;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <PWMDriver_UpdatePair>:

static void PWMDriver_UpdatePair(uint16_t pwmNo, float duty, pwm_pair_config_t* config)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	ed87 0a02 	vstr	s0, [r7, #8]
 800088c:	6079      	str	r1, [r7, #4]
 800088e:	81fb      	strh	r3, [r7, #14]
	if(pwmNo <= 10)
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	2b0a      	cmp	r3, #10
 8000894:	d807      	bhi.n	80008a6 <PWMDriver_UpdatePair+0x26>
		PWM1_10_UpdatePair(pwmNo, duty, config);
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	ed97 0a02 	vldr	s0, [r7, #8]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fcc8 	bl	8001234 <PWM1_10_UpdatePair>
	else if (pwmNo <= 16)
		PWM11_16_UpdatePair(pwmNo, duty, config);
}
 80008a4:	e009      	b.n	80008ba <PWMDriver_UpdatePair+0x3a>
	else if (pwmNo <= 16)
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	2b10      	cmp	r3, #16
 80008aa:	d806      	bhi.n	80008ba <PWMDriver_UpdatePair+0x3a>
		PWM11_16_UpdatePair(pwmNo, duty, config);
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fc09 	bl	80010cc <PWM11_16_UpdatePair>
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <AdjustTheta>:
/*******************************************************************************
 * Code
 ******************************************************************************/
/*! @brief adjust theta so that it remains in the range 0-2pi */
static float AdjustTheta(float theta)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	ed87 0a01 	vstr	s0, [r7, #4]
	// adjust theta for the overflow
	if(theta > TWO_PI)
 80008ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80008d2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000924 <AdjustTheta+0x60>
 80008d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008de:	dd07      	ble.n	80008f0 <AdjustTheta+0x2c>
		theta -= (TWO_PI);
 80008e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80008e4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000924 <AdjustTheta+0x60>
 80008e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008ec:	edc7 7a01 	vstr	s15, [r7, #4]
	
	if(theta < 0)
 80008f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80008f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fc:	d507      	bpl.n	800090e <AdjustTheta+0x4a>
		theta += (TWO_PI);
 80008fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000902:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000924 <AdjustTheta+0x60>
 8000906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800090a:	edc7 7a01 	vstr	s15, [r7, #4]
	
	return theta;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	ee07 3a90 	vmov	s15, r3
}
 8000914:	eeb0 0a67 	vmov.f32	s0, s15
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40c90fdc 	.word	0x40c90fdc

08000928 <GenerateSPWM>:
	return AdjustTheta(theta);
}

/*! @brief Generate the SPWM signal */
static void GenerateSPWM(float theta, float modulationIndex, float* duties)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000932:	edc7 0a02 	vstr	s1, [r7, #8]
 8000936:	6078      	str	r0, [r7, #4]
	// get the equivalent duty cycle
	float resThetas[3] = { theta , theta + (TWO_PI/3), theta - (TWO_PI/3)};
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000940:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80009c4 <GenerateSPWM+0x9c>
 8000944:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000948:	edc7 7a05 	vstr	s15, [r7, #20]
 800094c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000950:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80009c4 <GenerateSPWM+0x9c>
 8000954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000958:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < 3; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	e028      	b.n	80009b4 <GenerateSPWM+0x8c>
	{
		theta = AdjustTheta(resThetas[i]);
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	f107 0220 	add.w	r2, r7, #32
 800096a:	4413      	add	r3, r2
 800096c:	3b10      	subs	r3, #16
 800096e:	edd3 7a00 	vldr	s15, [r3]
 8000972:	eeb0 0a67 	vmov.f32	s0, s15
 8000976:	f7ff ffa5 	bl	80008c4 <AdjustTheta>
 800097a:	ed87 0a03 	vstr	s0, [r7, #12]
		duties[i] = ((sinf(theta) * modulationIndex) * 0.5f) + 0.5f;
 800097e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000982:	f006 f935 	bl	8006bf0 <sinf>
 8000986:	eeb0 7a40 	vmov.f32	s14, s0
 800098a:	edd7 7a02 	vldr	s15, [r7, #8]
 800098e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000992:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80009a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009aa:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3301      	adds	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	ddd3      	ble.n	8000962 <GenerateSPWM+0x3a>
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40060a93 	.word	0x40060a93

080009c8 <Inverter3Ph_Init>:
static int handleCounter = 0;
/*******************************************************************************
 * Code
 ******************************************************************************/
inverter3Ph_config_t* Inverter3Ph_Init(inverter3Ph_init_config_t* initConfig)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	/* if not enough inverter slots return null */
	if((handleCounter + 1) > INVERTER_3PH_COUNT)
 80009d0:	4b63      	ldr	r3, [pc, #396]	; (8000b60 <Inverter3Ph_Init+0x198>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	dd01      	ble.n	80009dc <Inverter3Ph_Init+0x14>
		return NULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	e0bd      	b.n	8000b58 <Inverter3Ph_Init+0x190>

	/* an even output pin should be used as inverted signals are required for the pwm */
	if((initConfig->pins[0] % 2 == 0) || (initConfig->pins[1] % 2 == 0) || (initConfig->pins[2] % 2 == 0))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00d      	beq.n	8000a06 <Inverter3Ph_Init+0x3e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <Inverter3Ph_Init+0x3e>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	889b      	ldrh	r3, [r3, #4]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <Inverter3Ph_Init+0x42>
		return NULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e0a6      	b.n	8000b58 <Inverter3Ph_Init+0x190>

	inverter3Ph_config_t* handle = &handles[handleCounter++];
 8000a0a:	4b55      	ldr	r3, [pc, #340]	; (8000b60 <Inverter3Ph_Init+0x198>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	1c53      	adds	r3, r2, #1
 8000a10:	4953      	ldr	r1, [pc, #332]	; (8000b60 <Inverter3Ph_Init+0x198>)
 8000a12:	600b      	str	r3, [r1, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	011b      	lsls	r3, r3, #4
 8000a1c:	4a51      	ldr	r2, [pc, #324]	; (8000b64 <Inverter3Ph_Init+0x19c>)
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]

	/* check module usage */
	bool pwm1_10_needed = initConfig->pins[0] < 11 ||  initConfig->pins[1] < 11 || initConfig->pins[2] < 11;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d907      	bls.n	8000a3a <Inverter3Ph_Init+0x72>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	885b      	ldrh	r3, [r3, #2]
 8000a2e:	2b0a      	cmp	r3, #10
 8000a30:	d903      	bls.n	8000a3a <Inverter3Ph_Init+0x72>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	889b      	ldrh	r3, [r3, #4]
 8000a36:	2b0a      	cmp	r3, #10
 8000a38:	d801      	bhi.n	8000a3e <Inverter3Ph_Init+0x76>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <Inverter3Ph_Init+0x78>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	72fb      	strb	r3, [r7, #11]
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	72fb      	strb	r3, [r7, #11]
	bool pwm11_16_needed = initConfig->pins[0] > 10 ||  initConfig->pins[1] > 10 || initConfig->pins[2] > 10;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d807      	bhi.n	8000a62 <Inverter3Ph_Init+0x9a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	885b      	ldrh	r3, [r3, #2]
 8000a56:	2b0a      	cmp	r3, #10
 8000a58:	d803      	bhi.n	8000a62 <Inverter3Ph_Init+0x9a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	889b      	ldrh	r3, [r3, #4]
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d901      	bls.n	8000a66 <Inverter3Ph_Init+0x9e>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <Inverter3Ph_Init+0xa0>
 8000a66:	2300      	movs	r3, #0
 8000a68:	72bb      	strb	r3, [r7, #10]
 8000a6a:	7abb      	ldrb	r3, [r7, #10]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	72bb      	strb	r3, [r7, #10]

	handle->pairConfig.alignment = initConfig->alignment;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7c1a      	ldrb	r2, [r3, #16]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	769a      	strb	r2, [r3, #26]
	handle->pairConfig.dtEnabled = initConfig->deadtimeEnable;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7d1a      	ldrb	r2, [r3, #20]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	761a      	strb	r2, [r3, #24]
	handle->pairConfig.dtInNanoSec = initConfig->deadtimeInNanosec;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	8a5b      	ldrh	r3, [r3, #18]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	621a      	str	r2, [r3, #32]
	handle->pairConfig.periodInUsec = initConfig->periodInUs;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	891b      	ldrh	r3, [r3, #8]
 8000a90:	461a      	mov	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	61da      	str	r2, [r3, #28]
	handle->pairConfig.interruptEnabled = initConfig->interruptEnabled;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7a9a      	ldrb	r2, [r3, #10]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	765a      	strb	r2, [r3, #25]

	// configure PWM
	for (int i = 0; i < 3; i++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	e02b      	b.n	8000afc <Inverter3Ph_Init+0x134>
	{
		handle->fncs[i] = PWMDriver_ConfigPair(initConfig->pins[i], &handle->pairConfig);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3318      	adds	r3, #24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	f7ff fec0 	bl	8000838 <PWMDriver_ConfigPair>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3308      	adds	r3, #8
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	6059      	str	r1, [r3, #4]
		PWMDriver_UpdatePair(initConfig->pins[i], 0.5f, &handle->pairConfig);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3318      	adds	r3, #24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000ad8:	4610      	mov	r0, r2
 8000ada:	f7ff fed1 	bl	8000880 <PWMDriver_UpdatePair>
		handle->doutPins[i] = initConfig->pins[i];
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	3208      	adds	r2, #8
 8000aec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		handle->pairConfig.interruptEnabled = false;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2200      	movs	r2, #0
 8000af4:	765a      	strb	r2, [r3, #25]
	for (int i = 0; i < 3; i++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	ddd0      	ble.n	8000aa4 <Inverter3Ph_Init+0xdc>
	}

	/* select pin functionality at end */
	for (int i = 0; i < 3; i++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	e015      	b.n	8000b34 <Inverter3Ph_Init+0x16c>
	{
		DoutController_SelectMode(initConfig->pins[i], PWM_FNC_PWM, GPIO_PIN_RESET);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe4b 	bl	80007b0 <DoutController_SelectMode>
		DoutController_SelectMode(initConfig->pins[i]+1, PWM_FNC_PWM, GPIO_PIN_RESET);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b22:	3301      	adds	r3, #1
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fe41 	bl	80007b0 <DoutController_SelectMode>
	for (int i = 0; i < 3; i++)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	3301      	adds	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	dde6      	ble.n	8000b08 <Inverter3Ph_Init+0x140>
	}
	if (initConfig->dsblPin)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	88db      	ldrh	r3, [r3, #6]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <Inverter3Ph_Init+0x18e>
		handle->dsblePins = DoutController_SelectMode(initConfig->dsblPin, PWM_FNC_IO, GPIO_PIN_RESET);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	88db      	ldrh	r3, [r3, #6]
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe30 	bl	80007b0 <DoutController_SelectMode>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	60da      	str	r2, [r3, #12]

	return handle;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	240001f4 	.word	0x240001f4
 8000b64:	24000194 	.word	0x24000194

08000b68 <Inverter3Ph_UpdateSPWM>:

void Inverter3Ph_UpdateSPWM(inverter3Ph_config_t* config, float theta, float modulationIndex)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b74:	edc7 0a01 	vstr	s1, [r7, #4]
	float duties[3];
	GenerateSPWM(theta, modulationIndex, duties);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	edd7 0a01 	vldr	s1, [r7, #4]
 8000b82:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b86:	f7ff fecf 	bl	8000928 <GenerateSPWM>
	for (int i = 0; i < 3; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	e01c      	b.n	8000bca <Inverter3Ph_UpdateSPWM+0x62>
		config->fncs[i](config->doutPins[i], duties[i], &config->pairConfig);
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3308      	adds	r3, #8
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	69f9      	ldr	r1, [r7, #28]
 8000ba0:	3108      	adds	r1, #8
 8000ba2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	69fa      	ldr	r2, [r7, #28]
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	f107 0120 	add.w	r1, r7, #32
 8000bb0:	440a      	add	r2, r1
 8000bb2:	3a10      	subs	r2, #16
 8000bb4:	edd2 7a00 	vldr	s15, [r2]
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	3218      	adds	r2, #24
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc2:	4798      	blx	r3
	for (int i = 0; i < 3; i++)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dddf      	ble.n	8000b90 <Inverter3Ph_UpdateSPWM+0x28>
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000be8:	bf00      	nop
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <main+0xac>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d004      	beq.n	8000c00 <main+0x24>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	1e5a      	subs	r2, r3, #1
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dcf4      	bgt.n	8000bea <main+0xe>
  if ( timeout < 0 )
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	da01      	bge.n	8000c0a <main+0x2e>
  {
  Error_Handler();
 8000c06:	f000 f92d 	bl	8000e64 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fc5b 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f83f 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 f8c1 	bl	8000d98 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  sharedData->m7Tom4.periodUs = 20;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <main+0xb0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2214      	movs	r2, #20
 8000c1c:	f8c3 2850 	str.w	r2, [r3, #2128]	; 0x850
  MainControl_Init();
 8000c20:	f005 fde2 	bl	80067e8 <MainControl_Init>
  MainControl_Run();
 8000c24:	f005 fe0e 	bl	8006844 <MainControl_Run>
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <main+0xac>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <main+0xac>)
 8000c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <main+0xac>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f002 fad2 	bl	80031f0 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f002 fae8 	bl	8003224 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 8000c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c58:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c5a:	bf00      	nop
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <main+0xac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <main+0x96>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1e5a      	subs	r2, r3, #1
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dcf4      	bgt.n	8000c5c <main+0x80>
  if ( timeout < 0 )
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da01      	bge.n	8000c7c <main+0xa0>
  {
  Error_Handler();
 8000c78:	f000 f8f4 	bl	8000e64 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MAX11046_Poll();
 8000c7c:	f7ff fce8 	bl	8000650 <MAX11046_Poll>
	  MainControl_Loop();
 8000c80:	f005 ff0e 	bl	8006aa0 <MainControl_Loop>
	  MAX11046_Poll();
 8000c84:	e7fa      	b.n	8000c7c <main+0xa0>
 8000c86:	bf00      	nop
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	08006d80 	.word	0x08006d80

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09c      	sub	sp, #112	; 0x70
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	224c      	movs	r2, #76	; 0x4c
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f005 ff72 	bl	8006b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f005 ff6c 	bl	8006b88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f002 facb 	bl	800324c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <SystemClock_Config+0xfc>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a33      	ldr	r2, [pc, #204]	; (8000d8c <SystemClock_Config+0xfc>)
 8000cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <SystemClock_Config+0xfc>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <SystemClock_Config+0x100>)
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <SystemClock_Config+0x100>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <SystemClock_Config+0x100>)
 8000cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce8:	bf00      	nop
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <SystemClock_Config+0xfc>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf6:	d1f8      	bne.n	8000cea <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <SystemClock_Config+0x104>)
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f023 0303 	bic.w	r3, r3, #3
 8000d00:	4a24      	ldr	r2, [pc, #144]	; (8000d94 <SystemClock_Config+0x104>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	2302      	movs	r3, #2
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000d1e:	2350      	movs	r3, #80	; 0x50
 8000d20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fade 	bl	8003300 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d4a:	f000 f88b 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	233f      	movs	r3, #63	; 0x3f
 8000d50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2303      	movs	r3, #3
 8000d54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d62:	2340      	movs	r3, #64	; 0x40
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d6c:	2340      	movs	r3, #64	; 0x40
 8000d6e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2104      	movs	r1, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fed3 	bl	8003b20 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000d80:	f000 f870 	bl	8000e64 <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3770      	adds	r7, #112	; 0x70
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	58024800 	.word	0x58024800
 8000d90:	58000400 	.word	0x58000400
 8000d94:	58024400 	.word	0x58024400

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

}
 8000e52:	bf00      	nop
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	58024400 	.word	0x58024400

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_MspInit+0x30>)
 8000e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e7c:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x30>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x30>)
 8000e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58024400 	.word	0x58024400

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef0:	f000 fb5a 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8000efc:	2100      	movs	r1, #0
 8000efe:	4802      	ldr	r0, [pc, #8]	; (8000f08 <HRTIM1_TIMA_IRQHandler+0x10>)
 8000f00:	f001 fa88 	bl	8002414 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	240002b4 	.word	0x240002b4

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f10:	f7ff fbb4 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f16:	490d      	ldr	r1, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	; (8000f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f005 fdf3 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fe4d 	bl	8000bdc <main>
  bx  lr
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000f48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f4c:	24000178 	.word	0x24000178
  ldr r2, =_sidata
 8000f50:	08006fa0 	.word	0x08006fa0
  ldr r2, =_sbss
 8000f54:	24000178 	.word	0x24000178
  ldr r4, =_ebss
 8000f58:	24000394 	.word	0x24000394

08000f5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC3_IRQHandler>
	...

08000f60 <PWM11_16_Drivers_Init>:
/*******************************************************************************
 * Code
 ******************************************************************************/
/*! @brief initialize drivers can't change the frequency and timer settings for individual channels */
void PWM11_16_Drivers_Init(pwm_pair_config_t* config)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b096      	sub	sp, #88	; 0x58
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000f68:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <PWM11_16_Drivers_Init+0x160>)
 8000f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f6e:	4a54      	ldr	r2, [pc, #336]	; (80010c0 <PWM11_16_Drivers_Init+0x160>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f78:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <PWM11_16_Drivers_Init+0x160>)
 8000f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
	htim1.Instance = TIM1;
 8000f86:	4b4f      	ldr	r3, [pc, #316]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <PWM11_16_Drivers_Init+0x168>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
	if(config->alignment == CENTER_ALIGNED)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <PWM11_16_Drivers_Init+0x54>
	{
		htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8000f9a:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = (config->periodInUsec * 120);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	e00b      	b.n	8000fcc <PWM11_16_Drivers_Init+0x6c>
	}
	else
  {
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = (config->periodInUsec * 240) - 1;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	4a3e      	ldr	r2, [pc, #248]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000fca:	60d3      	str	r3, [r2, #12]
	}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fde:	4839      	ldr	r0, [pc, #228]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8000fe0:	f004 f972 	bl	80052c8 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <PWM11_16_Drivers_Init+0x8e>
    Error_Handler();
 8000fea:	f7ff ff3b 	bl	8000e64 <Error_Handler>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001006:	4619      	mov	r1, r3
 8001008:	482e      	ldr	r0, [pc, #184]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 800100a:	f004 fc37 	bl	800587c <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <PWM11_16_Drivers_Init+0xb8>
    Error_Handler();
 8001014:	f7ff ff26 	bl	8000e64 <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001018:	482a      	ldr	r0, [pc, #168]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 800101a:	f004 f9b6 	bl	800538a <HAL_TIM_PWM_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <PWM11_16_Drivers_Init+0xc8>
    Error_Handler();
 8001024:	f7ff ff1e 	bl	8000e64 <Error_Handler>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001040:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001044:	4619      	mov	r1, r3
 8001046:	481f      	ldr	r0, [pc, #124]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 8001048:	f005 f9f2 	bl	8006430 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <PWM11_16_Drivers_Init+0xf6>
    Error_Handler();
 8001052:	f7ff ff07 	bl	8000e64 <Error_Handler>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	222c      	movs	r2, #44	; 0x2c
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f005 fd92 	bl	8006b88 <memset>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.DeadTime = 185;
 8001070:	23b9      	movs	r3, #185	; 0xb9
 8001072:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.BreakFilter = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.Break2Filter = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.AutomaticOutput = config->dtEnabled ? TIM_AUTOMATICOUTPUT_ENABLE : TIM_AUTOMATICOUTPUT_DISABLE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <PWM11_16_Drivers_Init+0x13e>
 8001098:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800109c:	e000      	b.n	80010a0 <PWM11_16_Drivers_Init+0x140>
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	4806      	ldr	r0, [pc, #24]	; (80010c4 <PWM11_16_Drivers_Init+0x164>)
 80010aa:	f005 fa49 	bl	8006540 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <PWM11_16_Drivers_Init+0x158>
    Error_Handler();
 80010b4:	f7ff fed6 	bl	8000e64 <Error_Handler>
}
 80010b8:	bf00      	nop
 80010ba:	3758      	adds	r7, #88	; 0x58
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	58024400 	.word	0x58024400
 80010c4:	24000268 	.word	0x24000268
 80010c8:	40010000 	.word	0x40010000

080010cc <PWM11_16_UpdatePair>:

/*! @brief update the duty cycle from 0-1 */
void PWM11_16_UpdatePair(uint32_t pwmNo, float duty, pwm_pair_config_t* config)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d8:	6079      	str	r1, [r7, #4]
	uint32_t ch = (pwmNo - 11) / 2; 
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3b0b      	subs	r3, #11
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
	*(((uint32_t*)&(TIM1->CCR1)) + ch) = (config->alignment == CENTER_ALIGNED ? 1 - duty : duty) * TIM1->ARR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <PWM11_16_UpdatePair+0x2c>
 80010ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	e001      	b.n	80010fc <PWM11_16_UpdatePair+0x30>
 80010f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <PWM11_16_UpdatePair+0x60>)
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	ee07 3a10 	vmov	s14, r3
 8001104:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	009a      	lsls	r2, r3, #2
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <PWM11_16_UpdatePair+0x64>)
 8001112:	4413      	add	r3, r2
 8001114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001118:	ee17 2a90 	vmov	r2, s15
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40010000 	.word	0x40010000
 8001130:	40010034 	.word	0x40010034

08001134 <PWM11_16_ConfigPair>:

/*! @brief Confiure the inverted pair */
UpdatePWMPair PWM11_16_ConfigPair(uint32_t pwmNo, pwm_pair_config_t* config)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	uint32_t ch = (pwmNo - 11);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3b0b      	subs	r3, #11
 8001142:	60fb      	str	r3, [r7, #12]
	ch = ch == TIM_CHANNEL_1 ? 0 : (ch == 2 ? TIM_CHANNEL_2 : TIM_CHANNEL_3);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <PWM11_16_ConfigPair+0x24>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d101      	bne.n	8001154 <PWM11_16_ConfigPair+0x20>
 8001150:	2304      	movs	r3, #4
 8001152:	e002      	b.n	800115a <PWM11_16_ConfigPair+0x26>
 8001154:	2308      	movs	r3, #8
 8001156:	e000      	b.n	800115a <PWM11_16_ConfigPair+0x26>
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, ch) != HAL_OK)
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4907      	ldr	r1, [pc, #28]	; (800117c <PWM11_16_ConfigPair+0x48>)
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <PWM11_16_ConfigPair+0x4c>)
 8001162:	f004 fa7b 	bl	800565c <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <PWM11_16_ConfigPair+0x3c>
    Error_Handler();
 800116c:	f7ff fe7a 	bl	8000e64 <Error_Handler>
	return PWM11_16_UpdatePair;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <PWM11_16_ConfigPair+0x50>)
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	24000008 	.word	0x24000008
 8001180:	24000268 	.word	0x24000268
 8001184:	080010cd 	.word	0x080010cd

08001188 <PWM1_10_Drivers_Init>:
/*******************************************************************************
 * Code
 ******************************************************************************/
/*! @brief initialize the pwm modules */
void PWM1_10_Drivers_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0b0      	sub	sp, #192	; 0xc0
 800118c:	af00      	add	r7, sp, #0
	if(moduleEnabled)
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <PWM1_10_Drivers_Init+0x9c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d141      	bne.n	800121a <PWM1_10_Drivers_Init+0x92>
		return;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	22bc      	movs	r2, #188	; 0xbc
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f005 fcf3 	bl	8006b88 <memset>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80011a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011a6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 80011a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 ffe4 	bl	8004180 <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <PWM1_10_Drivers_Init+0x3a>
      Error_Handler();
 80011be:	f7ff fe51 	bl	8000e64 <Error_Handler>
  __HAL_RCC_HRTIM1_CLK_ENABLE();
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <PWM1_10_Drivers_Init+0xa0>)
 80011c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <PWM1_10_Drivers_Init+0xa0>)
 80011ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <PWM1_10_Drivers_Init+0xa0>)
 80011d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
  HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);				// --todo-- enable on interrupt selection
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2068      	movs	r0, #104	; 0x68
 80011e6:	f000 fae6 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 80011ea:	2068      	movs	r0, #104	; 0x68
 80011ec:	f000 fafd 	bl	80017ea <HAL_NVIC_EnableIRQ>
	/* enable the HRTimer (high Resolution Timer) responsible for PWM1-PWM10 */
  hhrtim.Instance = HRTIM1;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <PWM1_10_Drivers_Init+0xa4>)
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <PWM1_10_Drivers_Init+0xa8>)
 80011f4:	601a      	str	r2, [r3, #0]
	hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <PWM1_10_Drivers_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <PWM1_10_Drivers_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001202:	480a      	ldr	r0, [pc, #40]	; (800122c <PWM1_10_Drivers_Init+0xa4>)
 8001204:	f000 fcd6 	bl	8001bb4 <HAL_HRTIM_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <PWM1_10_Drivers_Init+0x8a>
    Error_Handler();
 800120e:	f7ff fe29 	bl	8000e64 <Error_Handler>
	moduleEnabled = true;
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <PWM1_10_Drivers_Init+0x9c>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	e000      	b.n	800121c <PWM1_10_Drivers_Init+0x94>
		return;
 800121a:	bf00      	nop
}
 800121c:	37c0      	adds	r7, #192	; 0xc0
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	240001f8 	.word	0x240001f8
 8001228:	58024400 	.word	0x58024400
 800122c:	240002b4 	.word	0x240002b4
 8001230:	40017400 	.word	0x40017400

08001234 <PWM1_10_UpdatePair>:
/*! @brief update the duty cycle from 0-1 */
void PWM1_10_UpdatePair(uint32_t pwmNo, float duty, pwm_pair_config_t* config)
{
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	; 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001240:	6079      	str	r1, [r7, #4]
	uint32_t TimerIdx = (pwmNo - 1) / 2;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	085b      	lsrs	r3, r3, #1
 8001248:	623b      	str	r3, [r7, #32]
	uint32_t period = hhrtim.Instance->sTimerxRegs[TimerIdx].PERxR;
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <PWM1_10_UpdatePair+0x108>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	01db      	lsls	r3, r3, #7
 8001252:	4413      	add	r3, r2
 8001254:	3394      	adds	r3, #148	; 0x94
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61fb      	str	r3, [r7, #28]
	uint32_t onTime = duty * period;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	edd7 7a02 	vldr	s15, [r7, #8]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	61bb      	str	r3, [r7, #24]
	if(config->alignment == CENTER_ALIGNED)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	789b      	ldrb	r3, [r3, #2]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d127      	bne.n	80012ce <PWM1_10_UpdatePair+0x9a>
	{
		int t0 = (period - onTime) / 2;
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	085b      	lsrs	r3, r3, #1
 8001286:	617b      	str	r3, [r7, #20]
		hhrtim.Instance->sTimerxRegs[TimerIdx].CMP1xR = t0;
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <PWM1_10_UpdatePair+0x108>)
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	01db      	lsls	r3, r3, #7
 8001292:	440b      	add	r3, r1
 8001294:	339c      	adds	r3, #156	; 0x9c
 8001296:	601a      	str	r2, [r3, #0]
		hhrtim.Instance->sTimerxRegs[TimerIdx].CMP2xR = t0 + onTime;
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <PWM1_10_UpdatePair+0x108>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	441a      	add	r2, r3
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	01db      	lsls	r3, r3, #7
 80012a6:	440b      	add	r3, r1
 80012a8:	33a4      	adds	r3, #164	; 0xa4
 80012aa:	601a      	str	r2, [r3, #0]
		MODIFY_REG(hhrtim.Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <PWM1_10_UpdatePair+0x108>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	3301      	adds	r3, #1
 80012b4:	01db      	lsls	r3, r3, #7
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a20      	ldr	r2, [pc, #128]	; (800133c <PWM1_10_UpdatePair+0x108>)
 80012bc:	6811      	ldr	r1, [r2, #0]
 80012be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	3301      	adds	r3, #1
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	440b      	add	r3, r1
 80012ca:	601a      	str	r2, [r3, #0]
			dt = (config->dtInNanoSec * 16) / HRTIM_FREQ;
		hhrtim.Instance->sTimerxRegs[TimerIdx].CMP1xR = dt;
		hhrtim.Instance->sTimerxRegs[TimerIdx].CMP2xR = dt + onTime;
		MODIFY_REG(hhrtim.Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
	}
}
 80012cc:	e02f      	b.n	800132e <PWM1_10_UpdatePair+0xfa>
		uint32_t dt = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
		if(config->dtEnabled)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <PWM1_10_UpdatePair+0xb6>
			dt = (config->dtInNanoSec * 16) / HRTIM_FREQ;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <PWM1_10_UpdatePair+0x10c>)
 80012e2:	fba2 2303 	umull	r2, r3, r2, r3
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
		hhrtim.Instance->sTimerxRegs[TimerIdx].CMP1xR = dt;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <PWM1_10_UpdatePair+0x108>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	01db      	lsls	r3, r3, #7
 80012f2:	4413      	add	r3, r2
 80012f4:	339c      	adds	r3, #156	; 0x9c
 80012f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f8:	601a      	str	r2, [r3, #0]
		hhrtim.Instance->sTimerxRegs[TimerIdx].CMP2xR = dt + onTime;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <PWM1_10_UpdatePair+0x108>)
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	441a      	add	r2, r3
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	01db      	lsls	r3, r3, #7
 8001308:	440b      	add	r3, r1
 800130a:	33a4      	adds	r3, #164	; 0xa4
 800130c:	601a      	str	r2, [r3, #0]
		MODIFY_REG(hhrtim.Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <PWM1_10_UpdatePair+0x108>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	3301      	adds	r3, #1
 8001316:	01db      	lsls	r3, r3, #7
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <PWM1_10_UpdatePair+0x108>)
 800131e:	6811      	ldr	r1, [r2, #0]
 8001320:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	3301      	adds	r3, #1
 8001328:	01db      	lsls	r3, r3, #7
 800132a:	440b      	add	r3, r1
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	240002b4 	.word	0x240002b4
 8001340:	88888889 	.word	0x88888889

08001344 <PWM1_10_ConfigPair>:
/*! @brief Confiure the inverted pair */
UpdatePWMPair PWM1_10_ConfigPair(uint32_t pwmNo, pwm_pair_config_t* config)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
	uint32_t TimerIdx = (pwmNo - 1) / 2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3b01      	subs	r3, #1
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	617b      	str	r3, [r7, #20]
	uint32_t out1 = 1U << (TimerIdx * 2);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2201      	movs	r2, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	613b      	str	r3, [r7, #16]
	uint32_t out2 = 1U << (TimerIdx * 2 + 1);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	3301      	adds	r3, #1
 8001368:	2201      	movs	r2, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
	
  pTimeBaseCfg.Period = config->periodInUsec * HRTIM_FREQ;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	015b      	lsls	r3, r3, #5
 800137c:	461a      	mov	r2, r3
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <PWM1_10_ConfigPair+0x160>)
 8001380:	601a      	str	r2, [r3, #0]
//	if(config->alignment == CENTER_ALIGNED)
//		pTimeBaseCfg.Period += 1;
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, TimerIdx, &pTimeBaseCfg) != HAL_OK)
 8001382:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <PWM1_10_ConfigPair+0x160>)
 8001384:	6979      	ldr	r1, [r7, #20]
 8001386:	4848      	ldr	r0, [pc, #288]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 8001388:	f000 fcee 	bl	8001d68 <HAL_HRTIM_TimeBaseConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <PWM1_10_ConfigPair+0x52>
    Error_Handler();
 8001392:	f7ff fd67 	bl	8000e64 <Error_Handler>
  pTimerCfg.InterruptRequests = config->interruptEnabled ? HRTIM_TIM_IT_RST : HRTIM_TIM_IT_NONE;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <PWM1_10_ConfigPair+0x60>
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	e000      	b.n	80013a6 <PWM1_10_ConfigPair+0x62>
 80013a4:	2300      	movs	r3, #0
 80013a6:	4a41      	ldr	r2, [pc, #260]	; (80014ac <PWM1_10_ConfigPair+0x168>)
 80013a8:	6013      	str	r3, [r2, #0]
  pTimerCfg.DeadTimeInsertion = config->dtEnabled ? HRTIM_TIMDEADTIMEINSERTION_ENABLED : HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <PWM1_10_ConfigPair+0x74>
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	e000      	b.n	80013ba <PWM1_10_ConfigPair+0x76>
 80013b8:	2300      	movs	r3, #0
 80013ba:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <PWM1_10_ConfigPair+0x168>)
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, TimerIdx, &pTimerCfg) != HAL_OK)
 80013be:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <PWM1_10_ConfigPair+0x168>)
 80013c0:	6979      	ldr	r1, [r7, #20]
 80013c2:	4839      	ldr	r0, [pc, #228]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 80013c4:	f000 fcf8 	bl	8001db8 <HAL_HRTIM_WaveformTimerConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <PWM1_10_ConfigPair+0x8e>
    Error_Handler();
 80013ce:	f7ff fd49 	bl	8000e64 <Error_Handler>
  pCompareCfg.CompareValue = 3;
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <PWM1_10_ConfigPair+0x16c>)
 80013d4:	2203      	movs	r2, #3
 80013d6:	601a      	str	r2, [r3, #0]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, TimerIdx, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80013d8:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <PWM1_10_ConfigPair+0x16c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	6979      	ldr	r1, [r7, #20]
 80013de:	4832      	ldr	r0, [pc, #200]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 80013e0:	f000 fddc 	bl	8001f9c <HAL_HRTIM_WaveformCompareConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <PWM1_10_ConfigPair+0xaa>
    Error_Handler();
 80013ea:	f7ff fd3b 	bl	8000e64 <Error_Handler>
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, TimerIdx, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <PWM1_10_ConfigPair+0x16c>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	6979      	ldr	r1, [r7, #20]
 80013f4:	482c      	ldr	r0, [pc, #176]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 80013f6:	f000 fdd1 	bl	8001f9c <HAL_HRTIM_WaveformCompareConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <PWM1_10_ConfigPair+0xc0>
    Error_Handler();
 8001400:	f7ff fd30 	bl	8000e64 <Error_Handler>
	if (config->dtEnabled)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01a      	beq.n	8001442 <PWM1_10_ConfigPair+0xfe>
  {
		pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV16;
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <PWM1_10_ConfigPair+0x170>)
 800140e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001412:	601a      	str	r2, [r3, #0]
		pDeadTimeCfg.FallingValue = pDeadTimeCfg.RisingValue = (config->dtInNanoSec * 16) / HRTIM_FREQ;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <PWM1_10_ConfigPair+0x174>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <PWM1_10_ConfigPair+0x170>)
 8001424:	6053      	str	r3, [r2, #4]
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <PWM1_10_ConfigPair+0x170>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <PWM1_10_ConfigPair+0x170>)
 800142c:	6153      	str	r3, [r2, #20]
		if (HAL_HRTIM_DeadTimeConfig(&hhrtim, TimerIdx, &pDeadTimeCfg) != HAL_OK)
 800142e:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <PWM1_10_ConfigPair+0x170>)
 8001430:	6979      	ldr	r1, [r7, #20]
 8001432:	481d      	ldr	r0, [pc, #116]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 8001434:	f000 fd32 	bl	8001e9c <HAL_HRTIM_DeadTimeConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <PWM1_10_ConfigPair+0xfe>
			Error_Handler();
 800143e:	f7ff fd11 	bl	8000e64 <Error_Handler>
	}
  pOutputCfg.SetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <PWM1_10_ConfigPair+0x178>)
 8001444:	2208      	movs	r2, #8
 8001446:	605a      	str	r2, [r3, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <PWM1_10_ConfigPair+0x178>)
 800144a:	2210      	movs	r2, #16
 800144c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, TimerIdx, out1, &pOutputCfg) != HAL_OK)
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <PWM1_10_ConfigPair+0x178>)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	6979      	ldr	r1, [r7, #20]
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 8001456:	f000 ff0f 	bl	8002278 <HAL_HRTIM_WaveformOutputConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <PWM1_10_ConfigPair+0x120>
    Error_Handler();
 8001460:	f7ff fd00 	bl	8000e64 <Error_Handler>
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <PWM1_10_ConfigPair+0x178>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <PWM1_10_ConfigPair+0x178>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, TimerIdx, out2, &pOutputCfg) != HAL_OK)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <PWM1_10_ConfigPair+0x178>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	6979      	ldr	r1, [r7, #20]
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 8001478:	f000 fefe 	bl	8002278 <HAL_HRTIM_WaveformOutputConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <PWM1_10_ConfigPair+0x142>
    Error_Handler();
 8001482:	f7ff fcef 	bl	8000e64 <Error_Handler>
	if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, TimerIdx, &pTimerCfg) != HAL_OK)
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <PWM1_10_ConfigPair+0x168>)
 8001488:	6979      	ldr	r1, [r7, #20]
 800148a:	4807      	ldr	r0, [pc, #28]	; (80014a8 <PWM1_10_ConfigPair+0x164>)
 800148c:	f000 fc94 	bl	8001db8 <HAL_HRTIM_WaveformTimerConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <PWM1_10_ConfigPair+0x156>
    Error_Handler();
 8001496:	f7ff fce5 	bl	8000e64 <Error_Handler>
	return PWM1_10_UpdatePair;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <PWM1_10_ConfigPair+0x17c>)
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24000024 	.word	0x24000024
 80014a8:	240002b4 	.word	0x240002b4
 80014ac:	24000034 	.word	0x24000034
 80014b0:	240000ac 	.word	0x240000ac
 80014b4:	24000088 	.word	0x24000088
 80014b8:	88888889 	.word	0x88888889
 80014bc:	240001fc 	.word	0x240001fc
 80014c0:	08001235 	.word	0x08001235

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f000 f968 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014d0:	f002 fcdc 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_Init+0x68>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	4913      	ldr	r1, [pc, #76]	; (8001530 <HAL_Init+0x6c>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_Init+0x68>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_Init+0x6c>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_Init+0x70>)
 8001506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_Init+0x74>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f814 	bl	800153c <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e002      	b.n	8001524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800151e:	f7ff fca7 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	58024400 	.word	0x58024400
 8001530:	08006d84 	.word	0x08006d84
 8001534:	24000004 	.word	0x24000004
 8001538:	24000000 	.word	0x24000000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_InitTick+0x60>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e021      	b.n	8001594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_InitTick+0x64>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_InitTick+0x60>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f94d 	bl	8001806 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 f917 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x68>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	240000bc 	.word	0x240000bc
 80015a0:	24000000 	.word	0x24000000
 80015a4:	240000b8 	.word	0x240000b8

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	240000bc 	.word	0x240000bc
 80015cc:	24000390 	.word	0x24000390

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	24000390 	.word	0x24000390

080015e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetREVID+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0c1b      	lsrs	r3, r3, #16
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	5c001000 	.word	0x5c001000

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <__NVIC_SetPriorityGrouping+0x40>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	4313      	orrs	r3, r2
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x40>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	05fa0000 	.word	0x05fa0000

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff29 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff40 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff90 	bl	80016f4 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5f 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff33 	bl	8001664 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa4 	bl	800175c <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800182e:	4b89      	ldr	r3, [pc, #548]	; (8001a54 <HAL_GPIO_Init+0x234>)
 8001830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001832:	e194      	b.n	8001b5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8186 	beq.w	8001b58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d00b      	beq.n	800186c <HAL_GPIO_Init+0x4c>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001860:	2b11      	cmp	r3, #17
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b12      	cmp	r3, #18
 800186a:	d130      	bne.n	80018ce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a2:	2201      	movs	r2, #1
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 0201 	and.w	r2, r3, #1
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0xee>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b12      	cmp	r3, #18
 800190c:	d123      	bne.n	8001956 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	69b9      	ldr	r1, [r7, #24]
 8001952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0203 	and.w	r2, r3, #3
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80e0 	beq.w	8001b58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <HAL_GPIO_Init+0x238>)
 800199a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800199e:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <HAL_GPIO_Init+0x238>)
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_GPIO_Init+0x238>)
 80019aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b6:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_GPIO_Init+0x23c>)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_GPIO_Init+0x240>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d052      	beq.n	8001a88 <HAL_GPIO_Init+0x268>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_GPIO_Init+0x244>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d031      	beq.n	8001a4e <HAL_GPIO_Init+0x22e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_GPIO_Init+0x248>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02b      	beq.n	8001a4a <HAL_GPIO_Init+0x22a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <HAL_GPIO_Init+0x24c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d025      	beq.n	8001a46 <HAL_GPIO_Init+0x226>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <HAL_GPIO_Init+0x250>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x222>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_GPIO_Init+0x254>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x21e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <HAL_GPIO_Init+0x258>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x21a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_GPIO_Init+0x25c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x216>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <HAL_GPIO_Init+0x260>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x212>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_GPIO_Init+0x264>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x20e>
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	e02d      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a2e:	230a      	movs	r3, #10
 8001a30:	e02b      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a32:	2308      	movs	r3, #8
 8001a34:	e029      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e027      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	e025      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e023      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e021      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e01f      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e01d      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e01b      	b.n	8001a8a <HAL_GPIO_Init+0x26a>
 8001a52:	bf00      	nop
 8001a54:	58000080 	.word	0x58000080
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58000400 	.word	0x58000400
 8001a60:	58020000 	.word	0x58020000
 8001a64:	58020400 	.word	0x58020400
 8001a68:	58020800 	.word	0x58020800
 8001a6c:	58020c00 	.word	0x58020c00
 8001a70:	58021000 	.word	0x58021000
 8001a74:	58021400 	.word	0x58021400
 8001a78:	58021800 	.word	0x58021800
 8001a7c:	58021c00 	.word	0x58021c00
 8001a80:	58022000 	.word	0x58022000
 8001a84:	58022400 	.word	0x58022400
 8001a88:	2300      	movs	r3, #0
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9a:	4938      	ldr	r1, [pc, #224]	; (8001b7c <HAL_GPIO_Init+0x35c>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f ae63 	bne.w	8001834 <HAL_GPIO_Init+0x14>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3724      	adds	r7, #36	; 0x24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	58000400 	.word	0x58000400

08001b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b9c:	e003      	b.n	8001ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	041a      	lsls	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0bd      	b.n	8001d42 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d031      	beq.n	8001c6e <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_HRTIM_Init+0x198>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d10e      	bne.n	8001c32 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <HAL_HRTIM_Init+0x19c>)
 8001c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c1a:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_HRTIM_Init+0x19c>)
 8001c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c24:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_HRTIM_Init+0x19c>)
 8001c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c40:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c56:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f870 	bl	8001d54 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d012      	beq.n	8001ca6 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75fb      	strb	r3, [r7, #23]
 8001cba:	e03e      	b.n	8001d3a <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001cbc:	7dfa      	ldrb	r2, [r7, #23]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	3318      	adds	r3, #24
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8001cd0:	7dfa      	ldrb	r2, [r7, #23]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	331c      	adds	r3, #28
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8001ce4:	7dfa      	ldrb	r2, [r7, #23]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3320      	adds	r3, #32
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001cf8:	7dfa      	ldrb	r2, [r7, #23]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	3324      	adds	r3, #36	; 0x24
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8001d0c:	7dfa      	ldrb	r2, [r7, #23]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3328      	adds	r3, #40	; 0x28
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8001d20:	7dfa      	ldrb	r2, [r7, #23]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3330      	adds	r3, #48	; 0x30
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	3301      	adds	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d9bd      	bls.n	8001cbc <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40017400 	.word	0x40017400
 8001d50:	58024400 	.word	0x58024400

08001d54 <HAL_HRTIM_MspInit>:
  * @brief  MSP initialization for a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef * hhrtim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_HRTIM_MspInit could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d101      	bne.n	8001d84 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
 8001d82:	e015      	b.n	8001db0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d104      	bne.n	8001d9c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fc37 	bl	8002608 <HRTIM_MasterBase_Config>
 8001d9a:	e004      	b.n	8001da6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fc60 	bl	8002666 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d101      	bne.n	8001dd4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e05f      	b.n	8001e94 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e058      	b.n	8001e94 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d104      	bne.n	8001e02 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fc73 	bl	80026e6 <HRTIM_MasterWaveform_Config>
 8001e00:	e004      	b.n	8001e0c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fcd4 	bl	80027b4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4403      	add	r3, r0
 8001e1e:	3320      	adds	r3, #32
 8001e20:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4403      	add	r3, r0
 8001e34:	3324      	adds	r3, #36	; 0x24
 8001e36:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4403      	add	r3, r0
 8001e4a:	3328      	adds	r3, #40	; 0x28
 8001e4c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68d9      	ldr	r1, [r3, #12]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	332c      	adds	r3, #44	; 0x2c
 8001e62:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4403      	add	r3, r0
 8001e76:	3330      	adds	r3, #48	; 0x30
 8001e78:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fed7 	bl	8002c30 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_DeadTimeCfgTypeDef* pDeadTimeCfg)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
     return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e067      	b.n	8001f88 <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_HRTIM_DeadTimeConfig+0x2a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e060      	b.n	8001f88 <HAL_HRTIM_DeadTimeConfig+0xec>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ede:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	01db      	lsls	r3, r3, #7
 8001f5a:	4413      	add	r3, r2
 8001f5c:	33b8      	adds	r3, #184	; 0xb8
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	6811      	ldr	r1, [r2, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	01db      	lsls	r3, r3, #7
 8001f70:	440b      	add	r3, r1
 8001f72:	33b8      	adds	r3, #184	; 0xb8
 8001f74:	601a      	str	r2, [r3, #0]
                 HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
                 HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
                 HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	01ff0000 	.word	0x01ff0000
 8001f98:	3c002000 	.word	0x3c002000

08001f9c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d101      	bne.n	8001fba <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e157      	b.n	800226a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e150      	b.n	800226a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d140      	bne.n	8002060 <HAL_HRTIM_WaveformCompareConfig+0xc4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	2b07      	cmp	r3, #7
 8001fe4:	d82a      	bhi.n	800203c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8001fe6:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	0800200d 	.word	0x0800200d
 8001ff0:	08002019 	.word	0x08002019
 8001ff4:	0800203d 	.word	0x0800203d
 8001ff8:	08002025 	.word	0x08002025
 8001ffc:	0800203d 	.word	0x0800203d
 8002000:	0800203d 	.word	0x0800203d
 8002004:	0800203d 	.word	0x0800203d
 8002008:	08002031 	.word	0x08002031
  {
    switch (CompareUnit)
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	61da      	str	r2, [r3, #28]
        break;
 8002016:	e01a      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8002022:	e014      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800202e:	e00e      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800203a:	e008      	b.n	800204e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2207      	movs	r2, #7
 8002040:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 800204c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b07      	cmp	r3, #7
 8002058:	f040 80fe 	bne.w	8002258 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e104      	b.n	800226a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	2b07      	cmp	r3, #7
 8002066:	f200 80e3 	bhi.w	8002230 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800206a:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	08002091 	.word	0x08002091
 8002074:	080020a5 	.word	0x080020a5
 8002078:	08002231 	.word	0x08002231
 800207c:	08002161 	.word	0x08002161
 8002080:	08002231 	.word	0x08002231
 8002084:	08002231 	.word	0x08002231
 8002088:	08002231 	.word	0x08002231
 800208c:	08002175 	.word	0x08002175
    switch (CompareUnit)
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6819      	ldr	r1, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	01db      	lsls	r3, r3, #7
 800209c:	440b      	add	r3, r1
 800209e:	339c      	adds	r3, #156	; 0x9c
 80020a0:	601a      	str	r2, [r3, #0]
        break;
 80020a2:	e0d1      	b.n	8002248 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	01db      	lsls	r3, r3, #7
 80020b0:	440b      	add	r3, r1
 80020b2:	33a4      	adds	r3, #164	; 0xa4
 80020b4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03f      	beq.n	800213e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	01db      	lsls	r3, r3, #7
 80020c8:	4413      	add	r3, r2
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	6811      	ldr	r1, [r2, #0]
 80020d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	3301      	adds	r3, #1
 80020d8:	01db      	lsls	r3, r3, #7
 80020da:	440b      	add	r3, r1
 80020dc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	4413      	add	r3, r2
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	6809      	ldr	r1, [r1, #0]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	01db      	lsls	r3, r3, #7
 80020fc:	440b      	add	r3, r1
 80020fe:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002108:	d109      	bne.n	800211e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	01db      	lsls	r3, r3, #7
 8002116:	440b      	add	r3, r1
 8002118:	339c      	adds	r3, #156	; 0x9c
 800211a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800211c:	e091      	b.n	8002242 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002126:	f040 808c 	bne.w	8002242 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	01db      	lsls	r3, r3, #7
 8002136:	440b      	add	r3, r1
 8002138:	33a8      	adds	r3, #168	; 0xa8
 800213a:	601a      	str	r2, [r3, #0]
         break;
 800213c:	e081      	b.n	8002242 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3301      	adds	r3, #1
 8002146:	01db      	lsls	r3, r3, #7
 8002148:	4413      	add	r3, r2
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	6811      	ldr	r1, [r2, #0]
 8002150:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3301      	adds	r3, #1
 8002158:	01db      	lsls	r3, r3, #7
 800215a:	440b      	add	r3, r1
 800215c:	601a      	str	r2, [r3, #0]
         break;
 800215e:	e070      	b.n	8002242 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	01db      	lsls	r3, r3, #7
 800216c:	440b      	add	r3, r1
 800216e:	33a8      	adds	r3, #168	; 0xa8
 8002170:	601a      	str	r2, [r3, #0]
        break;
 8002172:	e069      	b.n	8002248 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	440b      	add	r3, r1
 8002182:	33ac      	adds	r3, #172	; 0xac
 8002184:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03f      	beq.n	800220e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3301      	adds	r3, #1
 8002196:	01db      	lsls	r3, r3, #7
 8002198:	4413      	add	r3, r2
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	6811      	ldr	r1, [r2, #0]
 80021a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3301      	adds	r3, #1
 80021a8:	01db      	lsls	r3, r3, #7
 80021aa:	440b      	add	r3, r1
 80021ac:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3301      	adds	r3, #1
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	4413      	add	r3, r2
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	6809      	ldr	r1, [r1, #0]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3301      	adds	r3, #1
 80021cc:	01db      	lsls	r3, r3, #7
 80021ce:	440b      	add	r3, r1
 80021d0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021da:	d109      	bne.n	80021f0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	01db      	lsls	r3, r3, #7
 80021e8:	440b      	add	r3, r1
 80021ea:	339c      	adds	r3, #156	; 0x9c
 80021ec:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80021ee:	e02a      	b.n	8002246 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021f8:	d125      	bne.n	8002246 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	01db      	lsls	r3, r3, #7
 8002206:	440b      	add	r3, r1
 8002208:	33a8      	adds	r3, #168	; 0xa8
 800220a:	601a      	str	r2, [r3, #0]
         break;
 800220c:	e01b      	b.n	8002246 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	01db      	lsls	r3, r3, #7
 8002218:	4413      	add	r3, r2
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	6811      	ldr	r1, [r2, #0]
 8002220:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	01db      	lsls	r3, r3, #7
 800222a:	440b      	add	r3, r1
 800222c:	601a      	str	r2, [r3, #0]
         break;
 800222e:	e00a      	b.n	8002246 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2207      	movs	r2, #7
 8002234:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8002240:	e002      	b.n	8002248 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8002246:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b07      	cmp	r3, #7
 8002252:	d101      	bne.n	8002258 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e008      	b.n	800226a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop

08002278 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d101      	bne.n	8002296 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
 8002294:	e01d      	b.n	80022d2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e016      	b.n	80022d2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fbba 	bl	8002a34 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_HRTIM_WaveformOutputStart+0x18>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e01a      	b.n	8002328 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8002348:	2302      	movs	r3, #2
 800234a:	e05b      	b.n	8002404 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68d9      	ldr	r1, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e022      	b.n	80023dc <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 800239a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d017      	beq.n	80023d6 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	01db      	lsls	r3, r3, #7
 80023ae:	4413      	add	r3, r2
 80023b0:	338c      	adds	r3, #140	; 0x8c
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3320      	adds	r3, #32
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	4302      	orrs	r2, r0
 80023ce:	01db      	lsls	r3, r3, #7
 80023d0:	440b      	add	r3, r1
 80023d2:	338c      	adds	r3, #140	; 0x8c
 80023d4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d9d9      	bls.n	8002396 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8002402:	2300      	movs	r3, #0
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	240000c0 	.word	0x240000c0

08002414 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2bff      	cmp	r3, #255	; 0xff
 8002422:	d103      	bne.n	800242c <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fc65 	bl	8002cf4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800242a:	e00a      	b.n	8002442 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d103      	bne.n	800243a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fcdc 	bl	8002df0 <HRTIM_Master_ISR>
}
 8002438:	e003      	b.n	8002442 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fd81 	bl	8002f44 <HRTIM_Timer_ISR>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_D for timer D
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f023 0307 	bic.w	r3, r3, #7
 8002620:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0318 	bic.w	r3, r3, #24
 8002632:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	6852      	ldr	r2, [r2, #4]
 8002658:	619a      	str	r2, [r3, #24]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8002666:	b480      	push	{r7}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3301      	adds	r3, #1
 800267a:	01db      	lsls	r3, r3, #7
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f023 0307 	bic.w	r3, r3, #7
 8002688:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0318 	bic.w	r3, r3, #24
 800269a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3301      	adds	r3, #1
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	4413      	add	r3, r2
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	01db      	lsls	r3, r3, #7
 80026c2:	440b      	add	r3, r1
 80026c4:	3394      	adds	r3, #148	; 0x94
 80026c6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	01db      	lsls	r3, r3, #7
 80026d4:	440b      	add	r3, r1
 80026d6:	3398      	adds	r3, #152	; 0x98
 80026d8:	601a      	str	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002700:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f023 0320 	bic.w	r3, r3, #32
 8002708:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800271a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800272c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800273e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002750:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002762:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002776:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4313      	orrs	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b08b      	sub	sp, #44	; 0x2c
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	3301      	adds	r3, #1
 80027c8:	01db      	lsls	r3, r3, #7
 80027ca:	4413      	add	r3, r2
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	6811      	ldr	r1, [r2, #0]
 80027d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	01db      	lsls	r3, r3, #7
 80027dc:	440b      	add	r3, r1
 80027de:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	01db      	lsls	r3, r3, #7
 80027ea:	4413      	add	r3, r2
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	4413      	add	r3, r2
 80027fa:	33e8      	adds	r3, #232	; 0xe8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	4413      	add	r3, r2
 800280a:	33e4      	adds	r3, #228	; 0xe4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8002818:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f023 0320 	bic.w	r3, r3, #32
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	4313      	orrs	r3, r2
 800282a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	4313      	orrs	r3, r2
 800283c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	4313      	orrs	r3, r2
 800284e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	4313      	orrs	r3, r2
 8002860:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	4313      	orrs	r3, r2
 8002872:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	4313      	orrs	r3, r2
 8002884:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002896:	d103      	bne.n	80028a0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	4313      	orrs	r3, r2
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4313      	orrs	r3, r2
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	4313      	orrs	r3, r2
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f023 031f 	bic.w	r3, r3, #31
 80028dc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028f2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	2b00      	cmp	r3, #0
 8002904:	d108      	bne.n	8002918 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800290c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	4313      	orrs	r3, r2
 8002916:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002920:	d004      	beq.n	800292c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800292a:	d103      	bne.n	8002934 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d108      	bne.n	8002946 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800293a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	4313      	orrs	r3, r2
 8002944:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b04      	cmp	r3, #4
 8002950:	d843      	bhi.n	80029da <HRTIM_TimingUnitWaveform_Config+0x226>
 8002952:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	0800296d 	.word	0x0800296d
 800295c:	08002983 	.word	0x08002983
 8002960:	08002999 	.word	0x08002999
 8002964:	080029af 	.word	0x080029af
 8002968:	080029c5 	.word	0x080029c5
  /* Set the timer burst mode */
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002972:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	4313      	orrs	r3, r2
 800297e:	61fb      	str	r3, [r7, #28]
      break;
 8002980:	e02c      	b.n	80029dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002988:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	61fb      	str	r3, [r7, #28]
      break;
 8002996:	e021      	b.n	80029dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800299e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61fb      	str	r3, [r7, #28]
      break;
 80029ac:	e016      	b.n	80029dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029b4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61fb      	str	r3, [r7, #28]
      break;
 80029c2:	e00b      	b.n	80029dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	015b      	lsls	r3, r3, #5
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61fb      	str	r3, [r7, #28]
      break;
 80029d8:	e000      	b.n	80029dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80029da:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3301      	adds	r3, #1
 80029e4:	01db      	lsls	r3, r3, #7
 80029e6:	4413      	add	r3, r2
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	01db      	lsls	r3, r3, #7
 80029f4:	4413      	add	r3, r2
 80029f6:	33e8      	adds	r3, #232	; 0xe8
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	01db      	lsls	r3, r3, #7
 8002a04:	4413      	add	r3, r2
 8002a06:	33e4      	adds	r3, #228	; 0xe4
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	01db      	lsls	r3, r3, #7
 8002a14:	4413      	add	r3, r2
 8002a16:	33d4      	adds	r3, #212	; 0xd4
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002a26:	bf00      	nop
 8002a28:	372c      	adds	r7, #44	; 0x2c
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	01db      	lsls	r3, r3, #7
 8002a4e:	4413      	add	r3, r2
 8002a50:	33e4      	adds	r3, #228	; 0xe4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	01db      	lsls	r3, r3, #7
 8002a5e:	4413      	add	r3, r2
 8002a60:	33b8      	adds	r3, #184	; 0xb8
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	617b      	str	r3, [r7, #20]

  switch (Output)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6c:	d076      	beq.n	8002b5c <HRTIM_OutputConfig+0x128>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a74:	f200 8087 	bhi.w	8002b86 <HRTIM_OutputConfig+0x152>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d05a      	beq.n	8002b36 <HRTIM_OutputConfig+0x102>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a86:	d87e      	bhi.n	8002b86 <HRTIM_OutputConfig+0x152>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d066      	beq.n	8002b5c <HRTIM_OutputConfig+0x128>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d878      	bhi.n	8002b86 <HRTIM_OutputConfig+0x152>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d84a      	bhi.n	8002b30 <HRTIM_OutputConfig+0xfc>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d072      	beq.n	8002b86 <HRTIM_OutputConfig+0x152>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	2b1f      	cmp	r3, #31
 8002aa6:	d86e      	bhi.n	8002b86 <HRTIM_OutputConfig+0x152>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HRTIM_OutputConfig+0x7c>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002b37 	.word	0x08002b37
 8002ab4:	08002b5d 	.word	0x08002b5d
 8002ab8:	08002b87 	.word	0x08002b87
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002b87 	.word	0x08002b87
 8002ac4:	08002b87 	.word	0x08002b87
 8002ac8:	08002b87 	.word	0x08002b87
 8002acc:	08002b5d 	.word	0x08002b5d
 8002ad0:	08002b87 	.word	0x08002b87
 8002ad4:	08002b87 	.word	0x08002b87
 8002ad8:	08002b87 	.word	0x08002b87
 8002adc:	08002b87 	.word	0x08002b87
 8002ae0:	08002b87 	.word	0x08002b87
 8002ae4:	08002b87 	.word	0x08002b87
 8002ae8:	08002b87 	.word	0x08002b87
 8002aec:	08002b37 	.word	0x08002b37
 8002af0:	08002b87 	.word	0x08002b87
 8002af4:	08002b87 	.word	0x08002b87
 8002af8:	08002b87 	.word	0x08002b87
 8002afc:	08002b87 	.word	0x08002b87
 8002b00:	08002b87 	.word	0x08002b87
 8002b04:	08002b87 	.word	0x08002b87
 8002b08:	08002b87 	.word	0x08002b87
 8002b0c:	08002b87 	.word	0x08002b87
 8002b10:	08002b87 	.word	0x08002b87
 8002b14:	08002b87 	.word	0x08002b87
 8002b18:	08002b87 	.word	0x08002b87
 8002b1c:	08002b87 	.word	0x08002b87
 8002b20:	08002b87 	.word	0x08002b87
 8002b24:	08002b87 	.word	0x08002b87
 8002b28:	08002b87 	.word	0x08002b87
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	d127      	bne.n	8002b86 <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	01db      	lsls	r3, r3, #7
 8002b42:	440b      	add	r3, r1
 8002b44:	33bc      	adds	r3, #188	; 0xbc
 8002b46:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	01db      	lsls	r3, r3, #7
 8002b54:	440b      	add	r3, r1
 8002b56:	33c0      	adds	r3, #192	; 0xc0
 8002b58:	601a      	str	r2, [r3, #0]
      break;
 8002b5a:	e015      	b.n	8002b88 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	01db      	lsls	r3, r3, #7
 8002b68:	440b      	add	r3, r1
 8002b6a:	33c4      	adds	r3, #196	; 0xc4
 8002b6c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	01db      	lsls	r3, r3, #7
 8002b7a:	440b      	add	r3, r1
 8002b7c:	33c8      	adds	r3, #200	; 0xc8
 8002b7e:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8002b80:	2310      	movs	r3, #16
 8002b82:	61bb      	str	r3, [r7, #24]
      break;
 8002b84:	e000      	b.n	8002b88 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 8002b86:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8002b88:	22fe      	movs	r2, #254	; 0xfe
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d111      	bne.n	8002c14 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	01db      	lsls	r3, r3, #7
 8002c1c:	4413      	add	r3, r2
 8002c1e:	33e4      	adds	r3, #228	; 0xe4
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	601a      	str	r2, [r3, #0]
}
 8002c24:	bf00      	nop
 8002c26:	3724      	adds	r7, #36	; 0x24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d851      	bhi.n	8002ce4 <HRTIM_ForceRegistersUpdate+0xb4>
 8002c40:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <HRTIM_ForceRegistersUpdate+0x18>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c77 	.word	0x08002c77
 8002c4c:	08002c8d 	.word	0x08002c8d
 8002c50:	08002ca3 	.word	0x08002ca3
 8002c54:	08002cb9 	.word	0x08002cb9
 8002c58:	08002ccf 	.word	0x08002ccf
 8002c5c:	08002c61 	.word	0x08002c61
  switch (TimerIdx)
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002c74:	e037      	b.n	8002ce6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0202 	orr.w	r2, r2, #2
 8002c86:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002c8a:	e02c      	b.n	8002ce6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0204 	orr.w	r2, r2, #4
 8002c9c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002ca0:	e021      	b.n	8002ce6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0208 	orr.w	r2, r2, #8
 8002cb2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002cb6:	e016      	b.n	8002ce6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0210 	orr.w	r2, r2, #16
 8002cc8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002ccc:	e00b      	b.n	8002ce6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0220 	orr.w	r2, r2, #32
 8002cde:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8002ce2:	e000      	b.n	8002ce6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8002ce4:	bf00      	nop
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8002d04:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fb8b 	bl	800244a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fb83 	bl	800245e <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2204      	movs	r2, #4
 8002d72:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fb7b 	bl	8002472 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2208      	movs	r2, #8
 8002d96:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fb73 	bl	8002486 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2210      	movs	r2, #16
 8002dba:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fb6b 	bl	800249a <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fb63 	bl	80024ae <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8002e0a:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e38:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fb40 	bl	80024c2 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002e5e:	2105      	movs	r1, #5
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fb58 	bl	8002516 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00c      	beq.n	8002e8a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002e82:	2105      	movs	r1, #5
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fb51 	bl	800252c <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fb4a 	bl	8002542 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002eca:	2105      	movs	r1, #5
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fb43 	bl	8002558 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2210      	movs	r2, #16
 8002eec:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002eee:	2105      	movs	r1, #5
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fb05 	bl	8002500 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fadf 	bl	80024d6 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2240      	movs	r2, #64	; 0x40
 8002f32:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8002f34:	2105      	movs	r1, #5
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fad7 	bl	80024ea <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	3301      	adds	r3, #1
 8002f56:	01db      	lsls	r3, r3, #7
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	01db      	lsls	r3, r3, #7
 8002f68:	4413      	add	r3, r2
 8002f6a:	338c      	adds	r3, #140	; 0x8c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d010      	beq.n	8002f9c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	01db      	lsls	r3, r3, #7
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3388      	adds	r3, #136	; 0x88
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fabd 	bl	8002516 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	01db      	lsls	r3, r3, #7
 8002fb8:	4413      	add	r3, r2
 8002fba:	3388      	adds	r3, #136	; 0x88
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8002fc0:	6839      	ldr	r1, [r7, #0]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fab2 	bl	800252c <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	01db      	lsls	r3, r3, #7
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3388      	adds	r3, #136	; 0x88
 8002fe8:	2204      	movs	r2, #4
 8002fea:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8002fec:	6839      	ldr	r1, [r7, #0]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff faa7 	bl	8002542 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d010      	beq.n	8003020 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	01db      	lsls	r3, r3, #7
 8003010:	4413      	add	r3, r2
 8003012:	3388      	adds	r3, #136	; 0x88
 8003014:	2208      	movs	r2, #8
 8003016:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fa9c 	bl	8002558 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	01db      	lsls	r3, r3, #7
 800303c:	4413      	add	r3, r2
 800303e:	3388      	adds	r3, #136	; 0x88
 8003040:	2210      	movs	r2, #16
 8003042:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fa5a 	bl	8002500 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	01db      	lsls	r3, r3, #7
 8003068:	4413      	add	r3, r2
 800306a:	3388      	adds	r3, #136	; 0x88
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fa39 	bl	80024ea <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	01db      	lsls	r3, r3, #7
 8003094:	4413      	add	r3, r2
 8003096:	3388      	adds	r3, #136	; 0x88
 8003098:	2280      	movs	r2, #128	; 0x80
 800309a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fa65 	bl	800256e <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d011      	beq.n	80030d2 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	01db      	lsls	r3, r3, #7
 80030c0:	4413      	add	r3, r2
 80030c2:	3388      	adds	r3, #136	; 0x88
 80030c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c8:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80030ca:	6839      	ldr	r1, [r7, #0]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fa59 	bl	8002584 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d011      	beq.n	8003100 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	01db      	lsls	r3, r3, #7
 80030ee:	4413      	add	r3, r2
 80030f0:	3388      	adds	r3, #136	; 0x88
 80030f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f6:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fa58 	bl	80025b0 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00c      	beq.n	800312e <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	01db      	lsls	r3, r3, #7
 800311c:	4413      	add	r3, r2
 800311e:	3388      	adds	r3, #136	; 0x88
 8003120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003124:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fa4c 	bl	80025c6 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003134:	2b00      	cmp	r3, #0
 8003136:	d011      	beq.n	800315c <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	01db      	lsls	r3, r3, #7
 800314a:	4413      	add	r3, r2
 800314c:	3388      	adds	r3, #136	; 0x88
 800314e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003152:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fa40 	bl	80025dc <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d011      	beq.n	800318a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00c      	beq.n	800318a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	01db      	lsls	r3, r3, #7
 8003178:	4413      	add	r3, r2
 800317a:	3388      	adds	r3, #136	; 0x88
 800317c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003180:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8003182:	6839      	ldr	r1, [r7, #0]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fa34 	bl	80025f2 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d011      	beq.n	80031b8 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	01db      	lsls	r3, r3, #7
 80031a6:	4413      	add	r3, r2
 80031a8:	3388      	adds	r3, #136	; 0x88
 80031aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ae:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f003 fba0 	bl	80068f8 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d011      	beq.n	80031e6 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	01db      	lsls	r3, r3, #7
 80031d4:	4413      	add	r3, r2
 80031d6:	3388      	adds	r3, #136	; 0x88
 80031d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031dc:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80031de:	6839      	ldr	r1, [r7, #0]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff f9da 	bl	800259a <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80031f8:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_HSEM_FastTake+0x2c>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3320      	adds	r3, #32
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	4a07      	ldr	r2, [pc, #28]	; (8003220 <HAL_HSEM_FastTake+0x30>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	58026400 	.word	0x58026400
 8003220:	80000300 	.word	0x80000300

08003224 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800322e:	4906      	ldr	r1, [pc, #24]	; (8003248 <HAL_HSEM_Release+0x24>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	58026400 	.word	0x58026400

0800324c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	2b06      	cmp	r3, #6
 800325e:	d00a      	beq.n	8003276 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e040      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e03e      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800327e:	491f      	ldr	r1, [pc, #124]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4313      	orrs	r3, r2
 8003284:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003286:	f7fe f9a3 	bl	80015d0 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800328c:	e009      	b.n	80032a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800328e:	f7fe f99f 	bl	80015d0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329c:	d901      	bls.n	80032a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e028      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ae:	d1ee      	bne.n	800328e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b1e      	cmp	r3, #30
 80032b4:	d008      	beq.n	80032c8 <HAL_PWREx_ConfigSupply+0x7c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b2e      	cmp	r3, #46	; 0x2e
 80032ba:	d005      	beq.n	80032c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b1d      	cmp	r3, #29
 80032c0:	d002      	beq.n	80032c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b2d      	cmp	r3, #45	; 0x2d
 80032c6:	d114      	bne.n	80032f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80032c8:	f7fe f982 	bl	80015d0 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032ce:	e009      	b.n	80032e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032d0:	f7fe f97e 	bl	80015d0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032de:	d901      	bls.n	80032e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e007      	b.n	80032f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_PWREx_ConfigSupply+0xb0>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d1ee      	bne.n	80032d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	58024800 	.word	0x58024800

08003300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e3ff      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8087 	beq.w	800342e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003320:	4b99      	ldr	r3, [pc, #612]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800332a:	4b97      	ldr	r3, [pc, #604]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	2b10      	cmp	r3, #16
 8003334:	d007      	beq.n	8003346 <HAL_RCC_OscConfig+0x46>
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	2b18      	cmp	r3, #24
 800333a:	d110      	bne.n	800335e <HAL_RCC_OscConfig+0x5e>
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d10b      	bne.n	800335e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003346:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d06c      	beq.n	800342c <HAL_RCC_OscConfig+0x12c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d168      	bne.n	800342c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e3d9      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x76>
 8003368:	4b87      	ldr	r3, [pc, #540]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a86      	ldr	r2, [pc, #536]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e02e      	b.n	80033d4 <HAL_RCC_OscConfig+0xd4>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x98>
 800337e:	4b82      	ldr	r3, [pc, #520]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a81      	ldr	r2, [pc, #516]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e01d      	b.n	80033d4 <HAL_RCC_OscConfig+0xd4>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0xbc>
 80033a2:	4b79      	ldr	r3, [pc, #484]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a78      	ldr	r2, [pc, #480]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0xd4>
 80033bc:	4b72      	ldr	r3, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a71      	ldr	r2, [pc, #452]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6e      	ldr	r2, [pc, #440]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe f8f8 	bl	80015d0 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe f8f4 	bl	80015d0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e38d      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033f6:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0xe4>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f8e4 	bl	80015d0 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe f8e0 	bl	80015d0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e379      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800341e:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x10c>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80ae 	beq.w	8003598 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343c:	4b52      	ldr	r3, [pc, #328]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003444:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003446:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_RCC_OscConfig+0x162>
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	2b18      	cmp	r3, #24
 8003456:	d13a      	bne.n	80034ce <HAL_RCC_OscConfig+0x1ce>
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d135      	bne.n	80034ce <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003462:	4b49      	ldr	r3, [pc, #292]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x17a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e34b      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	f7fe f8b5 	bl	80015e8 <HAL_GetREVID>
 800347e:	4603      	mov	r3, r0
 8003480:	f241 0203 	movw	r2, #4099	; 0x1003
 8003484:	4293      	cmp	r3, r2
 8003486:	d817      	bhi.n	80034b8 <HAL_RCC_OscConfig+0x1b8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d108      	bne.n	80034a2 <HAL_RCC_OscConfig+0x1a2>
 8003490:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003498:	4a3b      	ldr	r2, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800349a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a0:	e07a      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	031b      	lsls	r3, r3, #12
 80034b0:	4935      	ldr	r1, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b6:	e06f      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b33      	ldr	r3, [pc, #204]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	061b      	lsls	r3, r3, #24
 80034c6:	4930      	ldr	r1, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034cc:	e064      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d045      	beq.n	8003562 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0219 	bic.w	r2, r3, #25
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4929      	ldr	r1, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe f872 	bl	80015d0 <HAL_GetTick>
 80034ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fe f86e 	bl	80015d0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e307      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	f7fe f86b 	bl	80015e8 <HAL_GetREVID>
 8003512:	4603      	mov	r3, r0
 8003514:	f241 0203 	movw	r2, #4099	; 0x1003
 8003518:	4293      	cmp	r3, r2
 800351a:	d817      	bhi.n	800354c <HAL_RCC_OscConfig+0x24c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d108      	bne.n	8003536 <HAL_RCC_OscConfig+0x236>
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800352c:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800352e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003532:	6053      	str	r3, [r2, #4]
 8003534:	e030      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	031b      	lsls	r3, r3, #12
 8003544:	4910      	ldr	r1, [pc, #64]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
 800354a:	e025      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	061b      	lsls	r3, r3, #24
 800355a:	490b      	ldr	r1, [pc, #44]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
 8003560:	e01a      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_RCC_OscConfig+0x288>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fe f82f 	bl	80015d0 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003576:	f7fe f82b 	bl	80015d0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d903      	bls.n	800358c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e2c4      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
 8003588:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800358c:	4ba4      	ldr	r3, [pc, #656]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a9 	beq.w	80036f8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a6:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035b0:	4b9b      	ldr	r3, [pc, #620]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d007      	beq.n	80035cc <HAL_RCC_OscConfig+0x2cc>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b18      	cmp	r3, #24
 80035c0:	d13a      	bne.n	8003638 <HAL_RCC_OscConfig+0x338>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d135      	bne.n	8003638 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035cc:	4b94      	ldr	r3, [pc, #592]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x2e4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e296      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035e4:	f7fe f800 	bl	80015e8 <HAL_GetREVID>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d817      	bhi.n	8003622 <HAL_RCC_OscConfig+0x322>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d108      	bne.n	800360c <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b89      	ldr	r3, [pc, #548]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003602:	4a87      	ldr	r2, [pc, #540]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003608:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800360a:	e075      	b.n	80036f8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800360c:	4b84      	ldr	r3, [pc, #528]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	069b      	lsls	r3, r3, #26
 800361a:	4981      	ldr	r1, [pc, #516]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003620:	e06a      	b.n	80036f8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003622:	4b7f      	ldr	r3, [pc, #508]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	497b      	ldr	r1, [pc, #492]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003636:	e05f      	b.n	80036f8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d042      	beq.n	80036c6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003640:	4b77      	ldr	r3, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a76      	ldr	r2, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fd ffc0 	bl	80015d0 <HAL_GetTick>
 8003650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003654:	f7fd ffbc 	bl	80015d0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e255      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003666:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003672:	f7fd ffb9 	bl	80015e8 <HAL_GetREVID>
 8003676:	4603      	mov	r3, r0
 8003678:	f241 0203 	movw	r2, #4099	; 0x1003
 800367c:	4293      	cmp	r3, r2
 800367e:	d817      	bhi.n	80036b0 <HAL_RCC_OscConfig+0x3b0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d108      	bne.n	800369a <HAL_RCC_OscConfig+0x39a>
 8003688:	4b65      	ldr	r3, [pc, #404]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003690:	4a63      	ldr	r2, [pc, #396]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003696:	6053      	str	r3, [r2, #4]
 8003698:	e02e      	b.n	80036f8 <HAL_RCC_OscConfig+0x3f8>
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	495d      	ldr	r1, [pc, #372]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 80036ae:	e023      	b.n	80036f8 <HAL_RCC_OscConfig+0x3f8>
 80036b0:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	4958      	ldr	r1, [pc, #352]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
 80036c4:	e018      	b.n	80036f8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036c6:	4b56      	ldr	r3, [pc, #344]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a55      	ldr	r2, [pc, #340]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80036cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd ff7d 	bl	80015d0 <HAL_GetTick>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036da:	f7fd ff79 	bl	80015d0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e212      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036ec:	4b4c      	ldr	r3, [pc, #304]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d036      	beq.n	8003772 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d019      	beq.n	8003740 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370c:	4b44      	ldr	r3, [pc, #272]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	4a43      	ldr	r2, [pc, #268]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003718:	f7fd ff5a 	bl	80015d0 <HAL_GetTick>
 800371c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7fd ff56 	bl	80015d0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1ef      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x420>
 800373e:	e018      	b.n	8003772 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003740:	4b37      	ldr	r3, [pc, #220]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	4a36      	ldr	r2, [pc, #216]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd ff40 	bl	80015d0 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd ff3c 	bl	80015d0 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1d5      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003766:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d036      	beq.n	80037ec <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d019      	beq.n	80037ba <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 800378c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003790:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003792:	f7fd ff1d 	bl	80015d0 <HAL_GetTick>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800379a:	f7fd ff19 	bl	80015d0 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1b2      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x49a>
 80037b8:	e018      	b.n	80037ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80037c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037c6:	f7fd ff03 	bl	80015d0 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037ce:	f7fd feff 	bl	80015d0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e198      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_OscConfig+0x520>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8085 	beq.w	8003904 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RCC_OscConfig+0x524>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_RCC_OscConfig+0x524>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003806:	f7fd fee3 	bl	80015d0 <HAL_GetTick>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800380c:	e00c      	b.n	8003828 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd fedf 	bl	80015d0 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d905      	bls.n	8003828 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e178      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
 8003820:	58024400 	.word	0x58024400
 8003824:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003828:	4b96      	ldr	r3, [pc, #600]	; (8003a84 <HAL_RCC_OscConfig+0x784>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ec      	beq.n	800380e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x54a>
 800383c:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a91      	ldr	r2, [pc, #580]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	e02d      	b.n	80038a6 <HAL_RCC_OscConfig+0x5a6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x56c>
 8003852:	4b8d      	ldr	r3, [pc, #564]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a8c      	ldr	r2, [pc, #560]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6713      	str	r3, [r2, #112]	; 0x70
 800385e:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	4a89      	ldr	r2, [pc, #548]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	6713      	str	r3, [r2, #112]	; 0x70
 800386a:	e01c      	b.n	80038a6 <HAL_RCC_OscConfig+0x5a6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d10c      	bne.n	800388e <HAL_RCC_OscConfig+0x58e>
 8003874:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a83      	ldr	r2, [pc, #524]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	4b81      	ldr	r3, [pc, #516]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a80      	ldr	r2, [pc, #512]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
 800388c:	e00b      	b.n	80038a6 <HAL_RCC_OscConfig+0x5a6>
 800388e:	4b7e      	ldr	r3, [pc, #504]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a7d      	ldr	r2, [pc, #500]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	6713      	str	r3, [r2, #112]	; 0x70
 800389a:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a7a      	ldr	r2, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7fd fe8f 	bl	80015d0 <HAL_GetTick>
 80038b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b6:	f7fd fe8b 	bl	80015d0 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e122      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038cc:	4b6e      	ldr	r3, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ee      	beq.n	80038b6 <HAL_RCC_OscConfig+0x5b6>
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fd fe79 	bl	80015d0 <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd fe75 	bl	80015d0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e10c      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038f8:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ee      	bne.n	80038e2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8101 	beq.w	8003b10 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800390e:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003916:	2b18      	cmp	r3, #24
 8003918:	f000 80bc 	beq.w	8003a94 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b02      	cmp	r3, #2
 8003922:	f040 8095 	bne.w	8003a50 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 800392c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd fe4d 	bl	80015d0 <HAL_GetTick>
 8003936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fe49 	bl	80015d0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0e2      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800394c:	4b4e      	ldr	r3, [pc, #312]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003958:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 800395a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_RCC_OscConfig+0x78c>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	430a      	orrs	r2, r1
 800396c:	4946      	ldr	r1, [pc, #280]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 800396e:	4313      	orrs	r3, r2
 8003970:	628b      	str	r3, [r1, #40]	; 0x28
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	3b01      	subs	r3, #1
 8003978:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	3b01      	subs	r3, #1
 8003982:	025b      	lsls	r3, r3, #9
 8003984:	b29b      	uxth	r3, r3
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	3b01      	subs	r3, #1
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039a2:	4939      	ldr	r1, [pc, #228]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80039a8:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4a36      	ldr	r2, [pc, #216]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039b4:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b8:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <HAL_RCC_OscConfig+0x790>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	4931      	ldr	r1, [pc, #196]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039c8:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f023 020c 	bic.w	r2, r3, #12
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	492c      	ldr	r1, [pc, #176]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f023 0202 	bic.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	4928      	ldr	r1, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039ec:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a04:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd fdd2 	bl	80015d0 <HAL_GetTick>
 8003a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd fdce 	bl	80015d0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e067      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x730>
 8003a4e:	e05f      	b.n	8003b10 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fdb8 	bl	80015d0 <HAL_GetTick>
 8003a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd fdb4 	bl	80015d0 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e04d      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_RCC_OscConfig+0x788>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x764>
 8003a82:	e045      	b.n	8003b10 <HAL_RCC_OscConfig+0x810>
 8003a84:	58024800 	.word	0x58024800
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	fffffc0c 	.word	0xfffffc0c
 8003a90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a94:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCC_OscConfig+0x81c>)
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_OscConfig+0x81c>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d031      	beq.n	8003b0c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0203 	and.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d12a      	bne.n	8003b0c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d122      	bne.n	8003b0c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11a      	bne.n	8003b0c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	0a5b      	lsrs	r3, r3, #9
 8003ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d108      	bne.n	8003b0c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3730      	adds	r7, #48	; 0x30
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	58024400 	.word	0x58024400

08003b20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e19c      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b8a      	ldr	r3, [pc, #552]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b87      	ldr	r3, [pc, #540]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4985      	ldr	r1, [pc, #532]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b83      	ldr	r3, [pc, #524]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e184      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d010      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	4b7b      	ldr	r3, [pc, #492]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d908      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b80:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	4975      	ldr	r1, [pc, #468]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d010      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	4b70      	ldr	r3, [pc, #448]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d908      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bae:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	496a      	ldr	r1, [pc, #424]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699a      	ldr	r2, [r3, #24]
 8003bd0:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d908      	bls.n	8003bee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bdc:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	495e      	ldr	r1, [pc, #376]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	4b59      	ldr	r3, [pc, #356]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d908      	bls.n	8003c1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c0a:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4953      	ldr	r1, [pc, #332]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	4b4d      	ldr	r3, [pc, #308]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d908      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f023 020f 	bic.w	r2, r3, #15
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4947      	ldr	r1, [pc, #284]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d055      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c56:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	4940      	ldr	r1, [pc, #256]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c70:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d121      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0f6      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d107      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d115      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0ea      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ca0:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d109      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0de      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cb0:	4b2c      	ldr	r3, [pc, #176]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0d6      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f023 0207 	bic.w	r2, r3, #7
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4925      	ldr	r1, [pc, #148]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fd fc7d 	bl	80015d0 <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cda:	f7fd fc79 	bl	80015d0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e0be      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d1eb      	bne.n	8003cda <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d208      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f023 020f 	bic.w	r2, r3, #15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	490e      	ldr	r1, [pc, #56]	; (8003d64 <HAL_RCC_ClockConfig+0x244>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d214      	bcs.n	8003d68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 020f 	bic.w	r2, r3, #15
 8003d46:	4906      	ldr	r1, [pc, #24]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <HAL_RCC_ClockConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e086      	b.n	8003e6e <HAL_RCC_ClockConfig+0x34e>
 8003d60:	52002000 	.word	0x52002000
 8003d64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d010      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	4b3f      	ldr	r3, [pc, #252]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d208      	bcs.n	8003d96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d84:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	4939      	ldr	r1, [pc, #228]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d208      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003db2:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	492e      	ldr	r1, [pc, #184]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	4b28      	ldr	r3, [pc, #160]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d208      	bcs.n	8003df2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4922      	ldr	r1, [pc, #136]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d010      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d208      	bcs.n	8003e20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4917      	ldr	r1, [pc, #92]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e20:	f000 f834 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	4912      	ldr	r1, [pc, #72]	; (8003e7c <HAL_RCC_ClockConfig+0x35c>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_RCC_ClockConfig+0x358>)
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <HAL_RCC_ClockConfig+0x35c>)
 8003e48:	5cd3      	ldrb	r3, [r2, r3]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x360>)
 8003e56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e58:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x364>)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x368>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd fb6a 	bl	800153c <HAL_InitTick>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	58024400 	.word	0x58024400
 8003e7c:	08006d84 	.word	0x08006d84
 8003e80:	24000004 	.word	0x24000004
 8003e84:	24000000 	.word	0x24000000
 8003e88:	240000b8 	.word	0x240000b8

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e92:	4bb3      	ldr	r3, [pc, #716]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e9a:	2b18      	cmp	r3, #24
 8003e9c:	f200 8155 	bhi.w	800414a <HAL_RCC_GetSysClockFreq+0x2be>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	0800414b 	.word	0x0800414b
 8003eb0:	0800414b 	.word	0x0800414b
 8003eb4:	0800414b 	.word	0x0800414b
 8003eb8:	0800414b 	.word	0x0800414b
 8003ebc:	0800414b 	.word	0x0800414b
 8003ec0:	0800414b 	.word	0x0800414b
 8003ec4:	0800414b 	.word	0x0800414b
 8003ec8:	08003f33 	.word	0x08003f33
 8003ecc:	0800414b 	.word	0x0800414b
 8003ed0:	0800414b 	.word	0x0800414b
 8003ed4:	0800414b 	.word	0x0800414b
 8003ed8:	0800414b 	.word	0x0800414b
 8003edc:	0800414b 	.word	0x0800414b
 8003ee0:	0800414b 	.word	0x0800414b
 8003ee4:	0800414b 	.word	0x0800414b
 8003ee8:	08003f39 	.word	0x08003f39
 8003eec:	0800414b 	.word	0x0800414b
 8003ef0:	0800414b 	.word	0x0800414b
 8003ef4:	0800414b 	.word	0x0800414b
 8003ef8:	0800414b 	.word	0x0800414b
 8003efc:	0800414b 	.word	0x0800414b
 8003f00:	0800414b 	.word	0x0800414b
 8003f04:	0800414b 	.word	0x0800414b
 8003f08:	08003f3f 	.word	0x08003f3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f0c:	4b94      	ldr	r3, [pc, #592]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f18:	4b91      	ldr	r3, [pc, #580]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	08db      	lsrs	r3, r3, #3
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	4a90      	ldr	r2, [pc, #576]	; (8004164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f2a:	e111      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f2c:	4b8d      	ldr	r3, [pc, #564]	; (8004164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f2e:	61bb      	str	r3, [r7, #24]
    break;
 8003f30:	e10e      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f32:	4b8d      	ldr	r3, [pc, #564]	; (8004168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f34:	61bb      	str	r3, [r7, #24]
    break;
 8003f36:	e10b      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f38:	4b8c      	ldr	r3, [pc, #560]	; (800416c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f3a:	61bb      	str	r3, [r7, #24]
    break;
 8003f3c:	e108      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f3e:	4b88      	ldr	r3, [pc, #544]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f48:	4b85      	ldr	r3, [pc, #532]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f54:	4b82      	ldr	r3, [pc, #520]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f5e:	4b80      	ldr	r3, [pc, #512]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80e1 	beq.w	8004144 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	f000 8083 	beq.w	8004090 <HAL_RCC_GetSysClockFreq+0x204>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f200 80a1 	bhi.w	80040d4 <HAL_RCC_GetSysClockFreq+0x248>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x114>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d056      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f9e:	e099      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02d      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fac:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	08db      	lsrs	r3, r3, #3
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	4a6b      	ldr	r2, [pc, #428]	; (8004164 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004006:	e087      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004174 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b51      	ldr	r3, [pc, #324]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a02 	vldr	s12, [r7, #8]
 800402e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800404a:	e065      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004178 <HAL_RCC_GetSysClockFreq+0x2ec>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b40      	ldr	r3, [pc, #256]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004072:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004170 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800408e:	e043      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800417c <HAL_RCC_GetSysClockFreq+0x2f0>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004170 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d2:	e021      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004178 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004170 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004116:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	0a5b      	lsrs	r3, r3, #9
 800411e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004122:	3301      	adds	r3, #1
 8004124:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004130:	edd7 6a07 	vldr	s13, [r7, #28]
 8004134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413c:	ee17 3a90 	vmov	r3, s15
 8004140:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004142:	e005      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
    break;
 8004148:	e002      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800414c:	61bb      	str	r3, [r7, #24]
    break;
 800414e:	bf00      	nop
  }

  return sysclockfreq;
 8004150:	69bb      	ldr	r3, [r7, #24]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	; 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
 8004164:	03d09000 	.word	0x03d09000
 8004168:	003d0900 	.word	0x003d0900
 800416c:	016e3600 	.word	0x016e3600
 8004170:	46000000 	.word	0x46000000
 8004174:	4c742400 	.word	0x4c742400
 8004178:	4a742400 	.word	0x4a742400
 800417c:	4bb71b00 	.word	0x4bb71b00

08004180 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004188:	2300      	movs	r3, #0
 800418a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800418c:	2300      	movs	r3, #0
 800418e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041a4:	d02a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041aa:	d824      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b0:	d018      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b6:	d81e      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c0:	d007      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041c2:	e018      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c4:	4bab      	ldr	r3, [pc, #684]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	4aaa      	ldr	r2, [pc, #680]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041d0:	e015      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 ff11 	bl	8005000 <RCCEx_PLL2_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041e2:	e00c      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3324      	adds	r3, #36	; 0x24
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 ffba 	bl	8005164 <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80041f4:	e003      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004204:	4b9b      	ldr	r3, [pc, #620]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004210:	4998      	ldr	r1, [pc, #608]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	650b      	str	r3, [r1, #80]	; 0x50
 8004216:	e001      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03d      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	2b04      	cmp	r3, #4
 800422e:	d826      	bhi.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800424d 	.word	0x0800424d
 800423c:	0800425b 	.word	0x0800425b
 8004240:	0800426d 	.word	0x0800426d
 8004244:	08004285 	.word	0x08004285
 8004248:	08004285 	.word	0x08004285
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424c:	4b89      	ldr	r3, [pc, #548]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4a88      	ldr	r2, [pc, #544]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004258:	e015      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2100      	movs	r1, #0
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fecd 	bl	8005000 <RCCEx_PLL2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800426a:	e00c      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3324      	adds	r3, #36	; 0x24
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 ff76 	bl	8005164 <RCCEx_PLL3_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
      break;
 8004282:	e000      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800428c:	4b79      	ldr	r3, [pc, #484]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800428e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004290:	f023 0207 	bic.w	r2, r3, #7
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	4976      	ldr	r1, [pc, #472]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	650b      	str	r3, [r1, #80]	; 0x50
 800429e:	e001      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d042      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b8:	d02b      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80042ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042be:	d825      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042c0:	2bc0      	cmp	r3, #192	; 0xc0
 80042c2:	d028      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042c4:	2bc0      	cmp	r3, #192	; 0xc0
 80042c6:	d821      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d016      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d81d      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d007      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80042d8:	e018      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042da:	4b66      	ldr	r3, [pc, #408]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	4a65      	ldr	r2, [pc, #404]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80042e6:	e017      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fe86 	bl	8005000 <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80042f8:	e00e      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3324      	adds	r3, #36	; 0x24
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f000 ff2f 	bl	8005164 <RCCEx_PLL3_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800430a:	e005      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
      break;
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800431e:	4b55      	ldr	r3, [pc, #340]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4952      	ldr	r1, [pc, #328]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	650b      	str	r3, [r1, #80]	; 0x50
 8004330:	e001      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	2b00      	cmp	r3, #0
 8004340:	d049      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800434c:	d030      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800434e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004352:	d82a      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004354:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004358:	d02c      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800435a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800435e:	d824      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004364:	d018      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436a:	d81e      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004374:	d007      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004376:	e018      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004378:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	4a3d      	ldr	r2, [pc, #244]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800437e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004384:	e017      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fe37 	bl	8005000 <RCCEx_PLL2_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004396:	e00e      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3324      	adds	r3, #36	; 0x24
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fee0 	bl	8005164 <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043a8:	e005      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80043b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80043bc:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ca:	492a      	ldr	r1, [pc, #168]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	658b      	str	r3, [r1, #88]	; 0x58
 80043d0:	e001      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d04c      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ec:	d030      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80043ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f2:	d82a      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80043f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043f8:	d02c      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80043fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043fe:	d824      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004400:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004404:	d018      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440a:	d81e      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004414:	d007      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004416:	e018      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004418:	4b16      	ldr	r3, [pc, #88]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800441e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004424:	e017      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fde7 	bl	8005000 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004436:	e00e      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fe90 	bl	8005164 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004448:	e005      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800446a:	4902      	ldr	r1, [pc, #8]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800446c:	4313      	orrs	r3, r2
 800446e:	658b      	str	r3, [r1, #88]	; 0x58
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d032      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d01c      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004490:	2b30      	cmp	r3, #48	; 0x30
 8004492:	d817      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004494:	2b20      	cmp	r3, #32
 8004496:	d00c      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004498:	2b20      	cmp	r3, #32
 800449a:	d813      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d016      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d10f      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4baf      	ldr	r3, [pc, #700]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4aae      	ldr	r2, [pc, #696]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80044b0:	e00e      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2102      	movs	r1, #2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fda1 	bl	8005000 <RCCEx_PLL2_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	e002      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80044ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044d6:	4ba3      	ldr	r3, [pc, #652]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e2:	49a0      	ldr	r1, [pc, #640]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044e8:	e001      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d047      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004502:	d030      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004508:	d82a      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800450a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800450e:	d02c      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004514:	d824      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451a:	d018      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800451c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004520:	d81e      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d007      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800452c:	e018      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452e:	4b8d      	ldr	r3, [pc, #564]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	4a8c      	ldr	r2, [pc, #560]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800453a:	e017      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fd5c 	bl	8005000 <RCCEx_PLL2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800454c:	e00e      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3324      	adds	r3, #36	; 0x24
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fe05 	bl	8005164 <RCCEx_PLL3_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800455e:	e005      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	75fb      	strb	r3, [r7, #23]
      break;
 8004564:	e002      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800456a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004572:	4b7c      	ldr	r3, [pc, #496]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004576:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457e:	4979      	ldr	r1, [pc, #484]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	650b      	str	r3, [r1, #80]	; 0x50
 8004584:	e001      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d049      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800459e:	d02e      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d828      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045aa:	d02a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80045ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045b0:	d822      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045b6:	d026      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80045b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045bc:	d81c      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c2:	d010      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80045c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c8:	d816      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01d      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80045ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d2:	d111      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fd10 	bl	8005000 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80045e4:	e012      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3324      	adds	r3, #36	; 0x24
 80045ea:	2101      	movs	r1, #1
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fdb9 	bl	8005164 <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80045f6:	e009      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      break;
 80045fc:	e006      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80045fe:	bf00      	nop
 8004600:	e004      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800460a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004612:	4b54      	ldr	r3, [pc, #336]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004616:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461e:	4951      	ldr	r1, [pc, #324]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	650b      	str	r3, [r1, #80]	; 0x50
 8004624:	e001      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d04b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800463c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004640:	d02e      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004646:	d828      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d02a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004652:	d822      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004658:	d026      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800465a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800465e:	d81c      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004664:	d010      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466a:	d816      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004674:	d111      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	2101      	movs	r1, #1
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fcbf 	bl	8005000 <RCCEx_PLL2_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004686:	e012      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3324      	adds	r3, #36	; 0x24
 800468c:	2101      	movs	r1, #1
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fd68 	bl	8005164 <RCCEx_PLL3_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004698:	e009      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
      break;
 800469e:	e006      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80046ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046b4:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c2:	4928      	ldr	r1, [pc, #160]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	658b      	str	r3, [r1, #88]	; 0x58
 80046c8:	e001      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02f      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e2:	d00e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80046e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046e8:	d814      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d015      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80046ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046f2:	d10f      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004700:	e00c      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3304      	adds	r3, #4
 8004706:	2101      	movs	r1, #1
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fc79 	bl	8005000 <RCCEx_PLL2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
      break;
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800471a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472e:	490d      	ldr	r1, [pc, #52]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	650b      	str	r3, [r1, #80]	; 0x50
 8004734:	e001      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	7dfb      	ldrb	r3, [r7, #23]
 8004738:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d033      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	2b03      	cmp	r3, #3
 800474c:	d81c      	bhi.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	0800478f 	.word	0x0800478f
 8004758:	08004769 	.word	0x08004769
 800475c:	08004777 	.word	0x08004777
 8004760:	0800478f 	.word	0x0800478f
 8004764:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004768:	4bb8      	ldr	r3, [pc, #736]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	4ab7      	ldr	r2, [pc, #732]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004774:	e00c      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3304      	adds	r3, #4
 800477a:	2102      	movs	r1, #2
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fc3f 	bl	8005000 <RCCEx_PLL2_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004786:	e003      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
      break;
 800478c:	e000      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800478e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004796:	4bad      	ldr	r3, [pc, #692]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	49aa      	ldr	r1, [pc, #680]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047a8:	e001      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8086 	beq.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047bc:	4ba4      	ldr	r3, [pc, #656]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4aa3      	ldr	r2, [pc, #652]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80047c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c8:	f7fc ff02 	bl	80015d0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ce:	e009      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d0:	f7fc fefe 	bl	80015d0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d902      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	75fb      	strb	r3, [r7, #23]
        break;
 80047e2:	e005      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e4:	4b9a      	ldr	r3, [pc, #616]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ef      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d166      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047f6:	4b95      	ldr	r3, [pc, #596]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80047f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004800:	4053      	eors	r3, r2
 8004802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004806:	2b00      	cmp	r3, #0
 8004808:	d013      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800480a:	4b90      	ldr	r3, [pc, #576]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004814:	4b8d      	ldr	r3, [pc, #564]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	4a8c      	ldr	r2, [pc, #560]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800481a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004820:	4b8a      	ldr	r3, [pc, #552]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a89      	ldr	r2, [pc, #548]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800482c:	4a87      	ldr	r2, [pc, #540]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483c:	d115      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483e:	f7fc fec7 	bl	80015d0 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004844:	e00b      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fc fec3 	bl	80015d0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d902      	bls.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	75fb      	strb	r3, [r7, #23]
            break;
 800485c:	e005      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800485e:	4b7b      	ldr	r3, [pc, #492]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ed      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d126      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487e:	d10d      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004880:	4b72      	ldr	r3, [pc, #456]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800488e:	0919      	lsrs	r1, r3, #4
 8004890:	4b70      	ldr	r3, [pc, #448]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004892:	400b      	ands	r3, r1
 8004894:	496d      	ldr	r1, [pc, #436]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	610b      	str	r3, [r1, #16]
 800489a:	e005      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800489c:	4b6b      	ldr	r3, [pc, #428]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048a6:	6113      	str	r3, [r2, #16]
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b6:	4965      	ldr	r1, [pc, #404]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	670b      	str	r3, [r1, #112]	; 0x70
 80048bc:	e004      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	75bb      	strb	r3, [r7, #22]
 80048c2:	e001      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d07e      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d8:	2b28      	cmp	r3, #40	; 0x28
 80048da:	d867      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	080049b3 	.word	0x080049b3
 80048e8:	080049ad 	.word	0x080049ad
 80048ec:	080049ad 	.word	0x080049ad
 80048f0:	080049ad 	.word	0x080049ad
 80048f4:	080049ad 	.word	0x080049ad
 80048f8:	080049ad 	.word	0x080049ad
 80048fc:	080049ad 	.word	0x080049ad
 8004900:	080049ad 	.word	0x080049ad
 8004904:	08004989 	.word	0x08004989
 8004908:	080049ad 	.word	0x080049ad
 800490c:	080049ad 	.word	0x080049ad
 8004910:	080049ad 	.word	0x080049ad
 8004914:	080049ad 	.word	0x080049ad
 8004918:	080049ad 	.word	0x080049ad
 800491c:	080049ad 	.word	0x080049ad
 8004920:	080049ad 	.word	0x080049ad
 8004924:	0800499b 	.word	0x0800499b
 8004928:	080049ad 	.word	0x080049ad
 800492c:	080049ad 	.word	0x080049ad
 8004930:	080049ad 	.word	0x080049ad
 8004934:	080049ad 	.word	0x080049ad
 8004938:	080049ad 	.word	0x080049ad
 800493c:	080049ad 	.word	0x080049ad
 8004940:	080049ad 	.word	0x080049ad
 8004944:	080049b3 	.word	0x080049b3
 8004948:	080049ad 	.word	0x080049ad
 800494c:	080049ad 	.word	0x080049ad
 8004950:	080049ad 	.word	0x080049ad
 8004954:	080049ad 	.word	0x080049ad
 8004958:	080049ad 	.word	0x080049ad
 800495c:	080049ad 	.word	0x080049ad
 8004960:	080049ad 	.word	0x080049ad
 8004964:	080049b3 	.word	0x080049b3
 8004968:	080049ad 	.word	0x080049ad
 800496c:	080049ad 	.word	0x080049ad
 8004970:	080049ad 	.word	0x080049ad
 8004974:	080049ad 	.word	0x080049ad
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049ad 	.word	0x080049ad
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049b3 	.word	0x080049b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2101      	movs	r1, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fb36 	bl	8005000 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004998:	e00c      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3324      	adds	r3, #36	; 0x24
 800499e:	2101      	movs	r1, #1
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fbdf 	bl	8005164 <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049aa:	e003      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
      break;
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80049b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049ba:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c6:	4921      	ldr	r1, [pc, #132]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	654b      	str	r3, [r1, #84]	; 0x54
 80049cc:	e001      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d03e      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d820      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80049e6:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a2f 	.word	0x08004a2f
 80049f0:	08004a05 	.word	0x08004a05
 80049f4:	08004a17 	.word	0x08004a17
 80049f8:	08004a2f 	.word	0x08004a2f
 80049fc:	08004a2f 	.word	0x08004a2f
 8004a00:	08004a2f 	.word	0x08004a2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 faf8 	bl	8005000 <RCCEx_PLL2_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a14:	e00c      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3324      	adds	r3, #36	; 0x24
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fba1 	bl	8005164 <RCCEx_PLL3_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d110      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	f023 0207 	bic.w	r2, r3, #7
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a42:	4902      	ldr	r1, [pc, #8]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	654b      	str	r3, [r1, #84]	; 0x54
 8004a48:	e008      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004a4a:	bf00      	nop
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	58024800 	.word	0x58024800
 8004a54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d039      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d820      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004a72:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004abb 	.word	0x08004abb
 8004a7c:	08004a91 	.word	0x08004a91
 8004a80:	08004aa3 	.word	0x08004aa3
 8004a84:	08004abb 	.word	0x08004abb
 8004a88:	08004abb 	.word	0x08004abb
 8004a8c:	08004abb 	.word	0x08004abb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	2101      	movs	r1, #1
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fab2 	bl	8005000 <RCCEx_PLL2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004aa0:	e00c      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3324      	adds	r3, #36	; 0x24
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fb5b 	bl	8005164 <RCCEx_PLL3_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ab2:	e003      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	e000      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac2:	4bb7      	ldr	r3, [pc, #732]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	f023 0207 	bic.w	r2, r3, #7
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	49b3      	ldr	r1, [pc, #716]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad6:	e001      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d04b      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004af2:	d02e      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004af8:	d828      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afe:	d02a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d822      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b0a:	d026      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b10:	d81c      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b16:	d010      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1c:	d816      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01d      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b26:	d111      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fa66 	bl	8005000 <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b38:	e012      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3324      	adds	r3, #36	; 0x24
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fb0f 	bl	8005164 <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b4a:	e009      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b50:	e006      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b52:	bf00      	nop
 8004b54:	e004      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b66:	4b8e      	ldr	r3, [pc, #568]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	498a      	ldr	r1, [pc, #552]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	654b      	str	r3, [r1, #84]	; 0x54
 8004b7a:	e001      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d04b      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b96:	d02e      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004b98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b9c:	d828      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d02a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba8:	d822      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bae:	d026      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bb4:	d81c      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bba:	d010      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc0:	d816      	bhi.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01d      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bca:	d111      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa14 	bl	8005000 <RCCEx_PLL2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004bdc:	e012      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3324      	adds	r3, #36	; 0x24
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fabd 	bl	8005164 <RCCEx_PLL3_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004bee:	e009      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf4:	e006      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e004      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e002      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e000      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c0a:	4b65      	ldr	r3, [pc, #404]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c18:	4961      	ldr	r1, [pc, #388]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c1e:	e001      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d04b      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c3a:	d02e      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004c3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c40:	d828      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c46:	d02a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4c:	d822      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c52:	d026      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004c54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c58:	d81c      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5e:	d010      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c64:	d816      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01d      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6e:	d111      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f9c2 	bl	8005000 <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c80:	e012      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3324      	adds	r3, #36	; 0x24
 8004c86:	2102      	movs	r1, #2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fa6b 	bl	8005164 <RCCEx_PLL3_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c92:	e009      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
      break;
 8004c98:	e006      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e004      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e002      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004cae:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cbc:	4938      	ldr	r1, [pc, #224]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	658b      	str	r3, [r1, #88]	; 0x58
 8004cc2:	e001      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cde:	d10a      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3324      	adds	r3, #36	; 0x24
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fa3c 	bl	8005164 <RCCEx_PLL3_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d04:	4926      	ldr	r1, [pc, #152]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d20:	d10a      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3324      	adds	r3, #36	; 0x24
 8004d26:	2102      	movs	r1, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fa1b 	bl	8005164 <RCCEx_PLL3_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d38:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d46:	4916      	ldr	r1, [pc, #88]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d036      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d62:	d01f      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d68:	d817      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d72:	d009      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004d74:	e011      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f93f 	bl	8005000 <RCCEx_PLL2_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d86:	e00e      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3324      	adds	r3, #36	; 0x24
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f9e8 	bl	8005164 <RCCEx_PLL3_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d98:	e005      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9e:	e002      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004da0:	58024400 	.word	0x58024400
      break;
 8004da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dac:	4b93      	ldr	r3, [pc, #588]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dba:	4990      	ldr	r1, [pc, #576]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	658b      	str	r3, [r1, #88]	; 0x58
 8004dc0:	e001      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d033      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ddc:	d01c      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004dde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004de2:	d816      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de8:	d003      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dee:	d007      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004df0:	e00f      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df2:	4b82      	ldr	r3, [pc, #520]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	4a81      	ldr	r2, [pc, #516]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004dfe:	e00c      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3324      	adds	r3, #36	; 0x24
 8004e04:	2101      	movs	r1, #1
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 f9ac 	bl	8005164 <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e10:	e003      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	75fb      	strb	r3, [r7, #23]
      break;
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e20:	4b76      	ldr	r3, [pc, #472]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2e:	4973      	ldr	r1, [pc, #460]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	654b      	str	r3, [r1, #84]	; 0x54
 8004e34:	e001      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d029      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e52:	d007      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004e54:	e00f      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e56:	4b69      	ldr	r3, [pc, #420]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	4a68      	ldr	r2, [pc, #416]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e62:	e00b      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3304      	adds	r3, #4
 8004e68:	2102      	movs	r1, #2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f8c8 	bl	8005000 <RCCEx_PLL2_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e74:	e002      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	75fb      	strb	r3, [r7, #23]
      break;
 8004e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e82:	4b5e      	ldr	r3, [pc, #376]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	495b      	ldr	r1, [pc, #364]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004e94:	e001      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3324      	adds	r3, #36	; 0x24
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f959 	bl	8005164 <RCCEx_PLL3_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d030      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed0:	d017      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed6:	d811      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004edc:	d013      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee2:	d80b      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eec:	d106      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eee:	4b43      	ldr	r3, [pc, #268]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	4a42      	ldr	r2, [pc, #264]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004efa:	e007      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e004      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004f02:	bf00      	nop
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f12:	4b3a      	ldr	r3, [pc, #232]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1e:	4937      	ldr	r1, [pc, #220]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	654b      	str	r3, [r1, #84]	; 0x54
 8004f24:	e001      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	492e      	ldr	r1, [pc, #184]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d009      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f54:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f62:	4926      	ldr	r1, [pc, #152]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f74:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f80:	491e      	ldr	r1, [pc, #120]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f92:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f9c:	6113      	str	r3, [r2, #16]
 8004f9e:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004fa8:	4914      	ldr	r1, [pc, #80]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	da08      	bge.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fb6:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc2:	490e      	ldr	r1, [pc, #56]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	4906      	ldr	r1, [pc, #24]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004fe8:	7dbb      	ldrb	r3, [r7, #22]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	58024400 	.word	0x58024400

08005000 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800500e:	4b53      	ldr	r3, [pc, #332]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b03      	cmp	r3, #3
 8005018:	d101      	bne.n	800501e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e099      	b.n	8005152 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800501e:	4b4f      	ldr	r3, [pc, #316]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a4e      	ldr	r2, [pc, #312]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005024:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800502a:	f7fc fad1 	bl	80015d0 <HAL_GetTick>
 800502e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005030:	e008      	b.n	8005044 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005032:	f7fc facd 	bl	80015d0 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e086      	b.n	8005152 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005044:	4b45      	ldr	r3, [pc, #276]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005050:	4b42      	ldr	r3, [pc, #264]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	493f      	ldr	r1, [pc, #252]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	628b      	str	r3, [r1, #40]	; 0x28
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	3b01      	subs	r3, #1
 800506a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	3b01      	subs	r3, #1
 8005074:	025b      	lsls	r3, r3, #9
 8005076:	b29b      	uxth	r3, r3
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	3b01      	subs	r3, #1
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	3b01      	subs	r3, #1
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005094:	4931      	ldr	r1, [pc, #196]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	492d      	ldr	r1, [pc, #180]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	f023 0220 	bic.w	r2, r3, #32
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	4928      	ldr	r1, [pc, #160]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	4a26      	ldr	r2, [pc, #152]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050c4:	f023 0310 	bic.w	r3, r3, #16
 80050c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ce:	4b24      	ldr	r3, [pc, #144]	; (8005160 <RCCEx_PLL2_Config+0x160>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	69d2      	ldr	r2, [r2, #28]
 80050d6:	00d2      	lsls	r2, r2, #3
 80050d8:	4920      	ldr	r1, [pc, #128]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050de:	4b1f      	ldr	r3, [pc, #124]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050e4:	f043 0310 	orr.w	r3, r3, #16
 80050e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050f0:	4b1a      	ldr	r3, [pc, #104]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	4a19      	ldr	r2, [pc, #100]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 80050f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050fc:	e00f      	b.n	800511e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d106      	bne.n	8005112 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005104:	4b15      	ldr	r3, [pc, #84]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4a14      	ldr	r2, [pc, #80]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005110:	e005      	b.n	800511e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	4a11      	ldr	r2, [pc, #68]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800511c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a0e      	ldr	r2, [pc, #56]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512a:	f7fc fa51 	bl	80015d0 <HAL_GetTick>
 800512e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005130:	e008      	b.n	8005144 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005132:	f7fc fa4d 	bl	80015d0 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e006      	b.n	8005152 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <RCCEx_PLL2_Config+0x15c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
 8005160:	ffff0007 	.word	0xffff0007

08005164 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005172:	4b53      	ldr	r3, [pc, #332]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b03      	cmp	r3, #3
 800517c:	d101      	bne.n	8005182 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e099      	b.n	80052b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005182:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a4e      	ldr	r2, [pc, #312]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518e:	f7fc fa1f 	bl	80015d0 <HAL_GetTick>
 8005192:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005194:	e008      	b.n	80051a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005196:	f7fc fa1b 	bl	80015d0 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e086      	b.n	80052b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051a8:	4b45      	ldr	r3, [pc, #276]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f0      	bne.n	8005196 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051b4:	4b42      	ldr	r3, [pc, #264]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	051b      	lsls	r3, r3, #20
 80051c2:	493f      	ldr	r1, [pc, #252]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	628b      	str	r3, [r1, #40]	; 0x28
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	025b      	lsls	r3, r3, #9
 80051da:	b29b      	uxth	r3, r3
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051f8:	4931      	ldr	r1, [pc, #196]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051fe:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	492d      	ldr	r1, [pc, #180]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005210:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	4928      	ldr	r1, [pc, #160]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005222:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800522c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800522e:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <RCCEx_PLL3_Config+0x160>)
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	69d2      	ldr	r2, [r2, #28]
 800523a:	00d2      	lsls	r2, r2, #3
 800523c:	4920      	ldr	r1, [pc, #128]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 800523e:	4313      	orrs	r3, r2
 8005240:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005242:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 800525a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005260:	e00f      	b.n	8005282 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4a14      	ldr	r2, [pc, #80]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 800526e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005272:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005274:	e005      	b.n	8005282 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005276:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 800527c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005280:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a0e      	ldr	r2, [pc, #56]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 8005288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528e:	f7fc f99f 	bl	80015d0 <HAL_GetTick>
 8005292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005294:	e008      	b.n	80052a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005296:	f7fc f99b 	bl	80015d0 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e006      	b.n	80052b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <RCCEx_PLL3_Config+0x15c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	58024400 	.word	0x58024400
 80052c4:	ffff0007 	.word	0xffff0007

080052c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e049      	b.n	800536e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f841 	bl	8005376 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fbac 	bl	8005a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e049      	b.n	8005430 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f841 	bl	8005438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3304      	adds	r3, #4
 80053c6:	4619      	mov	r1, r3
 80053c8:	4610      	mov	r0, r2
 80053ca:	f000 fb4b 	bl	8005a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <HAL_TIM_PWM_Start+0x24>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e03c      	b.n	80054ea <HAL_TIM_PWM_Start+0x9e>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b04      	cmp	r3, #4
 8005474:	d109      	bne.n	800548a <HAL_TIM_PWM_Start+0x3e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	bf14      	ite	ne
 8005482:	2301      	movne	r3, #1
 8005484:	2300      	moveq	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e02f      	b.n	80054ea <HAL_TIM_PWM_Start+0x9e>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d109      	bne.n	80054a4 <HAL_TIM_PWM_Start+0x58>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	bf14      	ite	ne
 800549c:	2301      	movne	r3, #1
 800549e:	2300      	moveq	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e022      	b.n	80054ea <HAL_TIM_PWM_Start+0x9e>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d109      	bne.n	80054be <HAL_TIM_PWM_Start+0x72>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	bf14      	ite	ne
 80054b6:	2301      	movne	r3, #1
 80054b8:	2300      	moveq	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e015      	b.n	80054ea <HAL_TIM_PWM_Start+0x9e>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d109      	bne.n	80054d8 <HAL_TIM_PWM_Start+0x8c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	bf14      	ite	ne
 80054d0:	2301      	movne	r3, #1
 80054d2:	2300      	moveq	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	e008      	b.n	80054ea <HAL_TIM_PWM_Start+0x9e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	bf14      	ite	ne
 80054e4:	2301      	movne	r3, #1
 80054e6:	2300      	moveq	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e09c      	b.n	800562c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_PWM_Start+0xb6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005500:	e023      	b.n	800554a <HAL_TIM_PWM_Start+0xfe>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d104      	bne.n	8005512 <HAL_TIM_PWM_Start+0xc6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005510:	e01b      	b.n	800554a <HAL_TIM_PWM_Start+0xfe>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Start+0xd6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005520:	e013      	b.n	800554a <HAL_TIM_PWM_Start+0xfe>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0xe6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005530:	e00b      	b.n	800554a <HAL_TIM_PWM_Start+0xfe>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b10      	cmp	r3, #16
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0xf6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005540:	e003      	b.n	800554a <HAL_TIM_PWM_Start+0xfe>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fe8c 	bl	8006270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a35      	ldr	r2, [pc, #212]	; (8005634 <HAL_TIM_PWM_Start+0x1e8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_TIM_PWM_Start+0x13e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a34      	ldr	r2, [pc, #208]	; (8005638 <HAL_TIM_PWM_Start+0x1ec>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00e      	beq.n	800558a <HAL_TIM_PWM_Start+0x13e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a32      	ldr	r2, [pc, #200]	; (800563c <HAL_TIM_PWM_Start+0x1f0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d009      	beq.n	800558a <HAL_TIM_PWM_Start+0x13e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a31      	ldr	r2, [pc, #196]	; (8005640 <HAL_TIM_PWM_Start+0x1f4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d004      	beq.n	800558a <HAL_TIM_PWM_Start+0x13e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a2f      	ldr	r2, [pc, #188]	; (8005644 <HAL_TIM_PWM_Start+0x1f8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d101      	bne.n	800558e <HAL_TIM_PWM_Start+0x142>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_TIM_PWM_Start+0x144>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a22      	ldr	r2, [pc, #136]	; (8005634 <HAL_TIM_PWM_Start+0x1e8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01d      	beq.n	80055ea <HAL_TIM_PWM_Start+0x19e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d018      	beq.n	80055ea <HAL_TIM_PWM_Start+0x19e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <HAL_TIM_PWM_Start+0x1fc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <HAL_TIM_PWM_Start+0x19e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a21      	ldr	r2, [pc, #132]	; (800564c <HAL_TIM_PWM_Start+0x200>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00e      	beq.n	80055ea <HAL_TIM_PWM_Start+0x19e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <HAL_TIM_PWM_Start+0x204>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_TIM_PWM_Start+0x19e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a17      	ldr	r2, [pc, #92]	; (8005638 <HAL_TIM_PWM_Start+0x1ec>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_TIM_PWM_Start+0x19e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1b      	ldr	r2, [pc, #108]	; (8005654 <HAL_TIM_PWM_Start+0x208>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d115      	bne.n	8005616 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <HAL_TIM_PWM_Start+0x20c>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	d015      	beq.n	8005628 <HAL_TIM_PWM_Start+0x1dc>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005602:	d011      	beq.n	8005628 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005614:	e008      	b.n	8005628 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e000      	b.n	800562a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005628:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40001800 	.word	0x40001800
 8005658:	00010007 	.word	0x00010007

0800565c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005672:	2302      	movs	r3, #2
 8005674:	e0fd      	b.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b14      	cmp	r3, #20
 8005682:	f200 80f0 	bhi.w	8005866 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056e1 	.word	0x080056e1
 8005690:	08005867 	.word	0x08005867
 8005694:	08005867 	.word	0x08005867
 8005698:	08005867 	.word	0x08005867
 800569c:	08005721 	.word	0x08005721
 80056a0:	08005867 	.word	0x08005867
 80056a4:	08005867 	.word	0x08005867
 80056a8:	08005867 	.word	0x08005867
 80056ac:	08005763 	.word	0x08005763
 80056b0:	08005867 	.word	0x08005867
 80056b4:	08005867 	.word	0x08005867
 80056b8:	08005867 	.word	0x08005867
 80056bc:	080057a3 	.word	0x080057a3
 80056c0:	08005867 	.word	0x08005867
 80056c4:	08005867 	.word	0x08005867
 80056c8:	08005867 	.word	0x08005867
 80056cc:	080057e5 	.word	0x080057e5
 80056d0:	08005867 	.word	0x08005867
 80056d4:	08005867 	.word	0x08005867
 80056d8:	08005867 	.word	0x08005867
 80056dc:	08005825 	.word	0x08005825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fa56 	bl	8005b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	619a      	str	r2, [r3, #24]
      break;
 800571e:	e0a3      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fac6 	bl	8005cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6999      	ldr	r1, [r3, #24]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	619a      	str	r2, [r3, #24]
      break;
 8005760:	e082      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fb2f 	bl	8005dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0208 	orr.w	r2, r2, #8
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0204 	bic.w	r2, r2, #4
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	61da      	str	r2, [r3, #28]
      break;
 80057a0:	e062      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fb95 	bl	8005ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	021a      	lsls	r2, r3, #8
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	61da      	str	r2, [r3, #28]
      break;
 80057e2:	e041      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fbdc 	bl	8005fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0208 	orr.w	r2, r2, #8
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0204 	bic.w	r2, r2, #4
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005822:	e021      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fc1e 	bl	800606c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005864:	e000      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop

0800587c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIM_ConfigClockSource+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e0db      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x1d0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4b69      	ldr	r3, [pc, #420]	; (8005a54 <HAL_TIM_ConfigClockSource+0x1d8>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a63      	ldr	r2, [pc, #396]	; (8005a58 <HAL_TIM_ConfigClockSource+0x1dc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	f000 80a9 	beq.w	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 80058d0:	4a61      	ldr	r2, [pc, #388]	; (8005a58 <HAL_TIM_ConfigClockSource+0x1dc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	f200 80ae 	bhi.w	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 80058d8:	4a60      	ldr	r2, [pc, #384]	; (8005a5c <HAL_TIM_ConfigClockSource+0x1e0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	f000 80a1 	beq.w	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 80058e0:	4a5e      	ldr	r2, [pc, #376]	; (8005a5c <HAL_TIM_ConfigClockSource+0x1e0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	f200 80a6 	bhi.w	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 80058e8:	4a5d      	ldr	r2, [pc, #372]	; (8005a60 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f000 8099 	beq.w	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 80058f0:	4a5b      	ldr	r2, [pc, #364]	; (8005a60 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	f200 809e 	bhi.w	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 80058f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058fc:	f000 8091 	beq.w	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 8005900:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005904:	f200 8096 	bhi.w	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 8005908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800590c:	f000 8089 	beq.w	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 8005910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005914:	f200 808e 	bhi.w	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 8005918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800591c:	d03e      	beq.n	800599c <HAL_TIM_ConfigClockSource+0x120>
 800591e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005922:	f200 8087 	bhi.w	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 8005926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592a:	f000 8085 	beq.w	8005a38 <HAL_TIM_ConfigClockSource+0x1bc>
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	d87f      	bhi.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 8005934:	2b70      	cmp	r3, #112	; 0x70
 8005936:	d01a      	beq.n	800596e <HAL_TIM_ConfigClockSource+0xf2>
 8005938:	2b70      	cmp	r3, #112	; 0x70
 800593a:	d87b      	bhi.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 800593c:	2b60      	cmp	r3, #96	; 0x60
 800593e:	d050      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x166>
 8005940:	2b60      	cmp	r3, #96	; 0x60
 8005942:	d877      	bhi.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 8005944:	2b50      	cmp	r3, #80	; 0x50
 8005946:	d03c      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x146>
 8005948:	2b50      	cmp	r3, #80	; 0x50
 800594a:	d873      	bhi.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d058      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x186>
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d86f      	bhi.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 8005954:	2b30      	cmp	r3, #48	; 0x30
 8005956:	d064      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 8005958:	2b30      	cmp	r3, #48	; 0x30
 800595a:	d86b      	bhi.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 800595c:	2b20      	cmp	r3, #32
 800595e:	d060      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 8005960:	2b20      	cmp	r3, #32
 8005962:	d867      	bhi.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d05c      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
 8005968:	2b10      	cmp	r3, #16
 800596a:	d05a      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800596c:	e062      	b.n	8005a34 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6899      	ldr	r1, [r3, #8]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f000 fc57 	bl	8006230 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005990:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	609a      	str	r2, [r3, #8]
      break;
 800599a:	e04e      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	6899      	ldr	r1, [r3, #8]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f000 fc40 	bl	8006230 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059be:	609a      	str	r2, [r3, #8]
      break;
 80059c0:	e03b      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f000 fbb0 	bl	8006134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2150      	movs	r1, #80	; 0x50
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fc0a 	bl	80061f4 <TIM_ITRx_SetConfig>
      break;
 80059e0:	e02b      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f000 fbcf 	bl	8006192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2160      	movs	r1, #96	; 0x60
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fbfa 	bl	80061f4 <TIM_ITRx_SetConfig>
      break;
 8005a00:	e01b      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f000 fb90 	bl	8006134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2140      	movs	r1, #64	; 0x40
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fbea 	bl	80061f4 <TIM_ITRx_SetConfig>
      break;
 8005a20:	e00b      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	f000 fbe1 	bl	80061f4 <TIM_ITRx_SetConfig>
        break;
 8005a32:	e002      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005a38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	ffceff88 	.word	0xffceff88
 8005a58:	00100040 	.word	0x00100040
 8005a5c:	00100030 	.word	0x00100030
 8005a60:	00100020 	.word	0x00100020

08005a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a40      	ldr	r2, [pc, #256]	; (8005b78 <TIM_Base_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d00f      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3d      	ldr	r2, [pc, #244]	; (8005b7c <TIM_Base_SetConfig+0x118>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3c      	ldr	r2, [pc, #240]	; (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3b      	ldr	r2, [pc, #236]	; (8005b84 <TIM_Base_SetConfig+0x120>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <TIM_Base_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d108      	bne.n	8005ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2f      	ldr	r2, [pc, #188]	; (8005b78 <TIM_Base_SetConfig+0x114>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d01f      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac4:	d01b      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <TIM_Base_SetConfig+0x118>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d017      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	; (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <TIM_Base_SetConfig+0x120>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00f      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <TIM_Base_SetConfig+0x124>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00b      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <TIM_Base_SetConfig+0x128>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d007      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_Base_SetConfig+0x9a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <TIM_Base_SetConfig+0x130>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d108      	bne.n	8005b10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <TIM_Base_SetConfig+0x114>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00f      	beq.n	8005b5c <TIM_Base_SetConfig+0xf8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a12      	ldr	r2, [pc, #72]	; (8005b88 <TIM_Base_SetConfig+0x124>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00b      	beq.n	8005b5c <TIM_Base_SetConfig+0xf8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a11      	ldr	r2, [pc, #68]	; (8005b8c <TIM_Base_SetConfig+0x128>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_Base_SetConfig+0xf8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_Base_SetConfig+0xf8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a0f      	ldr	r2, [pc, #60]	; (8005b94 <TIM_Base_SetConfig+0x130>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d103      	bne.n	8005b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	615a      	str	r2, [r3, #20]
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800

08005b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0201 	bic.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4b37      	ldr	r3, [pc, #220]	; (8005ca0 <TIM_OC1_SetConfig+0x108>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 0302 	bic.w	r3, r3, #2
 8005be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a2d      	ldr	r2, [pc, #180]	; (8005ca4 <TIM_OC1_SetConfig+0x10c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00f      	beq.n	8005c14 <TIM_OC1_SetConfig+0x7c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <TIM_OC1_SetConfig+0x110>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <TIM_OC1_SetConfig+0x7c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <TIM_OC1_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d007      	beq.n	8005c14 <TIM_OC1_SetConfig+0x7c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <TIM_OC1_SetConfig+0x118>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_OC1_SetConfig+0x7c>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <TIM_OC1_SetConfig+0x11c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d10c      	bne.n	8005c2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0308 	bic.w	r3, r3, #8
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 0304 	bic.w	r3, r3, #4
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <TIM_OC1_SetConfig+0x10c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00f      	beq.n	8005c56 <TIM_OC1_SetConfig+0xbe>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <TIM_OC1_SetConfig+0x110>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00b      	beq.n	8005c56 <TIM_OC1_SetConfig+0xbe>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <TIM_OC1_SetConfig+0x114>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <TIM_OC1_SetConfig+0xbe>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <TIM_OC1_SetConfig+0x118>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d003      	beq.n	8005c56 <TIM_OC1_SetConfig+0xbe>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <TIM_OC1_SetConfig+0x11c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d111      	bne.n	8005c7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	621a      	str	r2, [r3, #32]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	fffeff8f 	.word	0xfffeff8f
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40010400 	.word	0x40010400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800

08005cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f023 0210 	bic.w	r2, r3, #16
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4b34      	ldr	r3, [pc, #208]	; (8005db4 <TIM_OC2_SetConfig+0xfc>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0320 	bic.w	r3, r3, #32
 8005d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <TIM_OC2_SetConfig+0x100>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_OC2_SetConfig+0x68>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <TIM_OC2_SetConfig+0x104>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10d      	bne.n	8005d3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <TIM_OC2_SetConfig+0x100>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00f      	beq.n	8005d64 <TIM_OC2_SetConfig+0xac>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <TIM_OC2_SetConfig+0x104>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <TIM_OC2_SetConfig+0xac>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <TIM_OC2_SetConfig+0x108>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d007      	beq.n	8005d64 <TIM_OC2_SetConfig+0xac>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1b      	ldr	r2, [pc, #108]	; (8005dc4 <TIM_OC2_SetConfig+0x10c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC2_SetConfig+0xac>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <TIM_OC2_SetConfig+0x110>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d113      	bne.n	8005d8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	feff8fff 	.word	0xfeff8fff
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40010400 	.word	0x40010400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800

08005dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <TIM_OC3_SetConfig+0xf8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d003      	beq.n	8005e32 <TIM_OC3_SetConfig+0x66>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a26      	ldr	r2, [pc, #152]	; (8005ec8 <TIM_OC3_SetConfig+0xfc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d10d      	bne.n	8005e4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <TIM_OC3_SetConfig+0xf8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <TIM_OC3_SetConfig+0xaa>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <TIM_OC3_SetConfig+0xfc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <TIM_OC3_SetConfig+0xaa>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <TIM_OC3_SetConfig+0x100>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <TIM_OC3_SetConfig+0xaa>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <TIM_OC3_SetConfig+0x104>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_OC3_SetConfig+0xaa>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a18      	ldr	r2, [pc, #96]	; (8005ed4 <TIM_OC3_SetConfig+0x108>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d113      	bne.n	8005e9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	621a      	str	r2, [r3, #32]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	40014400 	.word	0x40014400
 8005ed4:	40014800 	.word	0x40014800

08005ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	031b      	lsls	r3, r3, #12
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <TIM_OC4_SetConfig+0xbc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_OC4_SetConfig+0x80>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <TIM_OC4_SetConfig+0xc0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_OC4_SetConfig+0x80>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC4_SetConfig+0xc4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_OC4_SetConfig+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_OC4_SetConfig+0xc8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC4_SetConfig+0x80>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <TIM_OC4_SetConfig+0xcc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	019b      	lsls	r3, r3, #6
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40010400 	.word	0x40010400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	041b      	lsls	r3, r3, #16
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a17      	ldr	r2, [pc, #92]	; (8006058 <TIM_OC5_SetConfig+0xb0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00f      	beq.n	800601e <TIM_OC5_SetConfig+0x76>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a16      	ldr	r2, [pc, #88]	; (800605c <TIM_OC5_SetConfig+0xb4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_OC5_SetConfig+0x76>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a15      	ldr	r2, [pc, #84]	; (8006060 <TIM_OC5_SetConfig+0xb8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d007      	beq.n	800601e <TIM_OC5_SetConfig+0x76>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a14      	ldr	r2, [pc, #80]	; (8006064 <TIM_OC5_SetConfig+0xbc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_OC5_SetConfig+0x76>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a13      	ldr	r2, [pc, #76]	; (8006068 <TIM_OC5_SetConfig+0xc0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d109      	bne.n	8006032 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	621a      	str	r2, [r3, #32]
}
 800604c:	bf00      	nop
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	40010000 	.word	0x40010000
 800605c:	40010400 	.word	0x40010400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800

0800606c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	051b      	lsls	r3, r3, #20
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <TIM_OC6_SetConfig+0xb4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00f      	beq.n	80060e4 <TIM_OC6_SetConfig+0x78>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a17      	ldr	r2, [pc, #92]	; (8006124 <TIM_OC6_SetConfig+0xb8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <TIM_OC6_SetConfig+0x78>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a16      	ldr	r2, [pc, #88]	; (8006128 <TIM_OC6_SetConfig+0xbc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <TIM_OC6_SetConfig+0x78>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a15      	ldr	r2, [pc, #84]	; (800612c <TIM_OC6_SetConfig+0xc0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_OC6_SetConfig+0x78>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a14      	ldr	r2, [pc, #80]	; (8006130 <TIM_OC6_SetConfig+0xc4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d109      	bne.n	80060f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	029b      	lsls	r3, r3, #10
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40010000 	.word	0x40010000
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800

08006134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0201 	bic.w	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f023 030a 	bic.w	r3, r3, #10
 8006170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0210 	bic.w	r2, r3, #16
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	031b      	lsls	r3, r3, #12
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4b09      	ldr	r3, [pc, #36]	; (800622c <TIM_ITRx_SetConfig+0x38>)
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	f043 0307 	orr.w	r3, r3, #7
 8006216:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	609a      	str	r2, [r3, #8]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	ffcfff8f 	.word	0xffcfff8f

08006230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	431a      	orrs	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2201      	movs	r2, #1
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	43db      	mvns	r3, r3
 8006292:	401a      	ands	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <HAL_TIMEx_PWMN_Start+0x24>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e022      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0x6a>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d109      	bne.n	80062fa <HAL_TIMEx_PWMN_Start+0x3e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	bf14      	ite	ne
 80062f2:	2301      	movne	r3, #1
 80062f4:	2300      	moveq	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	e015      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0x6a>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d109      	bne.n	8006314 <HAL_TIMEx_PWMN_Start+0x58>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e008      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0x6a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e06e      	b.n	800640c <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d104      	bne.n	800633e <HAL_TIMEx_PWMN_Start+0x82>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633c:	e013      	b.n	8006366 <HAL_TIMEx_PWMN_Start+0xaa>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b04      	cmp	r3, #4
 8006342:	d104      	bne.n	800634e <HAL_TIMEx_PWMN_Start+0x92>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800634c:	e00b      	b.n	8006366 <HAL_TIMEx_PWMN_Start+0xaa>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d104      	bne.n	800635e <HAL_TIMEx_PWMN_Start+0xa2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800635c:	e003      	b.n	8006366 <HAL_TIMEx_PWMN_Start+0xaa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2204      	movs	r2, #4
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f964 	bl	800663c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006382:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a22      	ldr	r2, [pc, #136]	; (8006414 <HAL_TIMEx_PWMN_Start+0x158>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01d      	beq.n	80063ca <HAL_TIMEx_PWMN_Start+0x10e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006396:	d018      	beq.n	80063ca <HAL_TIMEx_PWMN_Start+0x10e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <HAL_TIMEx_PWMN_Start+0x15c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <HAL_TIMEx_PWMN_Start+0x10e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1d      	ldr	r2, [pc, #116]	; (800641c <HAL_TIMEx_PWMN_Start+0x160>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00e      	beq.n	80063ca <HAL_TIMEx_PWMN_Start+0x10e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_TIMEx_PWMN_Start+0x164>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d009      	beq.n	80063ca <HAL_TIMEx_PWMN_Start+0x10e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <HAL_TIMEx_PWMN_Start+0x168>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_TIMEx_PWMN_Start+0x10e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIMEx_PWMN_Start+0x16c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d115      	bne.n	80063f6 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	4b16      	ldr	r3, [pc, #88]	; (800642c <HAL_TIMEx_PWMN_Start+0x170>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b06      	cmp	r3, #6
 80063da:	d015      	beq.n	8006408 <HAL_TIMEx_PWMN_Start+0x14c>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d011      	beq.n	8006408 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f4:	e008      	b.n	8006408 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0201 	orr.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e000      	b.n	800640a <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40010000 	.word	0x40010000
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40010400 	.word	0x40010400
 8006428:	40001800 	.word	0x40001800
 800642c:	00010007 	.word	0x00010007

08006430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006444:	2302      	movs	r3, #2
 8006446:	e068      	b.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a2e      	ldr	r2, [pc, #184]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2d      	ldr	r2, [pc, #180]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d108      	bne.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1e      	ldr	r2, [pc, #120]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01d      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ba:	d018      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00e      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a18      	ldr	r2, [pc, #96]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a13      	ldr	r2, [pc, #76]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a14      	ldr	r2, [pc, #80]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10c      	bne.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40010000 	.word	0x40010000
 800652c:	40010400 	.word	0x40010400
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40001800 	.word	0x40001800

08006540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006558:	2302      	movs	r3, #2
 800655a:	e065      	b.n	8006628 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a16      	ldr	r2, [pc, #88]	; (8006634 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d115      	bne.n	8006616 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	051b      	lsls	r3, r3, #20
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	40010000 	.word	0x40010000
 8006638:	40010400 	.word	0x40010400

0800663c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2204      	movs	r2, #4
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	43db      	mvns	r3, r3
 800665e:	401a      	ands	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1a      	ldr	r2, [r3, #32]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	fa01 f303 	lsl.w	r3, r1, r3
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <DigitalPins_Init>:

/*******************************************************************************
 * Code
 ******************************************************************************/
static void DigitalPins_Init(void)
{
 8006688:	b480      	push	{r7}
 800668a:	b08d      	sub	sp, #52	; 0x34
 800668c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800668e:	4b55      	ldr	r3, [pc, #340]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006694:	4a53      	ldr	r2, [pc, #332]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800669e:	4b51      	ldr	r3, [pc, #324]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ac:	4b4d      	ldr	r3, [pc, #308]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066b2:	4a4c      	ldr	r2, [pc, #304]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066bc:	4b49      	ldr	r3, [pc, #292]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066ca:	4b46      	ldr	r3, [pc, #280]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066d0:	4a44      	ldr	r2, [pc, #272]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066da:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066e8:	4b3e      	ldr	r3, [pc, #248]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ee:	4a3d      	ldr	r2, [pc, #244]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066f0:	f043 0308 	orr.w	r3, r3, #8
 80066f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066f8:	4b3a      	ldr	r3, [pc, #232]	; (80067e4 <DigitalPins_Init+0x15c>)
 80066fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	623b      	str	r3, [r7, #32]
 8006704:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006706:	4b37      	ldr	r3, [pc, #220]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800670c:	4a35      	ldr	r2, [pc, #212]	; (80067e4 <DigitalPins_Init+0x15c>)
 800670e:	f043 0310 	orr.w	r3, r3, #16
 8006712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006716:	4b33      	ldr	r3, [pc, #204]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006724:	4b2f      	ldr	r3, [pc, #188]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800672a:	4a2e      	ldr	r2, [pc, #184]	; (80067e4 <DigitalPins_Init+0x15c>)
 800672c:	f043 0320 	orr.w	r3, r3, #32
 8006730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006734:	4b2b      	ldr	r3, [pc, #172]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006742:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006748:	4a26      	ldr	r2, [pc, #152]	; (80067e4 <DigitalPins_Init+0x15c>)
 800674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006752:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006760:	4b20      	ldr	r3, [pc, #128]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006766:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006770:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800677e:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006784:	4a17      	ldr	r2, [pc, #92]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800678e:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <DigitalPins_Init+0x15c>)
 8006790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <DigitalPins_Init+0x15c>)
 800679e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067a2:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <DigitalPins_Init+0x15c>)
 80067a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <DigitalPins_Init+0x15c>)
 80067ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b6:	60bb      	str	r3, [r7, #8]
 80067b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <DigitalPins_Init+0x15c>)
 80067bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067c0:	4a08      	ldr	r2, [pc, #32]	; (80067e4 <DigitalPins_Init+0x15c>)
 80067c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <DigitalPins_Init+0x15c>)
 80067cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
}
 80067d8:	bf00      	nop
 80067da:	3734      	adds	r7, #52	; 0x34
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	58024400 	.word	0x58024400

080067e8 <MainControl_Init>:
static volatile bool recompute = false;
/*******************************************************************************
 * Code
 ******************************************************************************/
void MainControl_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
	DigitalPins_Init();
 80067ec:	f7ff ff4c 	bl	8006688 <DigitalPins_Init>
	
	inverterConfig1 = Inverter3Ph_Init(&inverterInitConfig1);
 80067f0:	4810      	ldr	r0, [pc, #64]	; (8006834 <MainControl_Init+0x4c>)
 80067f2:	f7fa f8e9 	bl	80009c8 <Inverter3Ph_Init>
 80067f6:	4603      	mov	r3, r0
 80067f8:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <MainControl_Init+0x50>)
 80067fa:	6013      	str	r3, [r2, #0]
	inverterConfig2 = Inverter3Ph_Init(&inverterInitConfig2);
 80067fc:	480f      	ldr	r0, [pc, #60]	; (800683c <MainControl_Init+0x54>)
 80067fe:	f7fa f8e3 	bl	80009c8 <Inverter3Ph_Init>
 8006802:	4603      	mov	r3, r0
 8006804:	4a0e      	ldr	r2, [pc, #56]	; (8006840 <MainControl_Init+0x58>)
 8006806:	6013      	str	r3, [r2, #0]
	
	if(inverterConfig1 == NULL || inverterConfig2 == NULL)
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <MainControl_Init+0x50>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <MainControl_Init+0x30>
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <MainControl_Init+0x58>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <MainControl_Init+0x34>
		Error_Handler();
 8006818:	f7fa fb24 	bl	8000e64 <Error_Handler>
	
//	for (int i = 13; i <= 14; i++)
//		DoutManager_SelectMode(i, PWM_FNC_IO, GPIO_PIN_RESET);
	DoutController_SelectMode(15, PWM_FNC_IO, GPIO_PIN_RESET);
 800681c:	2200      	movs	r2, #0
 800681e:	2101      	movs	r1, #1
 8006820:	200f      	movs	r0, #15
 8006822:	f7f9 ffc5 	bl	80007b0 <DoutController_SelectMode>
	DoutController_SelectMode(16, PWM_FNC_IO, GPIO_PIN_RESET);
 8006826:	2200      	movs	r2, #0
 8006828:	2101      	movs	r1, #1
 800682a:	2010      	movs	r0, #16
 800682c:	f7f9 ffc0 	bl	80007b0 <DoutController_SelectMode>
}
 8006830:	bf00      	nop
 8006832:	bd80      	pop	{r7, pc}
 8006834:	240000d8 	.word	0x240000d8
 8006838:	2400021c 	.word	0x2400021c
 800683c:	240000f0 	.word	0x240000f0
 8006840:	24000220 	.word	0x24000220

08006844 <MainControl_Run>:

void MainControl_Run(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
	HAL_HRTIM_WaveformOutputStart(&hhrtim,HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TB1 | HRTIM_OUTPUT_TB2 | HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2 | HRTIM_OUTPUT_TE1 | HRTIM_OUTPUT_TE2);																	
 8006848:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800684c:	4822      	ldr	r0, [pc, #136]	; (80068d8 <MainControl_Run+0x94>)
 800684e:	f7fb fd44 	bl	80022da <HAL_HRTIM_WaveformOutputStart>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8006852:	2100      	movs	r1, #0
 8006854:	4821      	ldr	r0, [pc, #132]	; (80068dc <MainControl_Run+0x98>)
 8006856:	f7fe fdf9 	bl	800544c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);	
 800685a:	2100      	movs	r1, #0
 800685c:	481f      	ldr	r0, [pc, #124]	; (80068dc <MainControl_Run+0x98>)
 800685e:	f7ff fd2d 	bl	80062bc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8006862:	2104      	movs	r1, #4
 8006864:	481d      	ldr	r0, [pc, #116]	; (80068dc <MainControl_Run+0x98>)
 8006866:	f7fe fdf1 	bl	800544c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);	
 800686a:	2104      	movs	r1, #4
 800686c:	481b      	ldr	r0, [pc, #108]	; (80068dc <MainControl_Run+0x98>)
 800686e:	f7ff fd25 	bl	80062bc <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8006872:	2108      	movs	r1, #8
 8006874:	4819      	ldr	r0, [pc, #100]	; (80068dc <MainControl_Run+0x98>)
 8006876:	f7fe fde9 	bl	800544c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);		
 800687a:	2108      	movs	r1, #8
 800687c:	4817      	ldr	r0, [pc, #92]	; (80068dc <MainControl_Run+0x98>)
 800687e:	f7ff fd1d 	bl	80062bc <HAL_TIMEx_PWMN_Start>
	HAL_HRTIM_WaveformCountStart_IT(&hhrtim,HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B | HRTIM_TIMERID_TIMER_C | HRTIM_TIMERID_TIMER_D | HRTIM_TIMERID_TIMER_E);	
 8006882:	f44f 1178 	mov.w	r1, #4063232	; 0x3e0000
 8006886:	4814      	ldr	r0, [pc, #80]	; (80068d8 <MainControl_Run+0x94>)
 8006888:	f7fb fd54 	bl	8002334 <HAL_HRTIM_WaveformCountStart_IT>
	
	hhrtim.Instance->sMasterRegs.MCR &= ~(HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B | HRTIM_TIMERID_TIMER_C | HRTIM_TIMERID_TIMER_D | HRTIM_TIMERID_TIMER_E);
 800688c:	4b12      	ldr	r3, [pc, #72]	; (80068d8 <MainControl_Run+0x94>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <MainControl_Run+0x94>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 800689a:	601a      	str	r2, [r3, #0]
	htim1.Instance->CR1 &= ~(TIM_CR1_CEN);
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <MainControl_Run+0x98>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <MainControl_Run+0x98>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
	htim1.Instance->CNT = 0;
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <MainControl_Run+0x98>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24
	
	htim1.Instance->CR1 |= (TIM_CR1_CEN);
 80068b4:	4b09      	ldr	r3, [pc, #36]	; (80068dc <MainControl_Run+0x98>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b08      	ldr	r3, [pc, #32]	; (80068dc <MainControl_Run+0x98>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
	hhrtim.Instance->sMasterRegs.MCR |= (HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B | HRTIM_TIMERID_TIMER_C | HRTIM_TIMERID_TIMER_D | HRTIM_TIMERID_TIMER_E);
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <MainControl_Run+0x94>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <MainControl_Run+0x94>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 1278 	orr.w	r2, r2, #4063232	; 0x3e0000
 80068d2:	601a      	str	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	240002b4 	.word	0x240002b4
 80068dc:	24000268 	.word	0x24000268

080068e0 <Inverter3Ph_ResetSignal>:
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
	HAL_HRTIM_WaveformCountStop_IT(&hhrtim,HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_B | HRTIM_TIMERID_TIMER_C | HRTIM_TIMERID_TIMER_D | HRTIM_TIMERID_TIMER_E);
}

void Inverter3Ph_ResetSignal(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
	recompute = true;
 80068e4:	4b03      	ldr	r3, [pc, #12]	; (80068f4 <Inverter3Ph_ResetSignal+0x14>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	701a      	strb	r2, [r3, #0]
}
 80068ea:	bf00      	nop
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	24000224 	.word	0x24000224

080068f8 <HAL_HRTIM_CounterResetCallback>:

/*! @brief callback for when one cycle is completed on the PWM driver */
void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	recompute = true;
 8006902:	4b04      	ldr	r3, [pc, #16]	; (8006914 <HAL_HRTIM_CounterResetCallback+0x1c>)
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	24000224 	.word	0x24000224

08006918 <OpenLoopVByfControl>:
The modulation index is acquired by using the nominal frequency and modulation
index along with the current frequency to apply simple open loop V/F control
@param duties- duty cycles of the inverter to be applied in the next cycle (0-1)
*/
static void OpenLoopVByfControl(float* theta, float* modulationIndex)
{
 8006918:	b480      	push	{r7}
 800691a:	b089      	sub	sp, #36	; 0x24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	// should get desired frequency from adc values incase of control through an ADC value
	float desiredFreq = NOMINAL_FREQ * 0.5f;
 8006922:	4b56      	ldr	r3, [pc, #344]	; (8006a7c <OpenLoopVByfControl+0x164>)
 8006924:	61fb      	str	r3, [r7, #28]
	if(desiredFreq < MIN_FREQ)
 8006926:	edd7 7a07 	vldr	s15, [r7, #28]
 800692a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800692e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006936:	d502      	bpl.n	800693e <OpenLoopVByfControl+0x26>
		desiredFreq = MIN_FREQ;
 8006938:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800693c:	61fb      	str	r3, [r7, #28]
	if(desiredFreq > MAX_FREQ)
 800693e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006942:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8006a80 <OpenLoopVByfControl+0x168>
 8006946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800694a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800694e:	dd01      	ble.n	8006954 <OpenLoopVByfControl+0x3c>
		desiredFreq = MAX_FREQ;
 8006950:	4b4c      	ldr	r3, [pc, #304]	; (8006a84 <OpenLoopVByfControl+0x16c>)
 8006952:	61fb      	str	r3, [r7, #28]
	float reqModulationIndex = (NOMINAL_MODULATION_INDEX * desiredFreq) / NOMINAL_FREQ;
 8006954:	edd7 7a07 	vldr	s15, [r7, #28]
 8006958:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006a88 <OpenLoopVByfControl+0x170>
 800695c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006960:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8006a8c <OpenLoopVByfControl+0x174>
 8006964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006968:	edc7 7a06 	vstr	s15, [r7, #24]
	// this is the current frequency value which should be varied very slowly
	static float currFreq = MIN_FREQ;
	// adjust the current frequency if needed
	const float adjuster = ACCELERATION;						// for acceleration control can get it from the adc
 800696c:	4b48      	ldr	r3, [pc, #288]	; (8006a90 <OpenLoopVByfControl+0x178>)
 800696e:	617b      	str	r3, [r7, #20]
	if(currFreq < desiredFreq)
 8006970:	4b48      	ldr	r3, [pc, #288]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 8006972:	edd3 7a00 	vldr	s15, [r3]
 8006976:	ed97 7a07 	vldr	s14, [r7, #28]
 800697a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800697e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006982:	dd16      	ble.n	80069b2 <OpenLoopVByfControl+0x9a>
	{
		currFreq *= adjuster;
 8006984:	4b43      	ldr	r3, [pc, #268]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 8006986:	ed93 7a00 	vldr	s14, [r3]
 800698a:	edd7 7a05 	vldr	s15, [r7, #20]
 800698e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006992:	4b40      	ldr	r3, [pc, #256]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 8006994:	edc3 7a00 	vstr	s15, [r3]
		if(currFreq > desiredFreq)
 8006998:	4b3e      	ldr	r3, [pc, #248]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 800699a:	edd3 7a00 	vldr	s15, [r3]
 800699e:	ed97 7a07 	vldr	s14, [r7, #28]
 80069a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069aa:	d502      	bpl.n	80069b2 <OpenLoopVByfControl+0x9a>
			currFreq = desiredFreq;
 80069ac:	4a39      	ldr	r2, [pc, #228]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	6013      	str	r3, [r2, #0]
	}
	if(currFreq > desiredFreq)
 80069b2:	4b38      	ldr	r3, [pc, #224]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 80069b4:	edd3 7a00 	vldr	s15, [r3]
 80069b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80069bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c4:	d516      	bpl.n	80069f4 <OpenLoopVByfControl+0xdc>
	{
		currFreq /= adjuster;
 80069c6:	4b33      	ldr	r3, [pc, #204]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 80069c8:	edd3 6a00 	vldr	s13, [r3]
 80069cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80069d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d4:	4b2f      	ldr	r3, [pc, #188]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 80069d6:	edc3 7a00 	vstr	s15, [r3]
		if(currFreq < desiredFreq)
 80069da:	4b2e      	ldr	r3, [pc, #184]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 80069dc:	edd3 7a00 	vldr	s15, [r3]
 80069e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80069e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ec:	dd02      	ble.n	80069f4 <OpenLoopVByfControl+0xdc>
			currFreq = desiredFreq;
 80069ee:	4a29      	ldr	r2, [pc, #164]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	6013      	str	r3, [r2, #0]
	}

	// compute the current modulation index
	*modulationIndex = (NOMINAL_MODULATION_INDEX * currFreq) / NOMINAL_FREQ;
 80069f4:	4b27      	ldr	r3, [pc, #156]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 80069f6:	edd3 7a00 	vldr	s15, [r3]
 80069fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006a88 <OpenLoopVByfControl+0x170>
 80069fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a02:	eddf 6a22 	vldr	s13, [pc, #136]	; 8006a8c <OpenLoopVByfControl+0x174>
 8006a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	edc3 7a00 	vstr	s15, [r3]
	
	float divider = PWM_FREQ / currFreq;
 8006a10:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <OpenLoopVByfControl+0x17c>)
 8006a12:	ed93 7a00 	vldr	s14, [r3]
 8006a16:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006a98 <OpenLoopVByfControl+0x180>
 8006a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a1e:	edc7 7a04 	vstr	s15, [r7, #16]
	float stepSize = TWO_PI / divider;
 8006a22:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006a9c <OpenLoopVByfControl+0x184>
 8006a26:	ed97 7a04 	vldr	s14, [r7, #16]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2e:	edc7 7a03 	vstr	s15, [r7, #12]
	*theta += stepSize;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	ed93 7a00 	vldr	s14, [r3]
 8006a38:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	edc3 7a00 	vstr	s15, [r3]
	// Adjust the base theta
	if(*theta > TWO_PI)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	edd3 7a00 	vldr	s15, [r3]
 8006a4c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006a9c <OpenLoopVByfControl+0x184>
 8006a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a58:	dc00      	bgt.n	8006a5c <OpenLoopVByfControl+0x144>
		*theta -= TWO_PI;
}
 8006a5a:	e009      	b.n	8006a70 <OpenLoopVByfControl+0x158>
		*theta -= TWO_PI;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	edd3 7a00 	vldr	s15, [r3]
 8006a62:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006a9c <OpenLoopVByfControl+0x184>
 8006a66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	edc3 7a00 	vstr	s15, [r3]
}
 8006a70:	bf00      	nop
 8006a72:	3724      	adds	r7, #36	; 0x24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	41c80000 	.word	0x41c80000
 8006a80:	42700000 	.word	0x42700000
 8006a84:	42700000 	.word	0x42700000
 8006a88:	3f333333 	.word	0x3f333333
 8006a8c:	42480000 	.word	0x42480000
 8006a90:	3f800054 	.word	0x3f800054
 8006a94:	24000108 	.word	0x24000108
 8006a98:	46c35000 	.word	0x46c35000
 8006a9c:	40c90fdc 	.word	0x40c90fdc

08006aa0 <MainControl_Loop>:
	sIabc->fB = adcVals.V2;
	sIabc->fC = adcVals.V3;
}

void MainControl_Loop(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
	if(recompute)
 8006aa6:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <MainControl_Loop+0x64>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d025      	beq.n	8006afc <MainControl_Loop+0x5c>
	{
		static float theta = 0.5f;
		static float modulationIndex = NOMINAL_MODULATION_INDEX * 0.5f;
#if 1
		float duties[3];
		OpenLoopVByfControl(&theta, duties);
 8006ab0:	1d3b      	adds	r3, r7, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4814      	ldr	r0, [pc, #80]	; (8006b08 <MainControl_Loop+0x68>)
 8006ab6:	f7ff ff2f 	bl	8006918 <OpenLoopVByfControl>
		Inverter3Ph_UpdateSPWM(inverterConfig1, theta, modulationIndex);
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <MainControl_Loop+0x6c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <MainControl_Loop+0x68>)
 8006ac0:	edd2 7a00 	vldr	s15, [r2]
 8006ac4:	4a12      	ldr	r2, [pc, #72]	; (8006b10 <MainControl_Loop+0x70>)
 8006ac6:	ed92 7a00 	vldr	s14, [r2]
 8006aca:	eef0 0a47 	vmov.f32	s1, s14
 8006ace:	eeb0 0a67 	vmov.f32	s0, s15
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fa f848 	bl	8000b68 <Inverter3Ph_UpdateSPWM>
		Inverter3Ph_UpdateSPWM(inverterConfig2, theta, modulationIndex);
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <MainControl_Loop+0x74>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <MainControl_Loop+0x68>)
 8006ade:	edd2 7a00 	vldr	s15, [r2]
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <MainControl_Loop+0x70>)
 8006ae4:	ed92 7a00 	vldr	s14, [r2]
 8006ae8:	eef0 0a47 	vmov.f32	s1, s14
 8006aec:	eeb0 0a67 	vmov.f32	s0, s15
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fa f839 	bl	8000b68 <Inverter3Ph_UpdateSPWM>
			sSincos->fTheta -= 0;
			sSincos->fTheta = AdjustTheta(sSincos->fTheta);
			convert_wt2sincos(sSincos);
		}
#endif
		recompute = false;
 8006af6:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <MainControl_Loop+0x64>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
	}
}
 8006afc:	bf00      	nop
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	24000224 	.word	0x24000224
 8006b08:	2400010c 	.word	0x2400010c
 8006b0c:	2400021c 	.word	0x2400021c
 8006b10:	24000110 	.word	0x24000110
 8006b14:	24000220 	.word	0x24000220

08006b18 <__errno>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	; (8006b20 <__errno+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	24000114 	.word	0x24000114

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	; (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	; (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	; (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	; (8006b68 <__libc_init_array+0x44>)
 8006b38:	f000 f914 	bl	8006d64 <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	08006f98 	.word	0x08006f98
 8006b60:	08006f98 	.word	0x08006f98
 8006b64:	08006f98 	.word	0x08006f98
 8006b68:	08006f9c 	.word	0x08006f9c

08006b6c <memcpy>:
 8006b6c:	440a      	add	r2, r1
 8006b6e:	4291      	cmp	r1, r2
 8006b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b74:	d100      	bne.n	8006b78 <memcpy+0xc>
 8006b76:	4770      	bx	lr
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b82:	4291      	cmp	r1, r2
 8006b84:	d1f9      	bne.n	8006b7a <memcpy+0xe>
 8006b86:	bd10      	pop	{r4, pc}

08006b88 <memset>:
 8006b88:	4402      	add	r2, r0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d100      	bne.n	8006b92 <memset+0xa>
 8006b90:	4770      	bx	lr
 8006b92:	f803 1b01 	strb.w	r1, [r3], #1
 8006b96:	e7f9      	b.n	8006b8c <memset+0x4>

08006b98 <sinf_poly>:
 8006b98:	07cb      	lsls	r3, r1, #31
 8006b9a:	d412      	bmi.n	8006bc2 <sinf_poly+0x2a>
 8006b9c:	ee21 6b00 	vmul.f64	d6, d1, d0
 8006ba0:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8006ba4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8006ba8:	eea5 7b01 	vfma.f64	d7, d5, d1
 8006bac:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8006bb0:	ee21 1b06 	vmul.f64	d1, d1, d6
 8006bb4:	eea5 0b06 	vfma.f64	d0, d5, d6
 8006bb8:	eea7 0b01 	vfma.f64	d0, d7, d1
 8006bbc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006bc0:	4770      	bx	lr
 8006bc2:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8006bc6:	ee21 6b01 	vmul.f64	d6, d1, d1
 8006bca:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8006bce:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8006bd2:	eea1 7b05 	vfma.f64	d7, d1, d5
 8006bd6:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8006bda:	eea1 0b05 	vfma.f64	d0, d1, d5
 8006bde:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8006be2:	ee21 1b06 	vmul.f64	d1, d1, d6
 8006be6:	eea6 0b05 	vfma.f64	d0, d6, d5
 8006bea:	e7e5      	b.n	8006bb8 <sinf_poly+0x20>
 8006bec:	0000      	movs	r0, r0
	...

08006bf0 <sinf>:
 8006bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bf2:	ee10 4a10 	vmov	r4, s0
 8006bf6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8006bfa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8006bfe:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006c02:	eef0 7a40 	vmov.f32	s15, s0
 8006c06:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8006c0a:	d218      	bcs.n	8006c3e <sinf+0x4e>
 8006c0c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006c10:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8006c14:	d20a      	bcs.n	8006c2c <sinf+0x3c>
 8006c16:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8006c1a:	d103      	bne.n	8006c24 <sinf+0x34>
 8006c1c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8006c20:	ed8d 1a01 	vstr	s2, [sp, #4]
 8006c24:	eeb0 0a67 	vmov.f32	s0, s15
 8006c28:	b003      	add	sp, #12
 8006c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2c:	483e      	ldr	r0, [pc, #248]	; (8006d28 <sinf+0x138>)
 8006c2e:	eeb0 0b46 	vmov.f64	d0, d6
 8006c32:	2100      	movs	r1, #0
 8006c34:	b003      	add	sp, #12
 8006c36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006c3a:	f7ff bfad 	b.w	8006b98 <sinf_poly>
 8006c3e:	f240 422e 	movw	r2, #1070	; 0x42e
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d824      	bhi.n	8006c90 <sinf+0xa0>
 8006c46:	4b38      	ldr	r3, [pc, #224]	; (8006d28 <sinf+0x138>)
 8006c48:	ed93 7b08 	vldr	d7, [r3, #32]
 8006c4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c50:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006c54:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006c58:	ee17 1a90 	vmov	r1, s15
 8006c5c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8006c60:	1609      	asrs	r1, r1, #24
 8006c62:	ee07 1a90 	vmov	s15, r1
 8006c66:	f001 0203 	and.w	r2, r1, #3
 8006c6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006c6e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006c72:	ed92 0b00 	vldr	d0, [r2]
 8006c76:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006c7a:	f011 0f02 	tst.w	r1, #2
 8006c7e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8006c82:	bf08      	it	eq
 8006c84:	4618      	moveq	r0, r3
 8006c86:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006c8a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006c8e:	e7d1      	b.n	8006c34 <sinf+0x44>
 8006c90:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8006c94:	d23d      	bcs.n	8006d12 <sinf+0x122>
 8006c96:	4b25      	ldr	r3, [pc, #148]	; (8006d2c <sinf+0x13c>)
 8006c98:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8006c9c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8006ca0:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8006ca4:	6a06      	ldr	r6, [r0, #32]
 8006ca6:	6900      	ldr	r0, [r0, #16]
 8006ca8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8006cac:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006cb0:	40a9      	lsls	r1, r5
 8006cb2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006cb6:	fba1 6706 	umull	r6, r7, r1, r6
 8006cba:	fb05 f301 	mul.w	r3, r5, r1
 8006cbe:	463a      	mov	r2, r7
 8006cc0:	fbe0 2301 	umlal	r2, r3, r0, r1
 8006cc4:	1c11      	adds	r1, r2, #0
 8006cc6:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8006cca:	2000      	movs	r0, #0
 8006ccc:	1a10      	subs	r0, r2, r0
 8006cce:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8006cd2:	eb63 0101 	sbc.w	r1, r3, r1
 8006cd6:	f7f9 fc8d 	bl	80005f4 <__aeabi_l2d>
 8006cda:	0fb5      	lsrs	r5, r6, #30
 8006cdc:	4a12      	ldr	r2, [pc, #72]	; (8006d28 <sinf+0x138>)
 8006cde:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 8006ce2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8006d20 <sinf+0x130>
 8006ce6:	ec41 0b17 	vmov	d7, r0, r1
 8006cea:	f003 0103 	and.w	r1, r3, #3
 8006cee:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8006cf2:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006cf6:	ed91 7b00 	vldr	d7, [r1]
 8006cfa:	ee20 1b00 	vmul.f64	d1, d0, d0
 8006cfe:	f013 0f02 	tst.w	r3, #2
 8006d02:	f102 0070 	add.w	r0, r2, #112	; 0x70
 8006d06:	4629      	mov	r1, r5
 8006d08:	bf08      	it	eq
 8006d0a:	4610      	moveq	r0, r2
 8006d0c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006d10:	e790      	b.n	8006c34 <sinf+0x44>
 8006d12:	b003      	add	sp, #12
 8006d14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006d18:	f000 b815 	b.w	8006d46 <__math_invalidf>
 8006d1c:	f3af 8000 	nop.w
 8006d20:	54442d18 	.word	0x54442d18
 8006d24:	3c1921fb 	.word	0x3c1921fb
 8006d28:	08006eb8 	.word	0x08006eb8
 8006d2c:	08006e54 	.word	0x08006e54

08006d30 <with_errnof>:
 8006d30:	b513      	push	{r0, r1, r4, lr}
 8006d32:	4604      	mov	r4, r0
 8006d34:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006d38:	f7ff feee 	bl	8006b18 <__errno>
 8006d3c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006d40:	6004      	str	r4, [r0, #0]
 8006d42:	b002      	add	sp, #8
 8006d44:	bd10      	pop	{r4, pc}

08006d46 <__math_invalidf>:
 8006d46:	eef0 7a40 	vmov.f32	s15, s0
 8006d4a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006d4e:	eef4 7a67 	vcmp.f32	s15, s15
 8006d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d56:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006d5a:	d602      	bvs.n	8006d62 <__math_invalidf+0x1c>
 8006d5c:	2021      	movs	r0, #33	; 0x21
 8006d5e:	f7ff bfe7 	b.w	8006d30 <with_errnof>
 8006d62:	4770      	bx	lr

08006d64 <_init>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr

08006d70 <_fini>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr
